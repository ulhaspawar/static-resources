/*! For license information please see 368.orbo-smart-capture.js.LICENSE.txt */
(self.webpackChunkOrboSmartCapture=self.webpackChunkOrboSmartCapture||[]).push([[368],{1368:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>h.ljI,Acos:()=>h.Vvy,Acosh:()=>h.PH8,AdadeltaOptimizer:()=>h.K$F,AdagradOptimizer:()=>h.ah4,AdamOptimizer:()=>h.FYc,AdamaxOptimizer:()=>h.oC7,Add:()=>h.OMN,AddN:()=>h.EkD,All:()=>h.u8Z,Any:()=>h.FSt,ArgMax:()=>h.Jp_,ArgMin:()=>h.p_m,Asin:()=>h.QKF,Asinh:()=>h.epO,Atan:()=>h.TyE,Atan2:()=>h.lxb,Atanh:()=>h.zP9,AvgPool:()=>h.ho8,AvgPool3D:()=>h.cS,AvgPool3DGrad:()=>h.wwC,AvgPoolGrad:()=>h.VCH,BatchMatMul:()=>h.jAQ,BatchToSpaceND:()=>h.Ik2,Bincount:()=>h.N4F,BroadcastArgs:()=>h.vj7,BroadcastTo:()=>h.LB5,Callback:()=>Nh,CallbackList:()=>$i,Cast:()=>h.KXH,Ceil:()=>h.QDP,ClipByValue:()=>h.vaV,Complex:()=>h.pr3,ComplexAbs:()=>h.$zE,Concat:()=>h.$dB,Conv2D:()=>h.p2J,Conv2DBackpropFilter:()=>h.rFm,Conv2DBackpropInput:()=>h.jfg,Conv3D:()=>h.A1h,Conv3DBackpropFilterV2:()=>h.iGz,Conv3DBackpropInputV2:()=>h.gC7,Cos:()=>h.Mn0,Cosh:()=>h.MnK,CropAndResize:()=>h.MRQ,Cumsum:()=>h.nY8,CustomCallback:()=>Fi,DataStorage:()=>h.GJx,DenseBincount:()=>h.wNW,DepthToSpace:()=>h.TMz,DepthwiseConv2dNative:()=>h.tGH,DepthwiseConv2dNativeBackpropFilter:()=>h.X$8,DepthwiseConv2dNativeBackpropInput:()=>h.nVu,Diag:()=>h.ORI,Dilation2D:()=>h.jxD,Dilation2DBackpropFilter:()=>h.pk0,Dilation2DBackpropInput:()=>h.bP9,ENV:()=>h.Kmu,EarlyStopping:()=>Rh,Einsum:()=>h.Qgm,Elu:()=>h.Pah,EluGrad:()=>h.rsH,Environment:()=>h.OH$,Equal:()=>h.BRl,Erf:()=>h._s9,Exp:()=>h.ox3,ExpandDims:()=>h.ybN,Expm1:()=>h.ybj,FFT:()=>h.rGP,Fill:()=>h.SQl,FlipLeftRight:()=>h.BxF,Floor:()=>h.ZgB,FloorDiv:()=>h.ElG,FromPixels:()=>h.awo,FusedBatchNorm:()=>h.i5R,FusedConv2D:()=>h.aAr,FusedDepthwiseConv2D:()=>h.T7M,GatherNd:()=>h.O4G,GatherV2:()=>h.mxL,GraphModel:()=>Lh.k7,Greater:()=>h.XhZ,GreaterEqual:()=>h.lLS,History:()=>Ai,IFFT:()=>h.OAQ,Identity:()=>h.lzr,Imag:()=>h.dv8,InputSpec:()=>fi,IsFinite:()=>h.gIW,IsInf:()=>h.E3$,IsNan:()=>h.iPs,KernelBackend:()=>h.uI_,LRN:()=>h.jM4,LRNGrad:()=>h.ToN,LayerVariable:()=>hi,LayersModel:()=>Oo,LeakyRelu:()=>h.X0$,Less:()=>h.mIA,LessEqual:()=>h.CwD,LinSpace:()=>h.mnI,Log:()=>h.tG8,Log1p:()=>h.Cg$,LogSoftmax:()=>h.zfU,LogicalAnd:()=>h.RUm,LogicalNot:()=>h.nZd,LogicalOr:()=>h.LXA,Max:()=>h.VAI,MaxPool:()=>h.t3d,MaxPool3D:()=>h.ySp,MaxPool3DGrad:()=>h.cHb,MaxPoolGrad:()=>h.RXX,MaxPoolWithArgmax:()=>h.TL8,Maximum:()=>h.LDN,Mean:()=>h.g5A,Min:()=>h.lNG,Minimum:()=>h.LG0,MirrorPad:()=>h.x7F,Mod:()=>h.BLA,MomentumOptimizer:()=>h.Qu_,Multinomial:()=>h.WT3,Multiply:()=>h.xu7,Neg:()=>h.l0G,NonMaxSuppressionV3:()=>h.SDM,NonMaxSuppressionV4:()=>h.Zl4,NonMaxSuppressionV5:()=>h.e0f,NotEqual:()=>h.ylV,OP_SCOPE_SUFFIX:()=>h.BTT,OneHot:()=>h.urI,OnesLike:()=>h.LWX,Optimizer:()=>h.ELo,OptimizerConstructors:()=>h.L5p,Pack:()=>h.mM$,PadV2:()=>h.ODT,Pool:()=>h.bCz,Pow:()=>h.pyJ,Prelu:()=>h.Ncv,Prod:()=>h.kdj,RMSPropOptimizer:()=>h.PS5,RNN:()=>Vl,Range:()=>h.Q6t,Rank:()=>h.rgM,Real:()=>h.LRy,RealDiv:()=>h.sDr,Reciprocal:()=>h.huO,Reduction:()=>h.iDl,Relu:()=>h.fUj,Relu6:()=>h.P_L,Reshape:()=>h.R23,ResizeBilinear:()=>h.hgw,ResizeBilinearGrad:()=>h.FCQ,ResizeNearestNeighbor:()=>h.jOE,ResizeNearestNeighborGrad:()=>h.XQy,Reverse:()=>h.D7i,RotateWithOffset:()=>h.BK4,Round:()=>h.hVg,Rsqrt:()=>h.TOR,SGDOptimizer:()=>h.SYI,ScatterNd:()=>h.pJc,Select:()=>h.l6P,Selu:()=>h.u$b,Sequential:()=>Po,Sigmoid:()=>h.vI1,Sign:()=>h.YVe,Sin:()=>h.hql,Sinh:()=>h.J3C,Slice:()=>h.JiE,Softmax:()=>h.rFG,Softplus:()=>h.Fin,SpaceToBatchND:()=>h.A8B,SparseFillEmptyRows:()=>h.C8s,SparseReshape:()=>h.BoJ,SparseSegmentMean:()=>h.L6G,SparseSegmentSum:()=>h.DvZ,SparseToDense:()=>h.jgd,SplitV:()=>h.Blb,Sqrt:()=>h.dFH,Square:()=>h.M6A,SquaredDifference:()=>h.Ddj,Step:()=>h.pnw,StridedSlice:()=>h.UcO,StringNGrams:()=>h.YAb,StringSplit:()=>h.iW0,StringToHashBucketFast:()=>h.$jE,Sub:()=>h.PbM,Sum:()=>h.WuN,SymbolicTensor:()=>mi,Tan:()=>h.oFs,Tanh:()=>h.iuW,Tensor:()=>h.qYS,TensorBuffer:()=>h.ylz,Tile:()=>h.FAs,TopK:()=>h.TBb,Transform:()=>h.dLy,Transpose:()=>h.wx0,Unique:()=>h.EwU,Unpack:()=>h.dXR,UnsortedSegmentSum:()=>h.pPe,Variable:()=>h.rTt,ZerosLike:()=>h.xJ3,_FusedMatMul:()=>h.Dr,abs:()=>h.tnl,acos:()=>h.HQu,acosh:()=>h.FqL,add:()=>h.WQq,addN:()=>h.QiD,all:()=>h.Q7R,any:()=>h.bzn,argMax:()=>h.FLi,argMin:()=>h.XRg,asin:()=>h.qRo,asinh:()=>h.yHs,atan:()=>h.rYl,atan2:()=>h.FPz,atanh:()=>h.rfv,avgPool:()=>h.$jT,avgPool3d:()=>h.sub,backend:()=>h.Hs,backend_util:()=>h.C0T,basicLSTMCell:()=>h.lZX,batchNorm:()=>h.$v7,batchNorm2d:()=>h.BFc,batchNorm3d:()=>h.kSi,batchNorm4d:()=>h.T5N,batchToSpaceND:()=>h.GTe,bincount:()=>h.HbZ,booleanMaskAsync:()=>h.ftb,broadcastArgs:()=>h.ROE,broadcastTo:()=>h.hOW,browser:()=>h.TaL,buffer:()=>h.ra8,callbacks:()=>Eh,cast:()=>h.wgE,ceil:()=>h.mkO,clipByValue:()=>h.zQh,clone:()=>h.o8B,complex:()=>h.faB,concat:()=>h.xWs,concat1d:()=>h.I1m,concat2d:()=>h.RPU,concat3d:()=>h.O5O,concat4d:()=>h.P1l,constraints:()=>s,conv1d:()=>h.kA9,conv2d:()=>h.Xtf,conv2dTranspose:()=>h.wX9,conv3d:()=>h.IPL,conv3dTranspose:()=>h.jIJ,copyRegisteredKernels:()=>h.Cfv,cos:()=>h.gnS,cosh:()=>h.yIG,cosineWindow:()=>h._jP,cumsum:()=>h.rCv,customGrad:()=>h._Xg,data:()=>u,denseBincount:()=>h.aOp,deprecationWarn:()=>h.fLc,depthToSpace:()=>h.Rj8,depthwiseConv2d:()=>h.Gl3,deregisterOp:()=>Lh.Ad,device_util:()=>h.eMq,diag:()=>h.smy,dilation2d:()=>h.X7t,disableDeprecationWarnings:()=>h.ISJ,dispose:()=>h.ASo,disposeVariables:()=>h.rm6,div:()=>h.y4m,divNoNan:()=>h.ek5,dot:()=>h.Omf,dropout:()=>h.EZY,einsum:()=>h._3C,elu:()=>h.Pqc,enableDebugMode:()=>h.gYU,enableProdMode:()=>h.SmG,enclosingPowerOfTwo:()=>h.FJY,engine:()=>h.Hi9,env:()=>h._K2,equal:()=>h.LCg,erf:()=>h.Y12,exp:()=>h.oNF,expandDims:()=>h.UG6,expm1:()=>h.IYd,eye:()=>h.y5U,fft:()=>h.hVP,fill:()=>h.GSj,findBackend:()=>h.goy,findBackendFactory:()=>h.W4C,floor:()=>h.RIf,floorDiv:()=>h.wh_,fused:()=>h.cZk,gather:()=>h.kgh,gatherND:()=>h.SY9,gather_util:()=>h.FJy,getBackend:()=>h.jz4,getGradient:()=>h.vQR,getKernel:()=>h._5H,getKernelsForBackend:()=>h.OpK,grad:()=>h.Dvk,grads:()=>h.ok9,greater:()=>h.rhj,greaterEqual:()=>h.DQN,ifft:()=>h.KGM,imag:()=>h.ngS,image:()=>h.Slp,inTopKAsync:()=>h.U4u,initializers:()=>a,input:()=>Uo,io:()=>h.io,irfft:()=>h.ggX,isFinite:()=>h.MIs,isInf:()=>h.EN4,isNaN:()=>h.yrW,keep:()=>h.aCs,kernel_impls:()=>h.kpo,layers:()=>r,leakyRelu:()=>h.H8d,less:()=>h.M7h,lessEqual:()=>h.InN,linalg:()=>h.mPL,linspace:()=>h.mT8,loadGraphModel:()=>Lh.ox,loadLayersModel:()=>Vo,localResponseNormalization:()=>h.Kgs,log:()=>h.Rm2,log1p:()=>h.Kko,logSigmoid:()=>h.nqI,logSoftmax:()=>h.HPB,logSumExp:()=>h.VZ,logicalAnd:()=>h.n76,logicalNot:()=>h.NSZ,logicalOr:()=>h.ztW,logicalXor:()=>h.rxB,losses:()=>h.YYh,matMul:()=>h.NoW,math:()=>h.DyF,max:()=>h.T9B,maxPool:()=>h.jgi,maxPool3d:()=>h.NYV,maxPoolWithArgmax:()=>h.RO,maximum:()=>h.PhQ,mean:()=>h.i2o,memory:()=>h.m1Z,meshgrid:()=>h.OYQ,metrics:()=>i,min:()=>h.jkA,minimum:()=>h.BpO,mirrorPad:()=>h.FFZ,mod:()=>h.ziu,model:()=>Wo,models:()=>o,moments:()=>h.Clk,movingAverage:()=>h.CRk,mul:()=>h.lKK,multiRNNCell:()=>h.YDF,multinomial:()=>h.OjQ,neg:()=>h.HZy,nextFrame:()=>h.dA1,norm:()=>h.xbf,notEqual:()=>h.Ec,oneHot:()=>h.Mw0,ones:()=>h.SaS,onesLike:()=>h.P61,op:()=>h.op,outerProduct:()=>h.X4o,pad:()=>h.eVF,pad1d:()=>h.BZs,pad2d:()=>h.grY,pad3d:()=>h.XHu,pad4d:()=>h.WLX,pool:()=>h.dzn,pow:()=>h.n7C,prelu:()=>h.NsG,print:()=>h.yyV,prod:()=>h._eU,profile:()=>h.MEE,rand:()=>h._9M,randomGamma:()=>h.pR9,randomNormal:()=>h.FE$,randomUniform:()=>h.YeY,range:()=>h.y17,ready:()=>h.Gc4,real:()=>h.xav,reciprocal:()=>h.VOZ,registerBackend:()=>h.gJX,registerCallbackConstructor:()=>Zo,registerGradient:()=>h.krJ,registerKernel:()=>h.tAK,registerOp:()=>Lh.Nn,regularizers:()=>l,relu:()=>h.VVh,relu6:()=>h.j__,removeBackend:()=>h.rEj,reshape:()=>h.tQQ,reverse:()=>h.BEg,reverse1d:()=>h.QD2,reverse2d:()=>h.LMr,reverse3d:()=>h.I2l,reverse4d:()=>h.JYU,rfft:()=>h.z8$,round:()=>h.LIG,rsqrt:()=>h.Z$r,scalar:()=>h.d_2,scatterND:()=>h.NFr,scatter_util:()=>h.g23,selu:()=>h.WfX,separableConv2d:()=>h.wdz,sequential:()=>Bo,serialization:()=>h.JFn,setBackend:()=>h.jh6,setPlatform:()=>h.OkC,setdiff1dAsync:()=>h.F12,sigmoid:()=>h.ry7,sign:()=>h._SZ,signal:()=>h.vPA,sin:()=>h.F8e,sinh:()=>h.L0l,slice:()=>h.dik,slice1d:()=>h.Q$M,slice2d:()=>h.zAd,slice3d:()=>h.wck,slice4d:()=>h.R0O,slice_util:()=>h.Kro,softmax:()=>h.Vs9,softplus:()=>h.lw0,spaceToBatchND:()=>h.eDJ,sparse:()=>h.lMo,sparseToDense:()=>h.Zhr,spectral:()=>h.lOn,split:()=>h.lDo,sqrt:()=>h.RZD,square:()=>h.EwI,squaredDifference:()=>h.Pbu,squeeze:()=>h.r2V,stack:()=>h.t$z,step:()=>h.PMw,stridedSlice:()=>h.Ym9,string:()=>h.YjP,sub:()=>h.jbE,sum:()=>h.czq,sumOutType:()=>h.chL,tan:()=>h.Mlm,tanh:()=>h.ymU,tensor:()=>h.OEK,tensor1d:()=>h.tGX,tensor2d:()=>h.KtR,tensor3d:()=>h.$_$,tensor4d:()=>h.g9W,tensor5d:()=>h.Lpo,tensor6d:()=>h.yxw,tensor_util:()=>h.d_S,test_util:()=>h.Obs,tidy:()=>h.DZQ,tile:()=>h.Vsq,time:()=>h.kBw,topk:()=>h.rfw,train:()=>h.BaG,transpose:()=>h.mgz,truncatedNormal:()=>h.efE,unique:()=>h.AmM,unregisterGradient:()=>h.rYx,unregisterKernel:()=>h.iPt,unsortedSegmentSum:()=>h.zAU,unstack:()=>h.K$i,upcastType:()=>h.TuY,util:()=>h.ZSL,valueAndGrad:()=>h.jYt,valueAndGrads:()=>h.muS,variable:()=>h.bvq,variableGrads:()=>h.y7e,version:()=>K$,version_converter:()=>Lh.uW,version_core:()=>h.bgA,version_layers:()=>co,where:()=>h._M9,whereAsync:()=>h.YJN,zeros:()=>h.Ul9,zerosLike:()=>h.POl});var s={};n.r(s),n.d(s,{maxNorm:()=>Ea,minMaxNorm:()=>za,nonNeg:()=>La,unitNorm:()=>Da});var a={};n.r(a),n.d(a,{constant:()=>Vr,glorotNormal:()=>jr,glorotUniform:()=>Qr,heNormal:()=>qr,heUniform:()=>Xr,identity:()=>Kr,leCunNormal:()=>Jr,leCunUniform:()=>Yr,ones:()=>Br,orthogonal:()=>ei,randomNormal:()=>Zr,randomUniform:()=>Ur,truncatedNormal:()=>Gr,varianceScaling:()=>Hr,zeros:()=>Wr});var r={};n.r(r),n.d(r,{Layer:()=>yi,RNN:()=>Vl,RNNCell:()=>Ul,activation:()=>uc,add:()=>bc,alphaDropout:()=>lh,average:()=>yc,averagePooling1d:()=>Nc,averagePooling2d:()=>Rc,averagePooling3d:()=>Lc,avgPool1d:()=>Ac,avgPool2d:()=>Ec,avgPool3d:()=>zc,avgPooling1d:()=>Fc,avgPooling2d:()=>Dc,avgPooling3d:()=>Oc,batchNormalization:()=>Ic,bidirectional:()=>eh,concatenate:()=>vc,conv1d:()=>ec,conv2d:()=>tc,conv2dTranspose:()=>nc,conv3d:()=>sc,conv3dTranspose:()=>ac,convLstm2d:()=>qc,convLstm2dCell:()=>Xc,cropping2D:()=>ic,dense:()=>cc,depthwiseConv2d:()=>lc,dot:()=>Sc,dropout:()=>hc,elu:()=>Qu,embedding:()=>xc,flatten:()=>pc,gaussianDropout:()=>oh,gaussianNoise:()=>ih,globalAveragePooling1d:()=>_c,globalAveragePooling2d:()=>Mc,globalMaxPool1d:()=>nh,globalMaxPool2d:()=>sh,globalMaxPooling1d:()=>Pc,globalMaxPooling2d:()=>Wc,gru:()=>Zc,gruCell:()=>Gc,input:()=>Uo,inputLayer:()=>Hu,layerNormalization:()=>Tc,leakyReLU:()=>qu,lstm:()=>Kc,lstmCell:()=>Hc,masking:()=>uh,maxPool1d:()=>ah,maxPool2d:()=>rh,maxPooling1d:()=>Bc,maxPooling2d:()=>Vc,maxPooling3d:()=>Uc,maximum:()=>wc,minimum:()=>kc,multiply:()=>Cc,permute:()=>gc,prelu:()=>Xu,reLU:()=>ju,repeatVector:()=>fc,reshape:()=>mc,rnn:()=>Jc,separableConv2d:()=>rc,simpleRNN:()=>Qc,simpleRNNCell:()=>jc,softmax:()=>Ju,spatialDropout1d:()=>dc,stackedRNNCells:()=>Yc,thresholdedReLU:()=>Yu,timeDistributed:()=>th,upSampling2d:()=>oc,zeroPadding2d:()=>$c});var i={};n.r(i),n.d(i,{MAPE:()=>vh,MSE:()=>Ch,binaryAccuracy:()=>ch,binaryCrossentropy:()=>hh,categoricalAccuracy:()=>ph,categoricalCrossentropy:()=>fh,cosineProximity:()=>xh,mape:()=>wh,meanAbsoluteError:()=>bh,meanAbsolutePercentageError:()=>yh,meanSquaredError:()=>kh,mse:()=>Sh,precision:()=>mh,recall:()=>gh,sparseCategoricalAccuracy:()=>dh});var o={};n.r(o),n.d(o,{modelFromJSON:()=>Mo});var l={};n.r(l),n.d(l,{l1:()=>Th,l1l2:()=>Ih,l2:()=>$h});var u={};n.r(u),n.d(u,{CSVDataset:()=>kd,Dataset:()=>cd,FileDataSource:()=>Ld,TextLineDataset:()=>md,URLDataSource:()=>zd,array:()=>dd,csv:()=>Od,func:()=>_d,generator:()=>Md,microphone:()=>Wd,version_data:()=>Bd,webcam:()=>Pd,zip:()=>pd});var c={};n.r(c),n.d(c,{mx:()=>wp,XI:()=>df,Nk:()=>pf,YG:()=>gf,hH:()=>kf.h,z3:()=>am,sG:()=>mm,uM:()=>vm,vS:()=>_m,qB:()=>Gm,GG:()=>Hm,lg:()=>Jm,rq:()=>jm,cu:()=>hg,WR:()=>lg,GE:()=>fg,px:()=>gg,jC:()=>Rg,He:()=>Lg,hE:()=>Zg,BF:()=>qf,Dk:()=>tx,cl:()=>ux,_B:()=>kx,qy:()=>Sx.q,Zy:()=>Ox,zv:()=>lp,dH:()=>Fp,HS:()=>cf.HS,yH:()=>nb,l3:()=>ab,z9:()=>ib,x6:()=>hb,eW:()=>vb,GK:()=>Cb,SP:()=>Tb,f6:()=>Nb,dl:()=>Tm,Dw:()=>Lb,xT:()=>Mb,_X:()=>_p,wz:()=>Gb});var h=n(6125),d=n(5441),p=n(9809),f=n(9258),m=n(700);const g={kernelName:d.lj,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,m.P)((0,p.w)(n,"float32"),-1))}}};var x=n(9359),b=n(6522),y=n(5702),v=n(9348),w=n(5793),k=n(7126);const C={kernelName:d.Vv,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,w.E)((0,p.w)(n,"float32")),s=(0,v.R)((0,k.j)((0,y.d)(1),t));return(0,b.H)((0,x.y)(e,s))}}}},S={kernelName:d.PH,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,v.R)((0,k.j)((0,w.E)((0,p.w)(n,"float32")),1));return(0,x.y)(e,t)}}}};var I=n(2198),T=n(2302),$=n(3791);const N={kernelName:d.OM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=I.Ky(n.shape,s.shape);return{a:()=>{let t=e;const s=I.Lx(n.shape,a);return s.length>0&&(t=(0,$.c)(t,s)),(0,T.t)(t,n.shape)},b:()=>{let t=e;const n=I.Lx(s.shape,a);return n.length>0&&(t=(0,$.c)(t,n)),(0,T.t)(t,s.shape)}}}},A={kernelName:d.Ek,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,s)=>{n[s]=()=>e.clone()}),n}};var F=n(5537);const R={kernelName:d.Jp,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,F.P)(n)}}},E={kernelName:d.p_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,F.P)(n)}}},D={kernelName:d.QK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,v.R)((0,k.j)((0,y.d)(1),(0,w.E)((0,p.w)(n,"float32")))))}}};var L=n(7523);const z={kernelName:d.ep,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,v.R)((0,L.W)((0,y.d)(1),(0,w.E)((0,p.w)(n,"float32"))));return(0,x.y)(e,t)}}}},O={kernelName:d.lx,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,I.Ky)(n.shape,s.shape);return{a:()=>{const t=(0,L.W)((0,w.E)(n),(0,w.E)(s));let r=(0,f.l)(e,(0,x.y)(s,t));const i=(0,I.Lx)(n.shape,a);return i.length>0&&(r=(0,$.c)(r,i)),(0,T.t)(r,n.shape)},b:()=>{const t=(0,L.W)((0,w.E)(n),(0,w.E)(s));let r=(0,b.H)((0,f.l)(e,(0,x.y)(n,t)));const i=(0,I.Lx)(s.shape,a);return i.length>0&&(r=(0,$.c)(r,i)),(0,T.t)(r,s.shape)}}}},_={kernelName:d.Ty,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,L.W)((0,w.E)((0,p.w)(n,"float32")),1))}}},M={kernelName:d.zP,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,k.j)((0,y.d)(1),(0,w.E)((0,p.w)(n,"float32"))))}}};var P=n(1585),W=n(8189),B=n(5119),V=n(929);const U=(0,V.op)({avgPool3dGrad_:function(e,t,n,s,a,r){const i=(0,W.YT)(e,"dy","avgPool3dGrad"),o=(0,W.YT)(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=(0,T.t)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=(0,T.t)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),B.vA(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),B.vA(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),null!=r&&B.vA(B.E6(a),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:a,dimRoundingMode:r},f=P.T2.runKernel(d.ww,h,p);return c?(0,T.t)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Z={kernelName:d.cS,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i,dimRoundingMode:o}=n;return{x:()=>U(e,s,a,r,i,o)}}},G=(0,V.op)({avgPoolGrad_:function(e,t,n,s,a){const r=(0,W.YT)(e,"dy","avgPoolGrad"),i=(0,W.YT)(t,"input","avgPoolGrad");B.vA(i.rank===r.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${r.rank})`);let o=i,l=r,u=!1;3===i.rank&&(u=!0,o=(0,T.t)(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=(0,T.t)(r,[1,r.shape[0],r.shape[1],r.shape[2]])),B.vA(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),B.vA(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);const c={dy:l,input:o},h={filterSize:n,strides:s,pad:a},p=P.T2.runKernel(d.VC,c,h);return u?(0,T.t)(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),K={kernelName:d.ho,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i}=n;return{x:()=>G(e,s,a,r,i)}}};var H=n(5703);const Q={kernelName:d.jA,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:i}=n;return r||i?!r&&i?{a:()=>(0,H.N)(e,a,!1,!1),b:()=>(0,H.N)(e,s,!0,!1)}:r&&!i?{a:()=>(0,H.N)(a,e,!1,!0),b:()=>(0,H.N)(s,e,!1,!1)}:{a:()=>(0,H.N)(a,e,!0,!0),b:()=>(0,H.N)(e,s,!0,!0)}:{a:()=>(0,H.N)(e,a,!1,!0),b:()=>(0,H.N)(s,e,!0,!1)}}};var j=n(776);const q={kernelName:d.Ik,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>(0,j.e)(e,s,a)}}},X={kernelName:d.LB,gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,i=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])i[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>(0,$.c)(e,o,!0)}}},J={kernelName:d.KX,gradFunc:e=>({x:()=>e.clone()})},Y={kernelName:d.QD,gradFunc:e=>({x:()=>(0,F.P)(e)})};var ee=n(3337),te=n(6508),ne=n(3789),se=n(2151);const ae={kernelName:d.v,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>(0,se._)((0,ne.n)((0,ee.D)(s,a),(0,te.I)(s,r)),e,(0,F.P)(e))}}},re={kernelName:d.$z,inputsToSave:["x"],gradFunc:g.gradFunc};var ie=n(6512);const oe={kernelName:d.$d,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map(e=>e.shape),{axis:a}=n,r=(0,B.Y6)(a,t[0].shape)[0],i=s.map(e=>e[r]);return(0,ie.l)(e,i,r).map(e=>()=>e)}};var le=n(5248),ue=n(252),ce=n(7195);const he={kernelName:d.p2,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:i,pad:o,dataFormat:l}=n;return B.vA(ce.Dh(r),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`),{x:()=>(0,ue.v)(s.shape,e,a,i,o,l),filter:()=>(0,le.H)(s,e,a.shape,i,o,l)}}};var de=n(8794);const pe={kernelName:d.jf,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>(0,de.X)(e,a,r,i,o,1,l),filter:()=>(0,le.H)(e,s,a.shape,r,i,o,l)}}},fe=(0,V.op)({conv3DBackpropFilter_:function(e,t,n,s,a){let r=e;4===e.rank&&(r=(0,T.t)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=(0,T.t)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),B.vA(5===r.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`),B.vA(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),B.vA(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),B.vA(r.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${n[3]}.`),B.vA(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:r,dy:i},l={strides:s,pad:a,filterShape:n};return P.T2.runKernel(d.iG,o,l)}});var me=n(1895);const ge={kernelName:d.A1,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;B.vA((0,ce.Dh)(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=t;return{x:()=>(0,me.c)(i.shape,e,o,a,r),filter:()=>fe(i,e,o.shape,a,r)}}};var xe=n(3726);const be={kernelName:d.t2,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)((0,b.H)((0,xe.F)((0,p.w)(n,"float32"))),e)}}};var ye=n(8276);const ve={kernelName:d.Mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)((0,ye.L)((0,p.w)(n,"float32")),e)}}};var we=n(1078),ke=n(6808),Ce=n(7703);const Se={kernelName:d.nY,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:i}=n;return{x:()=>{const t=(0,we.Em)([a],s.rank);let n=(0,ke.r)(e,a,r,!i);return null!=t&&(n=(0,Ce.m)(n,t)),n}}}};var Ie=n(1890),Te=n(3134);const $e={kernelName:d.tG,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:i}=n,o=null==s?[1,1]:s;B.vA(ce.Dh(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=t;return B.vA(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),B.vA(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),B.vA(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),B.vA(ce.G0(a,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`),null!=i&&B.vA(B.E6(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),{x:()=>(0,Te.l)(l.shape,e,u,a,r,o,i),filter:()=>(0,Ie.x)(l,e,u.shape,a,r,o,i)}}},Ne={kernelName:d.jx,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,r={x:s,filter:a,dy:e},i={x:s,filter:a,dy:e};return{x:()=>P.T2.runKernel(d.bP,r,n),filter:()=>P.T2.runKernel(d.pk,i,n)}}},Ae={kernelName:d.P,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>P.T2.runKernel(d.rs,s)}}};var Fe=n(8631);const Re={kernelName:d._s,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,f.l)((0,Fe.o)((0,b.H)((0,w.E)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,f.l)(e,s)}}},Ee={kernelName:d.ox,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,n)}}},De={kernelName:d.yb,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,T.t)(e,n.shape)}}},Le={kernelName:d.fQ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,Fe.o)(n))}}},ze={kernelName:d.Zg,gradFunc:e=>({x:()=>(0,F.P)(e)})},Oe={kernelName:d.El,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,I.Ky)(n.shape,s.shape);return{a:()=>{const t=(0,x.y)(e,(0,p.w)(s,"float32")),r=(0,I.Lx)(n.shape,a);return r.length>0?(0,T.t)((0,$.c)(t,r),n.shape):t},b:()=>{let t=(0,f.l)(e,(0,p.w)(n,"float32"));const r=(0,I.Lx)(s.shape,a);r.length>0&&(t=(0,T.t)((0,$.c)(t,r),s.shape));const i=(0,w.E)(s);return(0,b.H)((0,x.y)(t,(0,p.w)(i,"float32")))}}}};var _e=n(7820),Me=n(4826);const Pe={kernelName:d.i5,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,r,i,o]=t,l=null==o?(0,y.d)(1):o,u=(0,I.Lx)(r.shape,a.shape),c=[];if(1===r.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const h=(0,k.j)(a,r),d=(0,f.l)(e,l),p=(0,_e.Z)((0,L.W)(i,(0,y.d)(s))),m=(0,f.l)((0,f.l)((0,f.l)(p,p),p),(0,y.d)(-.5));return{x:()=>1===r.rank?(0,T.t)((0,f.l)((0,f.l)(e,(0,Me.V)((0,T.t)(p,[1,1,1,r.shape[0]]),c)),l),a.shape):(0,T.t)((0,f.l)((0,f.l)(e,p),l),a.shape),mean:()=>{let e=(0,f.l)((0,f.l)(p,(0,y.d)(-1)),d);return 1===r.rank&&(e=(0,$.c)(e,u)),(0,T.t)(e,r.shape)},variance:()=>{let e=(0,f.l)((0,f.l)(m,h),d);return 1===r.rank&&(e=(0,$.c)(e,u)),(0,T.t)(e,r.shape)},scale:()=>{const t=(0,f.l)(h,p);let n=(0,f.l)(e,t);return 1===r.rank&&(n=(0,$.c)(n,u)),(0,T.t)(n,r.shape)},offset:()=>{let t=e;return 1===r.rank&&(t=(0,$.c)(t,u)),(0,T.t)(t,r.shape)}}}};var We=n(7706);const Be={kernelName:d.mx,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r}=n,i=(0,B.Y6)(r,s.shape)[0];return{x:()=>{const t=s.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(r,t.length).slice(1),c=u.length,h=Ve(0,l),d=Ve(l+1,l+1+c),p=Ue([o,[n],u]),f=(0,T.t)(e,p),m=(0,T.t)(a,[n]),g=Ue([[l],h,d]),x=(0,Ce.m)(f,g);let b=(0,We.z)(x,m,s.shape[i]);const y=(0,we.gx)(g);return b=(0,Ce.m)(b,y),b},indices:()=>a}}};function Ve(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Ue(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Ze={kernelName:d.lL,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,F.P)(n),b:()=>(0,F.P)(s)}}},Ge={kernelName:d.lz,gradFunc:e=>({x:()=>(0,p.w)(e,"float32")})},Ke={kernelName:d.gI,gradFunc:e=>({x:()=>(0,F.P)(e)})},He={kernelName:d.E3,gradFunc:e=>({x:()=>(0,F.P)(e)})},Qe={kernelName:d.iP,gradFunc:e=>({x:()=>(0,F.P)(e)})};var je=n(2058);const qe={kernelName:d.X0,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,r=(0,je.r)(s,0);return{x:()=>(0,se._)(r,e,(0,f.l)(e,a))}}},Xe={kernelName:d.Cg,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,L.W)(n,1))}}},Je={kernelName:d.M3,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,p.w)(n,"float32"))}}},Ye={kernelName:d.zf,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=(0,Fe.o)(s);return(0,k.j)(e,(0,f.l)((0,$.c)(e,a,!0),t))}}}},et=(0,V.op)({localResponseNormalizationBackprop_:function(e,t,n,s=5,a=1,r=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:a,alpha:r,beta:i};return P.T2.runKernel(d.To,o,l)}}),tt={kernelName:d.jM,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:i,alpha:o,beta:l}=n;return{x:()=>et(s,a,e,r,i,o,l)}}};var nt=n(3020);function st(e,t,n,s){return t.rank<n.rank&&(t=(0,T.t)(t,we.SM(t.shape,s))),e.rank<n.rank&&(e=(0,T.t)(e,we.SM(e.shape,s))),{x:()=>(0,f.l)(e,(0,p.w)((0,nt.L)(n,t),e.dtype))}}const at={kernelName:d.VA,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],i=st(e,t[1],r,B.Y6(a,r.shape));return{x:()=>i.x()}}};var rt=n(1303);const it={kernelName:d.LD,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,f.l)(e,(0,p.w)((0,ee.D)(n,s),"float32")),b:()=>(0,f.l)(e,(0,p.w)((0,rt.M)(n,s),"float32"))}}},ot=(0,V.op)({maxPool3dGrad_:function(e,t,n,s,a,r,i){const o=(0,W.YT)(e,"dy","maxPool3dGrad"),l=(0,W.YT)(t,"input","maxPool3dGrad"),u=(0,W.YT)(n,"output","maxPool3dGrad");let c=o,h=l,p=u,f=!1;4===l.rank&&(f=!0,c=(0,T.t)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=(0,T.t)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=(0,T.t)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),B.vA(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),B.vA(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),B.vA(5===p.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`),null!=i&&B.vA(B.E6(r),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const m={dy:c,input:h,output:p},g={filterSize:s,strides:a,pad:r,dimRoundingMode:i},x=P.T2.runKernel(d.cH,m,g);return f?(0,T.t)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),lt={kernelName:d.yS,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>ot(e,s,a,r,i,o,l)}}},ut=(0,V.op)({maxPoolGrad_:function(e,t,n,s,a,r,i){const o=(0,W.YT)(e,"dy","maxPoolGrad"),l=(0,W.YT)(t,"input","maxPoolGrad"),u=(0,W.YT)(n,"output","maxPoolGrad");B.vA(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),B.vA(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),B.vA(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),null!=i&&B.vA(B.E6(r),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const c={dy:o,input:l,output:u},h={filterSize:s,strides:a,pad:r,dimRoundingMode:i};return P.T2.runKernel(d.RX,c,h)}}),ct={kernelName:d.t3,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o}=n;return{x:()=>ut(e,s,a,r,i,o)}}};var ht=n(1411);const dt={kernelName:d.g5,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,r=B.Y6(a,s.shape),i=(0,we.lb)(s.shape,r)[1],o=B.Ze(i);return{x:()=>{const t=s.shape.slice();r.forEach(e=>{t[e]=1});const n=(0,T.t)(e,t);return(0,x.y)((0,f.l)(n,(0,ht.S)(s.shape,"float32")),o)}}}},pt={kernelName:d.lN,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,i]=t,o=st(e,i,r,B.Y6(a,r.shape));return{x:()=>o.x()}}},ft={kernelName:d.LG,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>(0,f.l)(e,(0,p.w)((0,te.I)(n,s),"float32")),b:()=>(0,f.l)(e,(0,p.w)((0,je.r)(n,s),"float32"))}}};var mt=n(7986);const gt={kernelName:d.x7,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map(e=>e[0]);return{x:()=>(0,mt.d)(e,r,s.shape)}}};var xt=n(5606);const bt={kernelName:d.BL,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,I.Ky)(n.shape,s.shape);return{a:()=>{const t=(0,I.Lx)(n.shape,a);return t.length>0?(0,T.t)((0,$.c)(e,t),n.shape):e},b:()=>{const t=(0,f.l)(e,(0,b.H)((0,xt.R)((0,x.y)(n,s)))),r=(0,I.Lx)(s.shape,a);return r.length>0?(0,T.t)((0,$.c)(t,r),s.shape):t}}}},yt={kernelName:d.xu,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,I.Ky)(n.shape,s.shape);return{a:()=>{const t=(0,f.l)(e,(0,p.w)(s,"float32")),r=(0,I.Lx)(n.shape,a);return r.length>0?(0,T.t)((0,$.c)(t,r),n.shape):t},b:()=>{const t=(0,f.l)(e,(0,p.w)(n,"float32")),r=(0,I.Lx)(s.shape,a);return r.length>0?(0,T.t)((0,$.c)(t,r),s.shape):t}}}},vt={kernelName:d.l0,gradFunc:e=>({x:()=>(0,b.H)(e)})};var wt=n(2855);const kt={kernelName:d.ur,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,wt.U)(n.shape,"float32")}}},Ct={kernelName:d.LW,gradFunc:e=>({x:()=>(0,F.P)(e)})};var St=n(7261);const It={kernelName:d.mM,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return(0,St.K)(e,s).map(e=>()=>e)}},Tt={kernelName:d.OD,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map(e=>e[0]);return{x:()=>(0,mt.d)(e,r,s.shape)}}};var $t=n(4010),Nt=n(8990);const At={kernelName:d.py,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,a]=t,r=n,i=s,o=I.Ky(r.shape,i.shape);return{a:()=>{const t=(0,p.w)(i,"float32");let n=(0,f.l)(e,(0,f.l)(t,(0,Nt.n)(r,(0,k.j)(t,(0,y.d)(1)))));const s=I.Lx(r.shape,o);return s.length>0&&(n=(0,$.c)(n,s)),(0,T.t)(n,r.shape)},b:()=>{const t=(0,je.r)(r,0),n=(0,se._)(t,(0,$t.R)(r),(0,F.P)(r));let s=(0,f.l)(e,(0,f.l)(a,n));const l=I.Lx(i.shape,o);return l.length>0&&(s=(0,$.c)(s,l)),(0,T.t)(s,i.shape)}}}},Ft={kernelName:d.Nc,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,je.r)(n,0);return{x:()=>(0,se._)(a,e,(0,f.l)(e,s)),alpha:()=>{let t=(0,se._)(a,(0,F.P)(e),(0,f.l)(e,n));const r=(0,I.Lx)(s.shape,e.shape);return r.length>0&&(t=(0,$.c)(t,r)),(0,T.t)(t,s.shape)}}}},Rt={kernelName:d.sD,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=I.Ky(n.shape,s.shape);return{a:()=>{const t=(0,x.y)(e,(0,p.w)(s,"float32")),r=I.Lx(n.shape,a);return r.length>0?(0,T.t)((0,$.c)(t,r),n.shape):t},b:()=>{let t=(0,f.l)(e,(0,p.w)(n,"float32"));const r=I.Lx(s.shape,a);r.length>0&&(t=(0,T.t)((0,$.c)(t,r),s.shape));const i=(0,w.E)(s);return(0,b.H)((0,x.y)(t,(0,p.w)(i,"float32")))}}}},Et={kernelName:d.hu,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,b.H)((0,w.E)(n)))}}},Dt={kernelName:d.P_,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=(0,f.l)((0,te.I)(n,6),(0,m.P)(n));return{x:()=>(0,f.l)(e,(0,p.w)(s,"float32"))}}},Lt={kernelName:d.fU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,p.w)((0,m.P)(n),"float32"))}}},zt={kernelName:d.R2,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,T.t)(e,n.shape)}}},Ot={kernelName:d.hg,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>P.T2.runKernel(d.FC,a,n)}}},_t={kernelName:d.jO,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>P.T2.runKernel(d.XQ,a,n)}}};var Mt=n(3262);const Pt={kernelName:d.D7,gradFunc:(e,t,n)=>{const{dims:s}=n,a=(0,B.Y6)(s,e.shape);return{x:()=>(0,Mt.B)(e,a)}}},Wt={kernelName:d.hV,gradFunc:e=>({x:()=>(0,F.P)(e)})},Bt={kernelName:d.TO,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,b.H)((0,x.y)(e,(0,f.l)((0,Nt.n)(n,1.5),2)))}}};var Vt=n(9881);const Ut={kernelName:d.l6,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,p.w)((0,F.P)(n),"float32"),t:()=>(0,f.l)(e,(0,p.w)(n,e.dtype)),e:()=>(0,f.l)(e,(0,p.w)((0,Vt.N)(n),e.dtype))}}};var Zt=n(8576);const Gt={kernelName:d.u$,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,je.r)(n,(0,y.d)(0)),s=(0,y.d)(Zt.j),a=(0,y.d)(Zt.X),r=(0,f.l)(e,a),i=(0,f.l)((0,f.l)(e,s),(0,Fe.o)((0,p.w)(n,"float32")));return(0,se._)(t,r,i)}}}},Kt={kernelName:d.vI,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,f.l)(n,(0,k.j)((0,y.d)(1),n)))}}},Ht={kernelName:d.YV,gradFunc:e=>({x:()=>(0,F.P)(e)})};var Qt=n(9907);const jt={kernelName:d.hq,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)((0,Qt.g)((0,p.w)(n,"float32")),e)}}};var qt=n(7451);const Xt={kernelName:d.J3,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)((0,qt.y)((0,p.w)(n,"float32")),e)}}};var Jt=n(5661),Yt=n(4969);const en={kernelName:d.Ji,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,i=s.shape,[o,l]=(0,Yt.parseSliceParams)(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>(0,Jt.e)(e,u)}}},tn={kernelName:d.K2,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,r=(0,f.l)(e,s);return{logits:()=>(0,k.j)(r,(0,f.l)((0,$.c)(r,[a],!0),s))}}};var nn=n(8968);const sn={kernelName:d.Fi,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,nn.r)(n))}}};var an=n(9772);const rn={kernelName:d.A8,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>(0,an.G)(e,s,a)}}};var on=n(5030);const ln={kernelName:d.Bl,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>(0,on.x)(e,s)}}},un={kernelName:d.dF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,f.l)((0,v.R)((0,p.w)(n,"float32")),2))}}},cn={kernelName:d.M6,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)(e,(0,f.l)((0,p.w)(n,"float32"),2))}}},hn={kernelName:d.Dd,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=(0,y.d)(2);return{a:()=>(0,f.l)(e,(0,f.l)(a,(0,k.j)(n,s))),b:()=>(0,f.l)(e,(0,f.l)(a,(0,k.j)(s,n)))}}},dn={kernelName:d.pn,gradFunc:e=>({x:()=>(0,F.P)(e)})},pn={kernelName:d.Pb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=I.Ky(n.shape,s.shape);return{a:()=>{let t=e;const s=I.Lx(n.shape,a);return s.length>0&&(t=(0,$.c)(t,s)),(0,T.t)(t,n.shape)},b:()=>{let t=e;const n=I.Lx(s.shape,a);return n.length>0&&(t=(0,$.c)(t,n)),(0,T.t)((0,b.H)(t),s.shape)}}}},fn={kernelName:d.Wu,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:r}=n;(0,B.Y6)(r,s.shape).forEach(e=>{a[e]=1});const i=(0,T.t)(e,a),o=(0,f.l)(i,(0,ht.S)(s.shape,"float32"));return{x:()=>o}}},mn={kernelName:d.oF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,x.y)(e,(0,w.E)((0,Qt.g)(n)))}}},gn={kernelName:d.iu,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,f.l)((0,k.j)((0,y.d)(1),(0,w.E)(n)),e)}}},xn={kernelName:d.FA,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=(0,F.P)(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=(0,L.W)(t,(0,mt.d)(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=(0,L.W)(t,(0,mt.d)(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)t=(0,L.W)(t,(0,mt.d)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=(0,L.W)(t,(0,mt.d)(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},bn={kernelName:d.wx,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=we.gx(a);return{x:()=>(0,Ce.m)(e,r)}}};var yn=n(4268);const vn={kernelName:d.dX,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>(0,yn.t)(e,a)}}};var wn=n(8710),kn=n(8229),Cn=n(178);const Sn={kernelName:d.pP,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,Cn.P)(t,(0,F.P)(t)),s=(0,kn.k)(e,n);let a=(0,ee.D)(t,(0,y.d)(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=(0,wn.U)(a,e+1);a=(0,ne.n)(a,(0,ht.S)(s.shape,"bool"));const i=(0,F.P)(s);return(0,se._)(a,s,i)}(e,n)}}},In={kernelName:d.xJ,gradFunc:e=>({x:()=>(0,F.P)(e)})};var Tn=n(7074);const $n=[g,C,S,N,A,R,E,D,z,O,_,M,Z,K,Q,q,X,J,Y,ae,re,oe,pe,he,ge,be,ve,Se,$e,Ne,Rt,Ae,Re,Ee,De,Le,Oe,ze,Pe,Be,Ze,Ge,Ke,He,Qe,qe,Xe,Je,Ye,tt,at,at,it,lt,ct,dt,pt,ft,gt,bt,yt,vt,kt,Ct,It,Tt,Tt,At,Ft,Et,Dt,Lt,zt,Ot,_t,Pt,Wt,Bt,Ut,Gt,Kt,Ht,jt,Xt,en,tn,sn,rn,rn,ln,ln,un,hn,cn,dn,pn,fn,mn,gn,xn,bn,vn,Sn,In];for(const e of $n)(0,Tn.kr)(e);var Nn=n(4888),An=n(259);(0,An.tp)().prototype.abs=function(){return this.throwIfDisposed(),(0,Nn.t)(this)};var Fn=n(2804);(0,An.tp)().prototype.acos=function(){return this.throwIfDisposed(),(0,Fn.H)(this)};var Rn=n(7558);(0,An.tp)().prototype.acosh=function(){return this.throwIfDisposed(),(0,Rn.F)(this)},(0,An.tp)().prototype.add=function(e){return this.throwIfDisposed(),(0,L.W)(this,e)};var En=n(2307);(0,An.tp)().prototype.all=function(e,t){return this.throwIfDisposed(),(0,En.Q)(this,e,t)};var Dn=n(9326);(0,An.tp)().prototype.any=function(e,t){return this.throwIfDisposed(),(0,Dn.b)(this,e,t)};var Ln=n(897);(0,An.tp)().prototype.argMax=function(e){return this.throwIfDisposed(),(0,Ln.F)(this,e)};var zn=n(4339);(0,An.tp)().prototype.argMin=function(e){return this.throwIfDisposed(),(0,zn.X)(this,e)},(0,An.tp)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,B.vA)(1===this.size,()=>"The array must have only 1 element."),(0,T.t)(this,[])},(0,An.tp)().prototype.asType=function(e){return this.throwIfDisposed(),(0,p.w)(this,e)},(0,An.tp)().prototype.as1D=function(){return this.throwIfDisposed(),(0,T.t)(this,[this.size])},(0,An.tp)().prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,T.t)(this,[e,t])},(0,An.tp)().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,T.t)(this,[e,t,n])},(0,An.tp)().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),(0,T.t)(this,[e,t,n,s])},(0,An.tp)().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),(0,T.t)(this,[e,t,n,s,a])};var On=n(6841);(0,An.tp)().prototype.asin=function(){return this.throwIfDisposed(),(0,On.q)(this)};var _n=n(269);(0,An.tp)().prototype.asinh=function(){return this.throwIfDisposed(),(0,_n.y)(this)};var Mn=n(9580);(0,An.tp)().prototype.atan=function(){return this.throwIfDisposed(),(0,Mn.r)(this)};var Pn=n(1404);(0,An.tp)().prototype.atan2=function(e){return this.throwIfDisposed(),(0,Pn.F)(this,e)};var Wn=n(3774);(0,An.tp)().prototype.atanh=function(){return this.throwIfDisposed(),(0,Wn.r)(this)};var Bn=n(3909);(0,An.tp)().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),(0,Bn.$)(this,e,t,n,s)},(0,An.tp)().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,an.G)(this,e,t)};var Vn=n(9160);(0,An.tp)().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),(0,Vn.$)(this,e,t,n,s,a)};var Un=n(3567);(0,An.tp)().prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,Un.h)(this,e)},(0,An.tp)().prototype.cast=function(e){return this.throwIfDisposed(),(0,p.w)(this,e)};var Zn=n(855);(0,An.tp)().prototype.ceil=function(){return this.throwIfDisposed(),(0,Zn.m)(this)};var Gn=n(6928);(0,An.tp)().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,Gn.z)(this,e,t)},(0,An.tp)().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof An.qY&&(e=[e]),(0,on.x)([this,...e],t)};var Kn=n(3701);(0,An.tp)().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Kn.k)(this,e,t,n,s,a,r)};var Hn=n(1106);(0,An.tp)().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),(0,Hn.w)(this,e,t,n,s,a)},(0,An.tp)().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,de.X)(this,e,t,n,s,a,r)},(0,An.tp)().prototype.cos=function(){return this.throwIfDisposed(),(0,Qt.g)(this)},(0,An.tp)().prototype.cosh=function(){return this.throwIfDisposed(),(0,qt.y)(this)},(0,An.tp)().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,ke.r)(this,e,t,n)};var Qn=n(1216);(0,An.tp)().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,Qn.R)(this,e,t)};var jn=n(676);(0,An.tp)().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,jn.G)(this,e,t,n,s,a,r)};var qn=n(3002);(0,An.tp)().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),(0,qn.X)(this,e,t,n,s,a)};var Xn=n(919);(0,An.tp)().prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,Xn.e)(this,e)},(0,An.tp)().prototype.div=function(e){return this.throwIfDisposed(),(0,x.y)(this,e)};var Jn=n(9759);(0,An.tp)().prototype.dot=function(e){return this.throwIfDisposed(),(0,Jn.O)(this,e)};var Yn=n(3416);(0,An.tp)().prototype.elu=function(){return this.throwIfDisposed(),(0,Yn.P)(this)},(0,An.tp)().prototype.equal=function(e){return this.throwIfDisposed(),(0,nt.L)(this,e)};var es=n(5207);(0,An.tp)().prototype.erf=function(){return this.throwIfDisposed(),(0,es.Y)(this)},(0,An.tp)().prototype.exp=function(){return this.throwIfDisposed(),(0,Fe.o)(this)},(0,An.tp)().prototype.expandDims=function(e){return this.throwIfDisposed(),(0,wn.U)(this,e)};var ts=n(517);(0,An.tp)().prototype.expm1=function(){return this.throwIfDisposed(),(0,ts.I)(this)};var ns=n(1361);(0,An.tp)().prototype.fft=function(){return this.throwIfDisposed(),(0,ns.h)(this)},(0,An.tp)().prototype.flatten=function(){return this.throwIfDisposed(),(0,T.t)(this,[this.size])},(0,An.tp)().prototype.floor=function(){return this.throwIfDisposed(),(0,xt.R)(this)};var ss=n(8991);(0,An.tp)().prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,ss.w)(this,e)},(0,An.tp)().prototype.gather=function(e,t){return this.throwIfDisposed(),(0,kn.k)(this,e,t)},(0,An.tp)().prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,ee.D)(this,e)},(0,An.tp)().prototype.greater=function(e){return this.throwIfDisposed(),(0,je.r)(this,e)};var as=n(3108);(0,An.tp)().prototype.ifft=function(){return this.throwIfDisposed(),(0,as.K)(this)};var rs=n(2292);(0,An.tp)().prototype.irfft=function(){return this.throwIfDisposed(),(0,rs.g)(this)};var is=n(8318);(0,An.tp)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,is.M)(this)};var os=n(3454);(0,An.tp)().prototype.isInf=function(){return this.throwIfDisposed(),(0,os.E)(this)};var ls=n(6300);(0,An.tp)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,ls.y)(this)};var us=n(6919);(0,An.tp)().prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,us.H)(this,e)},(0,An.tp)().prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,te.I)(this,e)},(0,An.tp)().prototype.less=function(e){return this.throwIfDisposed(),(0,rt.M)(this,e)};var cs=n(3531);(0,An.tp)().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),(0,cs.K)(this,e,t,n,s)};var hs=n(5645);(0,An.tp)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,hs.n)(this)};var ds=n(7991);(0,An.tp)().prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,ds.H)(this,e)};var ps=n(3330);(0,An.tp)().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,ps.V)(this,e,t)},(0,An.tp)().prototype.log=function(){return this.throwIfDisposed(),(0,$t.R)(this)};var fs=n(2015);(0,An.tp)().prototype.log1p=function(){return this.throwIfDisposed(),(0,fs.K)(this)},(0,An.tp)().prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,ne.n)(this,e)},(0,An.tp)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,Vt.N)(this)};var ms=n(9879);(0,An.tp)().prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,ms.z)(this,e)};var gs=n(9925);(0,An.tp)().prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,gs.r)(this,e)},(0,An.tp)().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,H.N)(this,e,t,n)};var xs=n(6999);(0,An.tp)().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),(0,xs.j)(this,e,t,n,s)};var bs=n(1938);(0,An.tp)().prototype.max=function(e,t){return this.throwIfDisposed(),(0,bs.T)(this,e,t)},(0,An.tp)().prototype.maximum=function(e){return this.throwIfDisposed(),(0,Cn.P)(this,e)};var ys=n(2611);(0,An.tp)().prototype.mean=function(e,t){return this.throwIfDisposed(),(0,ys.i)(this,e,t)};var vs=n(7436);(0,An.tp)().prototype.min=function(e,t){return this.throwIfDisposed(),(0,vs.j)(this,e,t)};var ws=n(2644);(0,An.tp)().prototype.minimum=function(e){return this.throwIfDisposed(),(0,ws.B)(this,e)};var ks=n(6567);(0,An.tp)().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,ks.F)(this,e,t)};var Cs=n(152);(0,An.tp)().prototype.mod=function(e){return this.throwIfDisposed(),(0,Cs.z)(this,e)},(0,An.tp)().prototype.mul=function(e){return this.throwIfDisposed(),(0,f.l)(this,e)},(0,An.tp)().prototype.neg=function(){return this.throwIfDisposed(),(0,b.H)(this)};var Ss=n(2596);(0,An.tp)().prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,Ss.x)(this,e,t,n)};var Is=n(2118);(0,An.tp)().prototype.notEqual=function(e){return this.throwIfDisposed(),(0,Is.E)(this,e)};var Ts=n(1760);(0,An.tp)().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,Ts.M)(this,e,t,n)};var $s=n(9885);(0,An.tp)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,$s.P)(this)},(0,An.tp)().prototype.pad=function(e,t){return this.throwIfDisposed(),(0,Jt.e)(this,e,t)};var Ns=n(7872);(0,An.tp)().prototype.pool=function(e,t,n,s,a){return this.throwIfDisposed(),(0,Ns.d)(this,e,t,n,s,a)},(0,An.tp)().prototype.pow=function(e){return this.throwIfDisposed(),(0,Nt.n)(this,e)};var As=n(4394);(0,An.tp)().prototype.prelu=function(e){return this.throwIfDisposed(),(0,As.N)(this,e)};var Fs=n(7771);(0,An.tp)().prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Fs._)(this,e,t)};var Rs=n(9870);(0,An.tp)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Rs.V)(this)};var Es=n(112);(0,An.tp)().prototype.relu=function(){return this.throwIfDisposed(),(0,Es.V)(this)};var Ds=n(3732);(0,An.tp)().prototype.relu6=function(){return this.throwIfDisposed(),(0,Ds.j)(this)},(0,An.tp)().prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,T.t)(this,e.shape)},(0,An.tp)().prototype.reshape=function(e){return this.throwIfDisposed(),(0,T.t)(this,e)};var Ls=n(4711);(0,An.tp)().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,Ls.v)(this,e,t,n)};var zs=n(2954);(0,An.tp)().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,zs.b)(this,e,t,n)},(0,An.tp)().prototype.reverse=function(e){return this.throwIfDisposed(),(0,Mt.B)(this,e)};var Os=n(8775);(0,An.tp)().prototype.rfft=function(){return this.throwIfDisposed(),(0,Os.z)(this)};var _s=n(5912);(0,An.tp)().prototype.round=function(){return this.throwIfDisposed(),(0,_s.L)(this)},(0,An.tp)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,_e.Z)(this)};var Ms=n(6325);(0,An.tp)().prototype.selu=function(){return this.throwIfDisposed(),(0,Ms.W)(this)};var Ps=n(9986);(0,An.tp)().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),(0,Ps.w)(this,e,t,n,s,a,r)},(0,An.tp)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,nn.r)(this)};var Ws=n(1115);(0,An.tp)().prototype.sign=function(){return this.throwIfDisposed(),(0,Ws._)(this)},(0,An.tp)().prototype.sin=function(){return this.throwIfDisposed(),(0,xe.F)(this)},(0,An.tp)().prototype.sinh=function(){return this.throwIfDisposed(),(0,ye.L)(this)},(0,An.tp)().prototype.slice=function(e,t){return this.throwIfDisposed(),(0,mt.d)(this,e,t)};var Bs=n(6346);(0,An.tp)().prototype.softmax=function(e){return this.throwIfDisposed(),(0,Bs.V)(this,e)};var Vs=n(6030);(0,An.tp)().prototype.softplus=function(){return this.throwIfDisposed(),(0,Vs.l)(this)},(0,An.tp)().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,j.e)(this,e,t)},(0,An.tp)().prototype.split=function(e,t){return this.throwIfDisposed(),(0,ie.l)(this,e,t)},(0,An.tp)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,v.R)(this)},(0,An.tp)().prototype.square=function(){return this.throwIfDisposed(),(0,w.E)(this)};var Us=n(3427);(0,An.tp)().prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,Us.P)(this,e)};var Zs=n(5932);(0,An.tp)().prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Zs.r)(this,e)},(0,An.tp)().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof An.qY?[this,e]:[this,...e];return(0,yn.t)(n,t)},(0,An.tp)().prototype.step=function(e){return this.throwIfDisposed(),(0,m.P)(this,e)};var Gs=n(5894);(0,An.tp)().prototype.stridedSlice=function(e,t,n,s,a,r,i,o){return this.throwIfDisposed(),(0,Gs.Y)(this,e,t,n,s,a,r,i,o)},(0,An.tp)().prototype.sub=function(e){return this.throwIfDisposed(),(0,k.j)(this,e)},(0,An.tp)().prototype.sum=function(e,t){return this.throwIfDisposed(),(0,$.c)(this,e,t)};var Ks=n(7823);(0,An.tp)().prototype.tan=function(){return this.throwIfDisposed(),(0,Ks.M)(this)};var Hs=n(7311);(0,An.tp)().prototype.tanh=function(){return this.throwIfDisposed(),(0,Hs.y)(this)},(0,An.tp)().prototype.tile=function(e){return this.throwIfDisposed(),(0,Me.V)(this,e)},(0,An.tp)().prototype.toBool=function(){return this.throwIfDisposed(),(0,p.w)(this,"bool")},(0,An.tp)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,p.w)(this,"float32")},(0,An.tp)().prototype.toInt=function(){return this.throwIfDisposed(),(0,p.w)(this,"int32")};var Qs=n(1190);(0,An.tp)().prototype.topk=function(e,t){return this.throwIfDisposed(),(0,Qs.r)(this,e,t)},(0,An.tp)().prototype.transpose=function(e){return this.throwIfDisposed(),(0,Ce.m)(this,e)};var js=n(3937);let qs;function Xs(){return null==qs&&(qs=(0,h.Hs)().epsilon()),qs}(0,An.tp)().prototype.unique=function(e){return this.throwIfDisposed(),(0,js.A)(this,e)},(0,An.tp)().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,We.z)(this,e,t)},(0,An.tp)().prototype.unstack=function(e){return this.throwIfDisposed(),(0,St.K)(this,e)},(0,An.tp)().prototype.where=function(e,t){return this.throwIfDisposed(),(0,se._)(e,this,t)},(0,An.tp)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,F.P)(this)};class Js extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Js.prototype)}}class Ys extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ys.prototype)}}class ea extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ea.prototype)}}class ta extends Error{constructor(e){super(e),Object.setPrototypeOf(this,ta.prototype)}}class na extends Error{constructor(e){super(e),Object.setPrototypeOf(this,na.prototype)}}function sa(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function aa(e,t){if(!e)throw new na(t)}function ra(e,t){let n=0;for(const s of e)s===t&&n++;return n}function ia(e){return 1===e.length?e[0]:e}function oa(e){return Array.isArray(e)?e:[e]}function la(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function ua(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}Error;let ca={};function ha(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function da(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>da(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?da(t):e[n]=t.value)}}}function pa(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in ca)r=ca[a];else if(r=t[a],null==r)throw new ea(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new ea(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const i=r.className;let o,l;if(i in n?[o,l]=n[i]:i in ca?[o,l]=ca.className:i in t&&([o,l]=t[i]),null==o)throw new ea(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(ca))e[t]=ca[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},ca);for(const e of Object.keys(n))ca[e]=n[e];da(r.config);const s=l(o,r.config,n,a);return ca=Object.assign({},t),s}{const e=Object.assign({},ca);for(const e of Object.keys(n))ca[e]=n[e];const t=new o(r.config);return ca=Object.assign({},e),t}}}function fa(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function ma(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function ga(e){if(null==e)throw new ea(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function xa(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new ea(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function ba(e,t,n=0,s=1/0){return aa(n>=0),aa(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every(e=>typeof e===t)}function ya(e,t){Array.isArray(e)?(h.ZSL.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>ya(e,`element ${n+1} of ${t}`))):h.ZSL.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${va(e)}.`)}function va(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>va(e)).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function wa(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function ka(e,t){return(0,h.DZQ)(()=>h.RZD(h.czq(h.lKK(e,e),t,!0)))}class Ca extends h.JFn.Serializable{getConfig(){return{}}}class Sa extends Ca{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.DZQ)(()=>{const t=ka(e,this.axis),n=h.zQh(t,0,this.maxValue);return h.lKK(e,h.y4m(n,h.WQq(Xs(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Sa.className="MaxNorm",h.JFn.registerClass(Sa);class Ia extends Ca{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.DZQ)(()=>h.y4m(e,h.WQq(Xs(),ka(e,this.axis))))}getConfig(){return{axis:this.axis}}}Ia.className="UnitNorm",h.JFn.registerClass(Ia);class Ta extends Ca{apply(e){return h.VVh(e)}}Ta.className="NonNeg",h.JFn.registerClass(Ta);class $a extends Ca{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,h.DZQ)(()=>{const t=ka(e,this.axis),n=h.WQq(h.lKK(this.rate,h.zQh(t,this.minValue,this.maxValue)),h.lKK(1-this.rate,t));return h.lKK(e,h.y4m(n,h.WQq(Xs(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}$a.className="MinMaxNorm",h.JFn.registerClass($a);const Na={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Aa(e){return ha(e)}function Fa(e,t={}){return pa(e,h.JFn.SerializationMap.getMap().classNameMap,t,"constraint")}function Ra(e){return null==e?null:"string"==typeof e?Fa({className:e in Na?Na[e]:e,config:{}}):e instanceof Ca?e:Fa(e)}function Ea(e){return new Sa(e)}function Da(e){return new Ia(e)}function La(){return new Ta}function za(e){return new $a(e)}const Oa=["channelsFirst","channelsLast"],_a=["nearest","bilinear"],Ma=["valid","same","causal"],Pa=["max","avg"],Wa=["sum","mul","concat","ave"],Ba=new Map;function Va(e){xa(Oa,"DataFormat",e)}function Ua(e){xa(Ma,"PaddingMode",e)}function Za(e){xa(Pa,"PoolMode",e)}const Ga=[];function Ka(e,t){Ga.push(e);try{const e=t();return Ga.pop(),e}catch(e){throw Ga.pop(),e}}function Ha(e){if(!qa(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Ga.length?"":Ga.join("/")+"/")+e}function Qa(e){if(!qa(e))throw new Error("Not a valid tensor name: '"+e+"'");Ba.has(e)||Ba.set(e,0);const t=Ba.get(e);if(Ba.set(e,Ba.get(e)+1),t>0){const n=`${e}_${t}`;return Ba.set(n,1),n}return e}const ja=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function qa(e){return!!e.match(ja)}function Xa(e){return e===parseInt(e.toString(),10)}function Ja(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function Ya(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function er(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function tr(e,t){if(t<e)throw new ea(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function nr(e,t){return h.wgE(e,t)}function sr(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),h.tQQ(e,n)}function ar(e,t,n){return(0,h.DZQ)(()=>{switch(e.rank){case 1:return h.Q$M(e,t,n);case 2:return h.zAd(e,[t,0],[n,e.shape[1]]);case 3:return h.wck(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return h.R0O(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return h.dik(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return h.dik(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new ea(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function rr(e,t,n){return(0,h.DZQ)(()=>{switch(e.rank){case 1:return h.Q$M(e,t,n);case 2:return h.zAd(e,[0,t],[e.shape[0],n]);case 3:return h.wck(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return h.R0O(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new ea(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function ir(e,t,n,s){return(0,h.DZQ)(()=>{switch(e.rank){case 1:return h.Q$M(e,t,n);case 2:switch(s){case 1:return ar(e,t,n);case 2:return rr(e,t,n);default:throw new ea(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return ar(e,t,n);case 2:return h.wck(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return rr(e,t,n);default:throw new ea(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return ar(e,t,n);case 2:return h.R0O(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return h.R0O(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return rr(e,t,n);default:throw new ea(`The axis is not within the rank of the tensor ${s}`)}default:throw new ea(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function or(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),h.xWs(e,t)}function lr(e,t){switch(e.rank){case 1:return h.I1m([e,t]);case 2:return h.RPU([e,t],0);case 3:return h.O5O([e,t],0);case 4:return h.P1l([e,t],0);default:throw new ea(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function ur(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new ea(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return h.Vsq(e,t)}function cr(e,t=0,n=1,s,a){return h.FE$(e,t,n,s,a)}function hr(e,t,n,s){if(e.rank<2||t.rank<2)throw new ta(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new ta(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank){const a=!1,r=!1;return h.cZk.matMul({a:e,b:t,transposeA:a,transposeB:r,bias:s?fr(e.rank,s,"channelsLast"):null,activation:n})}{const a=e.shape.slice(),r=a.pop();e=h.tQQ(e,[-1,r]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=h.tQQ(h.mgz(t,c),[l,-1]);const d=[...a,...u],p=!1,f=!1;return h.tQQ(h.cZk.matMul({a:e,b:t,transposeA:p,transposeB:f,bias:s?fr(e.rank,s,"channelsLast"):null,activation:n}),d)}}function dr(e,t,n){return(0,h.DZQ)(()=>(t=Array.isArray(t)?(0,h.tGX)(t,"int32"):h.wgE(t,"int32"),h.kgh(e,t,n)))}function pr(e){return h.lKK(e,e)}function fr(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new ea(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?h.tQQ(t,[1,s[0],1,1,1]):h.tQQ(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?h.tQQ(t,[1,1,1,1,s[0]]):h.tQQ(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?h.tQQ(t,[1,s[0],1,1]):h.tQQ(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?h.tQQ(t,[1,1,1,s[0]]):h.tQQ(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?h.tQQ(t,[1,s[0],1]):h.tQQ(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?h.tQQ(t,[1,1,s[0]]):h.tQQ(t,[1].concat(s))}else if(e<3)return t;throw new ea(`Unsupported input rank by biasAdd: ${t.rank}`)}function mr(e,t,n){return(0,h.DZQ)(()=>(null==n&&(n="channelsLast"),Va(n),h.WQq(e,fr(e.rank,t,n))))}function gr(e,t,n,s){return(0,h.DZQ)(()=>h.EZY(e,t,n,s))}function xr(e,t,n=!1){return n?e():t()}const br=["fanIn","fanOut","fanAvg"],yr=["normal","uniform","truncatedNormal"];class vr extends h.JFn.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class wr extends vr{apply(e,t){return(0,h.Ul9)(e,t)}}wr.className="Zeros",h.JFn.registerClass(wr);class kr extends vr{apply(e,t){return(0,h.SaS)(e,t)}}kr.className="Ones",h.JFn.registerClass(kr);class Cr extends vr{constructor(e){if(super(),"object"!=typeof e)throw new ea(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new ea(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return(0,h.DZQ)(()=>(0,h.lKK)((0,h.d_2)(this.value),(0,h.SaS)(e,t)))}getConfig(){return{value:this.value}}}Cr.className="Constant",h.JFn.registerClass(Cr);class Sr extends vr{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return(0,h.YeY)(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Sr.className="RandomUniform",h.JFn.registerClass(Sr);class Ir extends vr{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ta(`randomNormal does not support dType ${t}.`);return cr(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ir.className="RandomNormal",h.JFn.registerClass(Ir);class Tr extends vr{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ta(`truncatedNormal does not support dType ${t}.`);return(0,h.efE)(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Tr.className="TruncatedNormal",h.JFn.registerClass(Tr);class $r extends vr{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return(0,h.DZQ)(()=>{if(2!==e.length||e[0]!==e[1])throw new ea("Identity matrix initializer can only be used for 2D square matrices.");return(0,h.lKK)(this.gain,(0,h.y5U)(e[0]))})}getConfig(){return{gain:this.gain}}}$r.className="Identity",h.JFn.registerClass($r);class Nr extends vr{constructor(e){if(super(),e.scale<0)throw new ea(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,xa(br,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){xa(yr,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Va(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Ja(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Ja(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Ja(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],a=n[1];let r=this.scale;if("fanIn"===this.mode?r/=Math.max(1,s):"fanOut"===this.mode?r/=Math.max(1,a):r/=Math.max(1,(s+a)/2),"normal"===this.distribution){const n=Math.sqrt(r);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new ta(`${this.getClassName()} does not support dType ${t}.`);return(0,h.efE)(e,0,n,t,this.seed)}{const n=Math.sqrt(3*r);return(0,h.YeY)(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Nr.className="VarianceScaling",h.JFn.registerClass(Nr);class Ar extends Nr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Ar.className="GlorotUniform",h.JFn.registerClass(Ar);class Fr extends Nr{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Fr.className="GlorotNormal",h.JFn.registerClass(Fr);class Rr extends Nr{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Rr.className="HeNormal",h.JFn.registerClass(Rr);class Er extends Nr{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Er.className="HeUniform",h.JFn.registerClass(Er);class Dr extends Nr{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Dr.className="LeCunNormal",h.JFn.registerClass(Dr);class Lr extends Nr{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nr.className}}Lr.className="LeCunNormal",h.JFn.registerClass(Lr);class zr extends vr{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new ta("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return(0,h.DZQ)(()=>{if(e.length<2)throw new ta("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=cr(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=h.mPL.gramSchmidt(t);return e[0]>e[1]&&(n=(0,h.mgz)(n)),(0,h.lKK)(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}zr.className="Orthogonal",h.JFn.registerClass(zr);const Or={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function _r(e,t={}){return pa(e,h.JFn.SerializationMap.getMap().classNameMap,t,"initializer")}function Mr(e){return ha(e)}function Pr(e){if("string"==typeof e){const t=e in Or?Or[e]:e;if("GlorotNormal"===t)return new Fr;if("GlorotUniform"===t)return new Ar;if("HeNormal"===t)return new Rr;if("HeUniform"===t)return new Er;if("LeCunNormal"===t)return new Dr;if("LeCunUniform"===t)return new Lr;{const e={};return e.className=t,e.config={},_r(e)}}return e instanceof vr?e:_r(e)}function Wr(){return new wr}function Br(){return new kr}function Vr(e){return new Cr(e)}function Ur(e){return new Sr(e)}function Zr(e){return new Ir(e)}function Gr(e){return new Tr(e)}function Kr(e){return new $r(e)}function Hr(e){return new Nr(e)}function Qr(e){return new Ar(e)}function jr(e){return new Fr(e)}function qr(e){return new Rr(e)}function Xr(e){return new Er(e)}function Jr(e){return new Dr(e)}function Yr(e){return new Lr(e)}function ei(e){return new zr(e)}let ti=0;function ni(){return ti++}const si={};function ai(e=""){return e in si||(si[e]=0),si[e]+=1,e+si[e].toString()}function ri(e){return Array.isArray(e)&&Array.isArray(e[0])}function ii(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function oi(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new ea(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function li(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new ea(`Expected exactly 1 Shape; got ${e.length}`)}return e}function ui(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce((e,t)=>e*t);return t}const ci="Variable";class hi{constructor(e,t="float32",n=ci,s=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=ni(),n=null==n?ci:n,this.originalName=Ha(n),this.name=Qa(this.originalName),this.trainable_=s,this.constraint=a,this.val=h.bvq(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function di(e){return e.map(e=>e.read())}function pi(e){e.forEach(e=>{e[0].write(e[1])})}class fi{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class mi{constructor(e,t,n,s,a,r,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=i,this.id=ni(),null!=r&&(this.originalName=Ha(r),this.name=Qa(this.originalName)),this.rank=t.length}}let gi=0;class xi{constructor(e,t){this.callArgs=t,this.id=gi++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let bi=0;class yi extends h.JFn.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=bi++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=la(e)+"_"+ai(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Ys(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new ea(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return ia(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return ia(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Js(`Layer ${this.name} is not connected, no input to return.`);return ia(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Js(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return ia(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=oa(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=oa(this.inputSpec);if(e.length!==t.length)throw new ea(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],a=t[n];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new ea(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new ea(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new ea(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new ea(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const e=s.shape;for(const t in a.axes){const s=Number(t),r=a.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=r&&-1===[r,null].indexOf(i))throw new ea(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],r=s.shape[e];if(null!=t&&null!=r&&t!==r)throw new ea(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=oa(e);let s=!0;for(const e of n)if(!(e instanceof mi)){s=!1;break}let a=!0;for(const e of n)if(e instanceof mi){a=!1;break}if(s===a)throw new ea("Arguments to apply() must be all SymbolicTensors or all Tensors");return Ka(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of oa(e))t.push(n.shape);this.build(ia(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);const a=oa(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=ia(r),null!=this.activityRegularizer)throw new ta("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=oa(e);const t=[];for(const n of e)t.push(n.shape);return ia(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new mi(r,n,this,oa(e),t,this.name,s)):new mi(r,s,this,oa(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new ta("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Js(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Js(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Ys(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ui(this.weights)}build(e){this.built=!0}getWeights(e=!1){return di(e?this.trainableWeights:this.weights)}setWeights(e){(0,h.DZQ)(()=>{const t=this.weights;if(t.length!==e.length)throw new ea(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=di(t);for(let a=0;a<s.length;++a){const r=s[a],i=t[a],o=e[a];if(!h.ZSL.arraysEqual(r.shape,o.shape))throw new ea(`Layer weight shape ${r.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}pi(n)})}addWeight(e,t,n,s,a,r,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new ea(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():Pr("zeros"));const l=s.apply(t,n),u=new hi(l,n,e,r,i);return l.dispose(),null!=a&&this.addLoss(()=>a.apply(u.read())),null==r&&(r=!0),r?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=oa(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,n,s,a,r,i=null){const o=oa(e);t=oa(t),n=oa(n),s=oa(s),a=ii(a),r=ii(r);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new xi({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0===--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function vi(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=vi(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class wi extends yi{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:ai("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new ea("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new ea("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new ea("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new mi(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new xi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new ea(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ki(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new ea("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new wi({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function Ci(e){if(null==e)return;const t=[],n=[],s=[];for(const a in e){const r=e[a];if("number"!=typeof r){const e=r;t.push(e.data()),n.push(a),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];(0,h.ASo)(s)}}function Si(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Ii;wi.className="InputLayer",h.JFn.registerClass(wi),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Ii||(Ii={}));class Ti{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class $i{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Ni extends Ti{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=(0,h.DZQ)(()=>(0,h.WQq)(this.totals[e],(0,h.lKK)(s,n)));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:(0,h.DZQ)(()=>{const n=(0,h.lKK)((0,h.y4m)(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),(0,h.aCs)(t[e])}))}}class Ai extends Ti{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const i=a[r];e.push(i.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Fi extends Ti{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||h.dA1,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");h.ZSL.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,a=null!=n?n():h.ZSL.now();return(...r)=>{const i=null!=n?n():h.ZSL.now();return i-a<t||(a=i,s=e(...r)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Ci(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Ci(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Ci(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Ci(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Ci(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):h.ZSL.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Ci(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Ci(e),await this.trainEnd(e))}}function Ri(e,t){return null==e&&(e={}),e instanceof Ti?[e]:Array.isArray(e)&&e[0]instanceof Ti?e:oa(e).map(e=>new Fi(e,t))}class Ei{constructor(){}static registerCallbackConstructor(e,t){h.ZSL.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Ei.checkForDuplicate(t),null==Ei.constructors[e]&&(Ei.constructors[e]=[]),Ei.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Ei.constructors)Ei.constructors[+t].forEach(t=>{if(t===e)throw new ea("Duplicate callback constructor.")})}static clear(){Ei.constructors={}}static createCallbacks(e){const t=[];for(const n in Ei.constructors){const s=+n;e>=s&&t.push(...Ei.constructors[s])}return t.map(e=>new e)}}function Di(e,t,n,s,a,r,i,o,l){const u=new Ai,c=[new Ni,...Ei.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new $i(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Li(e,t={},n=!1){return pa(e,h.JFn.SerializationMap.getMap().classNameMap,t,"layer",n)}function zi(e,t){return(0,h.DZQ)(()=>{"float32"!==e.dtype&&(e=h.wgE(e,"float32"));const n=h.czq(pr(e),t,!0),s=h.GSj(n.shape,Xs()),a=h.RZD(h.PhQ(n,s));return h.y4m(e,a)})}function Oi(e,t){return(0,h.DZQ)(()=>h.i2o(pr(h.jbE(t,e)),-1))}function _i(e,t){return(0,h.DZQ)(()=>h.i2o(h.tnl(h.jbE(t,e)),-1))}function Mi(e,t){return(0,h.DZQ)(()=>{const n=h.jbE(e,t),s=h.zQh(h.tnl(e),Xs(),Number.MAX_VALUE),a=h.tnl(h.y4m(n,s));return h.lKK(100,h.i2o(a,-1))})}function Pi(e,t,n=!1){return(0,h.DZQ)(()=>{if(n)t=h.Vs9(t);else{const e=h.czq(t,t.shape.length-1,!0);t=h.y4m(t,e)}return t=h.zQh(t,Xs(),1-Xs()),h.HZy(h.czq(h.lKK(h.wgE(e,"float32"),h.Rm2(t)),t.shape.length-1))})}function Wi(e,t,n=!1){return(0,h.DZQ)(()=>{const s=h.wgE(h.RIf(function(e){const t=[Ja(e.shape)];return h.tQQ(e,t)}(e)),"int32"),a=(t=h.zQh(t,Xs(),1-Xs())).shape;return Pi(h.tQQ(h.Mw0(s,a[a.length-1]),a),t,n)})}function Bi(e,t){return(0,h.DZQ)(()=>{let n;return n=h.zQh(t,Xs(),1-Xs()),n=h.Rm2(h.y4m(n,h.jbE(1,n))),h.i2o(function(e,t){if(!h.ZSL.arraysEqual(e.shape,t.shape))throw new ea(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return(0,h.DZQ)(()=>{const n=h.VVh(t),s=h.HZy(h.tnl(t));return h.WQq(h.jbE(n,h.lKK(t,e)),h.Kko(h.oNF(s)))})}(e,n),-1)})}function Vi(e,t){return(0,h.DZQ)(()=>{const n=zi(e,-1),s=zi(t,-1),a=h.lKK(n,s);return h.HZy(h.czq(a,-1))})}Ei.constructors={};const Ui={meanSquaredError:Oi,meanAbsoluteError:_i,meanAbsolutePercentageError:Mi,meanSquaredLogarithmicError:function(e,t){return(0,h.DZQ)(()=>{const n=h.zQh(t,Xs(),Number.MAX_VALUE),s=h.Rm2(h.WQq(1,n)),a=h.zQh(e,Xs(),Number.MAX_VALUE),r=h.Rm2(h.WQq(1,a));return h.i2o(pr(h.jbE(s,r)),-1)})},squaredHinge:function(e,t){return(0,h.DZQ)(()=>{const n=h.PhQ(0,h.jbE(1,h.lKK(e,t)));return h.i2o(pr(n),-1)})},hinge:function(e,t){return(0,h.DZQ)(()=>{const n=h.PhQ(0,h.jbE(1,h.lKK(e,t)));return h.i2o(n,-1)})},categoricalHinge:function(e,t){return(0,h.DZQ)(()=>{const n=h.czq(h.lKK(e,t),-1),s=h.T9B(h.lKK(h.jbE(1,e),t),-1);return h.PhQ(0,h.WQq(1,h.jbE(s,n)))})},logcosh:function(e,t){return(0,h.DZQ)(()=>{const n=Math.log(2),s=h.jbE(t,e),a=h.jbE(h.WQq(s,h.lw0(h.lKK(-2,s))),n);return h.i2o(a,-1)})},categoricalCrossentropy:Pi,sparseCategoricalCrossentropy:Wi,binaryCrossentropy:Bi,kullbackLeiblerDivergence:function(e,t){return(0,h.DZQ)(()=>{const n=h.zQh(e,Xs(),1),s=h.zQh(t,Xs(),1);return h.czq(h.lKK(e,h.Rm2(h.y4m(n,s))),-1)})},poisson:function(e,t){return(0,h.DZQ)(()=>{const n=h.Rm2(h.WQq(Xs(),t));return h.i2o(h.jbE(t,h.lKK(e,n)),-1)})},cosineProximity:Vi};function Zi(e){if("string"==typeof e){if(e in Ui)return Ui[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new ea(t)}return e}function Gi(e,t){return(0,h.DZQ)(()=>{const n=h.lKK(.5,h.P61(t)),s=nr(h.rhj(t,n),e.dtype);return h.i2o(h.LCg(e,s),-1)})}function Ki(e,t){return(0,h.DZQ)(()=>nr(h.LCg(h.FLi(e,-1),h.FLi(t,-1)),"float32"))}function Hi(e,t){return(0,h.DZQ)(()=>h.wgE(h.czq(h.n76(h.LCg(e,1),h.LCg(t,1))),"float32"))}function Qi(e,t){return(0,h.DZQ)(()=>{const n=Hi(e,t),s=function(e,t){return(0,h.DZQ)(()=>h.wgE(h.czq(h.n76(h.LCg(e,0),h.LCg(t,1))),"float32"))}(e,t),a=h.WQq(n,s);return h.wgE(h._M9(h.rhj(a,0),h.y4m(n,a),0),"float32")})}function ji(e,t){return Bi(e,t)}function qi(e,t){return e.rank===t.rank&&(e=h.r2V(e,[e.rank-1])),(t=h.FLi(t,-1)).dtype!==e.dtype&&(t=h.wgE(t,e.dtype)),h.wgE(h.LCg(e,t),"float32")}const Xi=Pi,Ji=Wi,Yi={binaryAccuracy:Gi,categoricalAccuracy:Ki,precision:Qi,categoricalCrossentropy:Xi,sparseCategoricalCrossentropy:Ji,mse:Oi,MSE:Oi,mae:_i,MAE:_i,mape:Mi,MAPE:Mi,cosine:Vi};function eo(e){if("string"==typeof e&&e in Yi)return Yi[e];if("string"!=typeof e&&null!=e)return e;throw new ea(`Unknown metric ${e}`)}function to(e){if(aa(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Ui))if(Ui[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Yi))if(Yi[n]===e){t=n;break}return void 0!==t?t:e.name}}function no(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!so(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function so(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!so(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!so(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function ao(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function ro(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}ao([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function io(e,t,n,s){let a;try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const r=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];r.push(`${n}[${s}][${a}]`)}const i=e.name,o=e.getClassName(),l=0===r.length?"":r[0];ao([`${i} (${o})`,a,e.countParams().toString(),l],t,s);for(let e=1;e<r.length;++e)ao(["","","",r[e]],t,s)}function oo(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function lo(e,t){if(null===e)return null;if("string"==typeof e)return ua(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];oo(t,a,s)?n.push(s):n.push(lo(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=ua(n);t[e]=lo(s,e)}}return t}}function uo(e,t){if(null==e)return null;if("string"==typeof e)return la(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];oo(t,a,s)?n.push(s):n.push(uo(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[la(n)]="name"!==n&&"className"!==n||"string"!=typeof s?uo(s,n):s}return t}}const co="3.11.0";class ho{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof ho)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new ea(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return(0,h.wgE)(t,e.dtype)}catch(n){throw new ea(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof mi){if(null==this.id2Value[e.id])throw new ea(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new ea(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof mi){if(null==this.id2Value[e.id])throw new ea(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new ea(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&(0,h.ASo)(this.id2Mask)}}const po={},fo={};function mo(e,t,n,s){const a=null!=n&&n.training,r=Array.isArray(e),i=r?e:[e],o=i.map(e=>e.name),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let d,p;if(null==po[c]){const e=function(e,t){h.ZSL.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const a=xo(e[0],t);n=a.sorted,s=a.recipientMap}else{const a=new Set;for(const r of e){const{sorted:e,recipientMap:i}=xo(r,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach(t=>s[e].add(t))}}return{sorted:n,recipientCounts:go(s)}}(i,t);d=e.sorted,p=e.recipientCounts,po[c]=d,fo[c]=p}d=po[c],p={},a||Object.assign(p,fo[c]);const f=new ho(t);for(let e=0;e<d.length;++e){if(null!=s){const e=(0,h.m1Z)().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const r=d[e],i=r.sourceLayer;if(i instanceof wi)continue;const u=[],c=[],m=[];let g=!1;for(const e of r.inputs){const n=f.getValue(e),s=f.getMask(e);u.push(n),c.push(s),null!=s&&(g=!0),a||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||m.push(n))}g&&((n=n||{}).mask=c[0]);const x=oa(i.apply(u,n));let b=null;i.supportsMasking&&(b=i.computeMask(u,c));const y=bo(r),v=Array.isArray(y)?y:[y];for(let e=0;e<v.length;++e){f.hasKey(v[e])||f.add(v[e],x[e],Array.isArray(b)?b[0]:b);const t=o.indexOf(v[e].name);-1!==t&&(l[t]=x[e])}a||(0,h.ASo)(m)}return f.disposeMasks(),r?l:l[0]}function go(e){const t={};for(const n in e)t[n]=e[n].size;return t}function xo(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],i=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=i[i.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function bo(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class yo extends yi{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=ai(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],ma(this.inputs).length!==this.inputs.length)throw new ea(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);ma(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;aa(0===n,"input layer has >1 nodes"),aa(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof wi))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},s={},a={},r={},i=[],o=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new Ys(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(yo.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,a,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,i),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],i=e.nodeIndices[s],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(r+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const d={};for(const e in s){const t=s[e];t in d||(d[t]=[]),d[t].push(a[e])}let p=Object.keys(d).map(e=>parseInt(e,10)).sort(fa);this.layers=[];for(const e of p){const t=d[e];t.sort((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0});for(const e of t)e instanceof yo&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map(e=>parseInt(e,10)).sort(fa);const f=this.inputs.slice(),m=[];for(const e of p)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Ys(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map(e=>e.name);for(const e of g){const t=g.filter(t=>t===e).length;if(1!==t)throw new Ys(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new xi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new ea("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new ea(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new ea(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new ea(`${e.length} of ${s} weights are not set: ${e}`)}pi(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${co}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=uo(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return(0,h.DZQ)(()=>{e=oa(e);const n=new ho;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return mo(this.outputs,n,t)})}computeMask(e,t){return(0,h.DZQ)(()=>{let n;return e=oa(e),n=null==t?sa(null,e.length):oa(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=ii(e);if(t.length!==this.inputLayers.length)throw new ea(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(fa);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${a.name}_${r}_${i}`];s.push(o)}const a=ii(t.computeOutputShape(ia(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++)n[`${t.name}_${r}_${e}`]=a[e]}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];aa(t in n),a.push(n[t])}return ia(a)}runInternalGraph(e,t){null==t&&(t=sa(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],i=t[s];n[a.id]=[r,i]}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(fa);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),o=oa(t.call(e,u)),l=oa(t.computeMask(e,n)),s=[e],i=[n]}else s=r.map(e=>e[0]),i=r.map(e=>e[1]),null==u.mask&&(u.mask=i),o=oa(t.call(s,u)),l=oa(t.computeMask(s,i));if(t.activityRegularizer)throw new ta("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=o[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],i=[];for(const e of this.outputs){aa(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),a.push(t),r.push(s)}return[a,r,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof yo?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=yo.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new ea(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new ea("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new ea(`No such layer: ${e}`)}calculateLosses(){return(0,h.DZQ)(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=yo.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=yo.nodeKey(e,n);let i={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[yo.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,o,i])}r.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=a,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=yo.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=yo.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function i(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function o(e,t){const n=[];let s;for(const r of t){const o=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(o in a))return void i(e,t);const c=a[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(ia(n),s)}function l(e){const n=e.name,r=Li(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new ea(`Corrupted configuration, expected array for nodeData: ${e}`);i(r,e)})}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!ga(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)o(t,n)}}const h=[],d=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],s=e[2];aa(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];aa(t in a);const r=a[t].inboundNodes[n].outputTensors;d.push(r[s])}return new e({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new ea("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){(0,h.DZQ)(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function vo(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{t in e?n.push(e[t]):n.push(null)}),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function wo(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=(0,h.DZQ)(()=>{if(1===e.shape.length)return(0,h.o8B)(e);if(2===e.shape.length){if(e.shape[1]>1){const t=1;return(0,h.FLi)(e,t)}if(1===e.shape[1])return(0,h.tQQ)(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());(0,h.ASo)(t);const a=[];return s.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])}),(0,h.tGX)(a,"float32")}return null}function ko(e,t){return(0,h.lKK)(e,t)}function Co(e,t){let n,s;const a=t;n=a.xs,s=a.ys,h.ZSL.assert(null!=n&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const r=So("input",e.inputNames,n),i=So("output",e.outputNames,s),o=r[0].shape[0];h.ZSL.assert(r.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),h.ZSL.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<r.length;t++)h.ZSL.assert(r[t].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${r[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let t=0;t<i.length;t++)h.ZSL.assert(i[t].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:r,ys:i}}function So(e,t,n){if(n instanceof h.qYS)return[n];if(Array.isArray(n))return h.ZSL.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const s=[];for(const a of t){if(null==n[a])throw new ea(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);s.push(n[a])}return s}}function Io(e){return"function"==typeof e.iterator}function To(e){h.ZSL.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function $o(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>ar(e,t,n-t)):ar(e,t,n-t)}function No(e,t){return h.DZQ(()=>null==e?null:Array.isArray(e)?e.map(e=>No(e,t)):dr(e,"int32"===t.dtype?t:h.wgE(t,"int32")))}function Ao(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}function Fo(e){const t=[];e instanceof h.qYS&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(sr(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Ro(e,t){if(null==e)return;const n=[];if(t instanceof h.qYS)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof h.qYS)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&s.push(e)});else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&s.push(a)}s.forEach(e=>{e.isDisposed||e.dispose()})}function Eo(e){return Array.isArray(e)}function Do(e){return!function(e){return e instanceof h.qYS}(e)&&!Eo(e)}function Lo(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Eo(e)&&e.length>0)t=!0;else if(Do(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new ea(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);let r;if(Do(e)){r=[];for(const n of t){if(null==e[n])throw new ea(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(Eo(e)){if(e.length!==t.length)throw new ea(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(t.length>1)throw new ea(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=Fo(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new ea(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const r=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&r!==o)throw new ea(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return r}function zo(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new ea(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new ea(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new ea(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l!==o)throw new ea(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Oo extends yo{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new ea("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Output shape","Param #"];let i;if(a?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!a){r.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),ao(r,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)a?ro(o[e],n,s):io(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?ui(e.collectedTrainableWeights):ui(e.trainableWeights),t}(e),u=ui(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>h.BaG.adagrad(.01),Adadelta:()=>h.BaG.adadelta(1,.95,Xs()),Adam:()=>h.BaG.adam(.001,.9,.999,Xs()),Adamax:()=>h.BaG.adamax(.002,.9,.999,Xs(),0),RMSProp:()=>h.BaG.rmsprop(.001,.9,0,Xs()),SGD:()=>h.BaG.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new ea(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof h.ELo))throw new ea("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new ea(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map(e=>Zi(e))}else{const n=Zi(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new ea(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Zi(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Ka("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Ka("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,r;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===Bi?-1!==["accuracy","acc"].indexOf(i)?s=Gi:-1!==["crossentropy","ce"].indexOf(i)&&(s=ji):this.lossFunctions[e]===Wi?-1!==["accuracy","acc"].indexOf(i)?s=qi:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ji):-1!==["accuracy","acc"].indexOf(i)?s=Ki:-1!==["crossentropy","ce"].indexOf(i)&&(s=Xi),-1!==["accuracy","acc"].indexOf(i)?a="acc":-1!==["crossentropy","ce"].indexOf(i)&&(a="ce"),r=s,n=""+a}else{const e=eo(i);r=e,n=""+to(i)}let t;Ka(n,()=>{t=r}),a(e,n,t)}})(s[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;To(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const e=a[0].concat(a[1]);this.makeTestFunction();const t=this.testFunction;return ia(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Ro(a[0],e),Ro(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let r=[];if(n.verbose>0)throw new ta("Verbose mode is not implemented yet.");h.ZSL.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(r=h.DZQ(()=>{if(t.value){const{xs:n,ys:s}=Co(e,t.value),i=n.concat(s),u=h.DZQ(()=>a(i));if(h.ASo(i),0===l)for(let e=0;e<u.length;++e)r.push((0,h.d_2)(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=r[e];r[e]=h.DZQ(()=>h.WQq(r[e],h.lKK(c,t))),l>0&&h.ASo(n)}h.ASo(u),o+=c,++l}return r}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<r.length;++e){const t=r[e];r[e]=h.y4m(r[e],o),h.ASo(t)}return ia(r)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new ea(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new ea(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new ea("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],a=this.retrieveSymbolicTensors(s),r=new ho;if(e instanceof h.qYS&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new ea(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new ea(`No value is provided for the model's input ${t.name}`);r.add(t,n)}const i=mo(a,r);return n?i:i[0]}retrieveSymbolicTensors(e){const t=sa(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map(e=>e.name);for(let s=0;s<e.length;++s){const i=r.indexOf(e[s]);if(-1!==i&&(t[s]=a[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,s)=>{null==t&&n.push(e[s])}),new ea(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return h.DZQ(()=>{const s=this.checkNumSamples(e);if(n)throw new ta("Verbose predictLoop() is not implemented yet.");const a=Ao(s,t),r=this.outputs.map(e=>[]);for(let t=0;t<a.length;++t)h.DZQ(()=>{const n=a[t][0],s=a[t][1],r=$o(e,n,s),i=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)i.push({key:this.inputs[e],value:r[e]});else i.push({key:this.inputs[0],value:r});const o=new ho(i);return mo(this.outputs,o)}).forEach((e,t)=>r[t].push(e));return ia(r.map(e=>h.xWs(e,0)))})}predict(e,t={}){const n=Fo(e);zo(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return To(e),this.predictLoop(n,e)}finally{Ro(n,e)}}predictOnBatch(e){zo(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Ys("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Wi?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t){const n=ma(e.map(e=>e.shape[0]));n.sort();const s=ma(t.map(e=>e.shape[0]));if(s.sort(),n.length>1)throw new ea(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(s.length>1)throw new ea(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(n.length>0&&s.length>0&&!h.ZSL.arraysEqual(n,s))throw new ea(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=Lo(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Lo(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[Oi,Bi,Pi];for(let a=0;a<e.length;++a){const r=e[a],i=t[a],o=n[a];if(null!=i){if(i===Pi&&1===r.shape[r.shape.length-1])throw new ea(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=r.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new ea(`A target Tensor with shape ${r.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!==0)throw new ea(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,a=!0,r){const[i,o]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=vo(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await wo(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,a){return h.DZQ(()=>{const r=this.checkNumSamples(t,n,a,"steps"),i=[];if(s>0)throw new ta("Verbose mode is not implemented yet.");if(null!=a)throw new ta("steps mode in testLoop() is not implemented yet");{const s=Ao(r,n),a=(0,h.tGX)(tr(0,r));for(let n=0;n<s.length;++n){const r=s[n][0],o=s[n][1],l=ar(a,r,o-r),u=No(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push((0,h.d_2)(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=h.WQq(i[e],h.lKK(o-r,t))}}for(let e=0;e<i.length;++e)i[e]=h.y4m(i[e],r)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;ra(e,s)>1&&(a+=`_${ra(e.slice(0,n),s)}`),t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),r=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new ho(e),o=mo(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=a[e]&&(n=ko(n,a[e]));const r=h.i2o(n);t.push(r),l=0===e?n:h.WQq(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=h.i2o(t(s[a],o[a]))}h.aCs(n),r.push(n)}return l=h.i2o(l),this.calculateLosses().forEach(e=>{l=h.WQq(l,e)}),l},!0,i)].concat(r)}}makeTestFunction(){this.testFunction=e=>h.DZQ(()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=[];for(let e=0;e<this.inputs.length;++e)r.push({key:this.inputs[e],value:s[e]});const i=new ho(r),o=mo(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],r=h.i2o(s(a[e],o[e]));n=0===e?r:h.WQq(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],r=h.i2o(n(a[s],o[s]));t.push(r)}return t})}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,r,i,o,l,u,c;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;To(d);const p=!1,f=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,d);a=f[0],r=f[1],c=f[2];let m,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new ta("validationData including sample weights is not supported yet."):new ea(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);i=s.validationData[0],o=s.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,d);l=n[0],u=n[1],m=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];l=$o(a,e,t),a=$o(a,0,e),u=$o(r,e,t),r=$o(r,0,e),m=l.concat(u)}else null!=s.validationSteps&&(g=!0);const x=a.concat(r).concat(c);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),y=e.getDedupedMetricsNames();let v,w;g?(e.makeTestFunction(),v=e.testFunction,w=y.slice().concat(y.map(e=>"val_"+e))):(v=null,m=[],w=y.slice());const k=Ri(s.callbacks,s.yieldEvery),C=await async function(e,t,n,s,a,r,i,o,l,u,c,d,p,f){null==a&&(a=32),null==r&&(r=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,a,f,"steps_per_epoch");let x;null!=g&&(x=tr(0,g)),null==i&&(i=1);const{callbackList:b,history:y}=Di(o,i,r,p,g,f,a,m,d);b.setModel(e),e.history=y,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<r;++i){await b.onEpochBegin(i);const r={};{if("batch"===c)throw new ta("batch shuffling is not implemneted yet");c&&h.ZSL.shuffle(x);const i=(0,h.tGX)(x),o=Ao(g,a);for(let c=0;c<o.length;++c){const d={};if(await b.onBatchBegin(c,d),h.DZQ(()=>{const p=o[c][0],f=o[c][1],g=ar(i,p,f-p);d.batch=c,d.size=f-p;const x=No(n,g),b=t(x);for(let e=0;e<s.length;++e){const t=s[e],n=b[e];d[t]=n,h.aCs(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,a);for(let e=0;e<s.length;++e){const n=s[e],a=t[e];h.aCs(a),r["val_"+n]=a}}}),await b.onBatchEnd(c,d),Si(d),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,r),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,b,x,y,d,s.epochs,s.verbose,k,v,m,s.shuffle,w,s.initialEpoch,null);return C}finally{e.isTraining=!1,Ro(a,t),Ro(r,n),Ro(l,i),Ro(u,o),null!=c&&h.ASo(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(h.ZSL.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),h.ZSL.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),h.ZSL.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),h.ZSL.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),h.ZSL.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let r,i;if(a)if(Io(n.validationData))h.ZSL.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{const e=function(e){if(3===e.length)throw new ta("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);r=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=a?l.slice().concat(l.map(e=>"val_"+e)):l.slice();const c=Ri(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Di(c,d,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,u);p.setModel(e),e.history=f,await p.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const u={};await p.onEpochBegin(m);let c=0,d=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:a}=Co(e,t.value),r={};r.batch=d,r.size=s[0].shape[0],await p.onBatchBegin(d,r);const i=[];if(null!=n.classWeight){const t=vo(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await wo(a[e],null,t[e]))}const u=s.concat(a).concat(i),f=o(u);h.ASo(u);for(let e=0;e<l.length;++e){const t=l[e],n=f[e];r[t]=n,h.aCs(n)}await p.onBatchEnd(d,r),Si(r),d++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=Io(n.validationData)?oa(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):oa(e.evaluate(r,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(m,u),m++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],a=n[1],r=this.makeTrainFunction()(s.concat(a)),i=[];for(const e of r){const t=await e.data();i.push(t[0])}return h.ASo(r),ia(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=h.m1Z().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-h.m1Z().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=la(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>la(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=la(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[la(to(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>la(to(e)));{const e={};for(const t in this.metrics)e[t]=la(to(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Li(lo(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=ua(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>ua(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=ua(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map(e=>ua(e));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=ua(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=h.io.getSaveHandlers(e);if(0===t.length)throw new ea(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new ea(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new ea("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await h.io.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${co}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await h.io.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=h.io.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;no(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){no(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Oo.className="Model",h.JFn.registerClass(Oo);class _o extends Oo{}async function Mo(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const s=Li(lo(n),t);if(null!=e.weightsManifest){const t=await h.io.loadWeights(e.weightsManifest,e.pathPrefix,s.weights.map(e=>e.originalName)),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),(0,h.ASo)(t)}return s}_o.className="Functional",h.JFn.registerClass(_o);class Po extends Oo{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:ai("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new ea(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Po||e instanceof Oo;let n;if(t){if(n=e,1!==n.outputs.length)throw new ea("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new ea("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new ea("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=ki({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new ea(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new ea("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=vi(this.outputs[0])}this.inboundNodes=[],new xi({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:sa(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(li(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Oo({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Ys("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Ys("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Ys("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Ys("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,r={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new ea("Legacy serialization format not supported yet.");a=t}else h.ZSL.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,r=t;const i=new e(r);if(!(i instanceof Po))throw new ta(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of a){const t=Li(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new ea("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new ea("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function Wo(e){return new Oo(e)}function Bo(e){return new Po(e)}function Vo(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=h.io.getLoadHandlers(e,t);if(0===n.length)n.push(h.io.browserHTTPRequest(e,t));else if(n.length>1)throw new ea(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new ea("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let a=s.modelTopology;null!=a.model_config&&(a=a.model_config);const r=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&r,o=Li(lo(a),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new ea("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=h.io.decodeWeights(e,t),s={},a=[];return t.forEach(e=>{"optimizer"===e.group?a.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]}),{modelWeights:s,optimizerWeights:a}}(s.weightData,s.weightSpecs);o.loadWeights(e,r),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),(0,h.ASo)(e),(0,h.ASo)(t.map(e=>e.tensor))}return o}(e,0,t)}(e,t)}function Uo(e){return ki(e)}function Zo(e,t){Ei.registerCallbackConstructor(e,t)}Po.className="Sequential",h.JFn.registerClass(Po);class Go extends h.JFn.Serializable{getConfig(){return{}}}class Ko extends Go{apply(e,t=1){return function(e,t=1){if(1!==t)throw new ta(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return h.Pqc(e)}(e,t)}}Ko.className="elu",h.JFn.registerClass(Ko);class Ho extends Go{apply(e){return h.WfX(e)}}Ho.className="selu",h.JFn.registerClass(Ho);class Qo extends Go{apply(e){return h.VVh(e)}}Qo.className="relu",h.JFn.registerClass(Qo);class jo extends Go{apply(e){return(0,h.DZQ)(()=>h.BpO(6,h.VVh(e)))}}jo.className="relu6",h.JFn.registerClass(jo);class qo extends Go{apply(e){return e}}qo.className="linear",h.JFn.registerClass(qo);class Xo extends Go{apply(e){return h.ry7(e)}}Xo.className="sigmoid",h.JFn.registerClass(Xo);class Jo extends Go{apply(e){return function(e){return(0,h.DZQ)(()=>{const t=h.WQq(.5,h.lKK(.2,e));return h.zQh(t,0,1)})}(e)}}Jo.className="hardSigmoid",h.JFn.registerClass(Jo);class Yo extends Go{apply(e){return h.lw0(e)}}Yo.className="softplus",h.JFn.registerClass(Yo);class el extends Go{apply(e){return function(e){return(0,h.DZQ)(()=>h.y4m(e,h.WQq(h.tnl(e),1)))}(e)}}el.className="softsign",h.JFn.registerClass(el);class tl extends Go{apply(e){return h.ymU(e)}}tl.className="tanh",h.JFn.registerClass(tl);class nl extends Go{apply(e,t=-1){return h.Vs9(e,t)}}nl.className="softmax",h.JFn.registerClass(nl);class sl extends Go{apply(e,t=-1){return h.HPB(e,t)}}sl.className="logSoftmax",h.JFn.registerClass(sl);class al extends Go{apply(e,t=1){return(0,h.DZQ)(()=>h.lKK(h.ry7(h.lKK(e,t)),e))}}al.className="swish",h.JFn.registerClass(al);class rl extends Go{apply(e){return(0,h.DZQ)(()=>h.lKK(e,h.ymU(h.lw0(e))))}}function il(e){return e.getClassName()}function ol(e,t={}){return pa(e,h.JFn.SerializationMap.getMap().classNameMap,t,"activation")}function ll(e){if(null==e){return ol({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},ol(t)}return e instanceof Go?e:ol(e)}function ul(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}rl.className="mish",h.JFn.registerClass(rl);class cl extends h.JFn.Serializable{}class hl extends cl{constructor(e){super(),ul(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,h.DZQ)(()=>{let t=(0,h.Ul9)([1]);return this.hasL1&&(t=(0,h.WQq)(t,(0,h.czq)(h.lKK(this.l1,(0,h.tnl)(e))))),this.hasL2&&(t=(0,h.WQq)(t,(0,h.czq)(h.lKK(this.l2,pr(e))))),h.tQQ(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}hl.className="L1L2",h.JFn.registerClass(hl);const dl={l1l2:"L1L2"};function pl(e){return ha(e)}function fl(e,t={}){return pa(e,h.JFn.SerializationMap.getMap().classNameMap,t,"regularizer")}function ml(e){return null==e?null:"string"==typeof e?fl({className:e in dl?dl[e]:e,config:{}}):e instanceof cl?e:fl(e)}class gl extends yi{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=oi(e);let n=(0,h.VVh)(e);return null!=this.maxValue&&(n=(0,h.zQh)(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}gl.className="ReLU",h.JFn.registerClass(gl);class xl extends yi{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=oi(e);return(0,h.H8d)(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}xl.className="LeakyReLU",h.JFn.registerClass(xl);class bl extends yi{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Pr(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=ml(e.alphaRegularizer),this.alphaConstraint=Ra(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new ea(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=li(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new fi({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=oi(e),(0,h.NsG)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Mr(this.alphaInitializer),alphaRegularizer:pl(this.alphaRegularizer),alphaConstraint:Aa(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}bl.className="PReLU",h.JFn.registerClass(bl);class yl extends yi{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new ta(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=oi(e);return(0,h.Pqc)(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}yl.className="ELU",h.JFn.registerClass(yl);class vl extends yi{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=oi(e);return(0,h.lKK)(n,(0,h.wgE)((0,h.rhj)(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}vl.className="ThresholdedReLU",h.JFn.registerClass(vl);class wl extends yi{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new nl).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=oi(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function kl(e,t,n){if("number"==typeof e)return sa(e,t);if(e.length!==t)throw new ea(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if(!Xa(a))throw new ea(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e}function Cl(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function Sl(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+er([n-t,0]);else{if("same"!==s)throw new ea(`Unsupport padding mode: ${s}.`);e*=t}return e}function Il(e,t){return(0,h.DZQ)(()=>(Va(t),"channelsFirst"===t?h.mgz(e,[0,2,3,1]):e))}function Tl(e,t){return(0,h.DZQ)(()=>(Va(t),"channelsFirst"===t?h.mgz(e,[0,2,3,4,1]):e))}function $l(e,t,n,s=[1,1],a="valid",r,i,o=null){return(0,h.DZQ)(()=>{if(null==r&&(r="channelsLast"),Va(r),3!==e.rank&&4!==e.rank)throw new ea(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new ea(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Il(e,r);if("causal"===a)throw new ta("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=h.cZk.conv2d({x:l,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===r&&(l=h.mgz(l,[0,3,1,2])),l})}wl.className="Softmax",h.JFn.registerClass(wl);class Nl extends yi{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Nl.verifyArgs(t),this.rank=e,ya(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new ta(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=kl(t.kernelSize,e,"kernelSize"),this.strides=kl(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Ua(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Va(this.dataFormat),this.activation=ll(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Pr(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ra(t.biasConstraint),this.biasRegularizer=ml(t.biasRegularizer),this.activityRegularizer=ml(t.activityRegularizer),this.dilationRate=kl(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new ea(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new ea(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new ea(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(aa("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!ba(e.kernelSize,"number",1,3))throw new ea(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:il(this.activation),useBias:this.useBias,biasInitializer:Mr(this.biasInitializer),biasRegularizer:pl(this.biasRegularizer),activityRegularizer:pl(this.activityRegularizer),biasConstraint:Aa(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Al extends Nl{constructor(e,t){super(e,t),this.kernel=null,Al.verifyArgs(t),this.filters=t.filters,ya(this.filters,"filters"),this.kernelInitializer=Pr(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ra(t.kernelConstraint),this.kernelRegularizer=ml(t.kernelRegularizer)}build(e){e=li(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ea(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return(0,h.DZQ)(()=>{let t;e=oi(e);const n=null==this.bias?null:this.bias.read(),s=wa(this.activation.getClassName());if(null!=s&&2===this.rank)t=$l(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,a="valid",r,i=1){return(0,h.DZQ)(()=>{if(null==r&&(r="channelsLast"),Va(r),3!==e.shape.length)throw new ea(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new ea(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new ea(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===r&&(e=h.mgz(e,[0,2,1])),"causal"===a)throw new ta("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=h.kA9(e,t,s,"same"===a?"same":"valid","NWC",i);return null!=n&&(o=mr(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=$l(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new ta("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],a="valid",r,i){return(0,h.DZQ)(()=>{if(null==r&&(r="channelsLast"),Va(r),4!==e.rank&&5!==e.rank)throw new ea(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new ea(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Tl(e,r);if("causal"===a)throw new ta("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=h.IPL(o,t,s,"same"===a?"same":"valid","NDHWC",i),null!=n&&(o=mr(o,n)),"channelsFirst"===r&&(o=h.mgz(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=li(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Cl(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Mr(this.kernelInitializer),kernelRegularizer:pl(this.kernelRegularizer),kernelConstraint:Aa(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new ea(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Fl extends Al{constructor(e){super(2,e),Fl.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ba(e.kernelSize,"number",1,2))throw new ea(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Fl.className="Conv2D",h.JFn.registerClass(Fl);class Rl extends Al{constructor(e){super(3,e),Rl.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new ea(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Rl.className="Conv3D",h.JFn.registerClass(Rl);class El extends Fl{constructor(e){if(super(e),this.inputSpec=[new fi({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new ea(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=li(e)).length)throw new ea("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ea("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new fi({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return h.DZQ(()=>{let t=oi(e);if(4!==t.shape.length)throw new ea(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r;"channelsFirst"===this.dataFormat?(a=2,r=3):(a=1,r=2);const i=n[a],o=n[r],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],d=this.strides[1],p=[s,Sl(i,c,l,this.padding),Sl(o,d,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=h.mgz(t,[0,2,3,1]));let f=h.wX9(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(f=h.mgz(f,[0,3,1,2])),null!=this.bias&&(f=mr(f,this.bias.read(),this.dataFormat)),null!=this.activation&&(f=this.activation.apply(f)),f})}computeOutputShape(e){const t=(e=li(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Sl(t[s],o,r,this.padding),t[a]=Sl(t[a],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}El.className="Conv2DTranspose",h.JFn.registerClass(El);class Dl extends Rl{constructor(e){if(super(e),this.inputSpec=[new fi({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new ea(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=li(e)).length)throw new ea("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new ea("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new fi({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return h.DZQ(()=>{let t=oi(e);if(5!==t.shape.length)throw new ea(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r,i;"channelsFirst"===this.dataFormat?(i=2,a=3,r=4):(i=1,a=2,r=3);const o=n[i],l=n[a],u=n[r],c=this.kernelSize[0],d=this.kernelSize[1],p=this.kernelSize[2],f=this.strides[0],m=this.strides[1],g=this.strides[2],x=[s,Sl(o,f,c,this.padding),Sl(l,m,d,this.padding),Sl(u,g,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=h.mgz(t,[0,2,3,4,1]));let b=h.jIJ(t,this.kernel.read(),x,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=h.mgz(b,[0,4,1,2,3])),null!==this.bias&&(b=mr(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){const t=(e=li(e)).slice();let n,s,a,r;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3,r=4):(n=4,s=1,a=2,r=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Sl(t[s],u,i,this.padding),t[a]=Sl(t[a],c,o,this.padding),t[r]=Sl(t[r],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Dl.className="Conv3DTranspose",h.JFn.registerClass(Dl);class Ll extends Al{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new ea("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new ea("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new ea(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Pr(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=ml(t.depthwiseRegularizer),this.depthwiseConstraint=Ra(t.depthwiseConstraint),this.pointwiseInitializer=Pr(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=ml(t.pointwiseRegularizer),this.pointwiseConstraint=Ra(t.pointwiseConstraint)}build(e){if((e=li(e)).length<this.rank+2)throw new ea(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new ea(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new fi({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return(0,h.DZQ)(()=>{let t;if(e=oi(e),1===this.rank)throw new ta("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=h.mgz(e,[0,2,3,1])),t=h.wdz(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=mr(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=h.mgz(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Mr(this.depthwiseInitializer),e.pointwiseInitializer=Mr(this.pointwiseInitializer),e.depthwiseRegularizer=pl(this.depthwiseRegularizer),e.pointwiseRegularizer=pl(this.pointwiseRegularizer),e.depthwiseConstraint=Aa(this.depthwiseConstraint),e.pointwiseConstraint=Aa(this.pointwiseConstraint),e}}Ll.className="SeparableConv";class zl extends Ll{constructor(e){super(2,e)}}zl.className="SeparableConv2D",h.JFn.registerClass(zl);class Ol extends Al{constructor(e){super(1,e),Ol.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!ba(e.kernelSize,"number",1,1))throw new ea(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Ol.className="Conv1D",h.JFn.registerClass(Ol);class _l extends yi{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return(0,h.DZQ)(()=>{if(e=oi(e),"channelsLast"===this.dataFormat){const t=ir(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return ir(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=ir(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return ir(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}_l.className="Cropping2D",h.JFn.registerClass(_l);class Ml extends yi{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Va(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,xa(_a,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return h.DZQ(()=>{let t=oi(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=h.mgz(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],a="nearest"===this.interpolation?h.Slp.resizeNearestNeighbor(t,[e,s]):h.Slp.resizeBilinear(t,[e,s]);return h.mgz(a,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?h.Slp.resizeNearestNeighbor(t,[e,s]):h.Slp.resizeBilinear(t,[e,s])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ml.className="UpSampling2D",h.JFn.registerClass(Ml);class Pl extends Nl{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Pr(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ra(e.depthwiseConstraint),this.depthwiseRegularizer=ml(e.depthwiseRegularizer)}build(e){if((e=li(e)).length<4)throw new ea(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new ea(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.DZQ)(()=>{let t=function(e,t,n=[1,1],s="valid",a,r){return(0,h.DZQ)(()=>{null==a&&(a="channelsLast"),Va(a);let i=Il(e,a);if(4!==e.rank)throw new ea(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new ea(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=h.Gl3(i,t,n,"same"===s?"same":"valid","NHWC",r),"channelsFirst"===a&&(i=h.mgz(i,[0,3,1,2])),i})}(e=oi(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=mr(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=li(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Cl(t,this.kernelSize[0],this.padding,this.strides[0]),r=Cl(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Mr(this.depthwiseInitializer),e.depthwiseRegularizer=pl(this.depthwiseRegularizer),e.depthwiseConstraint=Aa(this.depthwiseRegularizer),e}}function Wl(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new ea("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function Bl(e,t,n,s=!1,a,r,i=!1,o=!1){return h.DZQ(()=>{const l=t.shape.length;if(l<3)throw new ea(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(tr(2,l));if(t=h.mgz(t,u),null!=r)throw new ta("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=h.wgE(h.wgE(a,"bool"),"float32")).rank===l-1&&(a=h.UG6(a,-1)),a=h.mgz(a,u)),s&&(t=h.BEg(t,0),null!=a&&(a=h.BEg(a,0)));const c=[];let d,p=n;const f=t.shape[0],m=h.K$i(t);let g,x;null!=a&&(g=h.K$i(a));for(let t=0;t<f;++t){const n=m[t],s=h.DZQ(()=>e(n,p));if(null==a)d=s[0],p=s[1];else{const e=h.DZQ(()=>{const e=g[t],n=h.jbE(h.P61(e),e);return{output:h.WQq(h.lKK(s[0],e),h.lKK(p[0],n)),newStates:p.map((t,a)=>h.WQq(h.lKK(s[1][a],e),h.lKK(t,n)))}});d=e.output,p=e.newStates}o&&c.push(d)}if(o){const e=1;x=h.t$z(c,e)}return[d,x,p]})}Pl.className="DepthwiseConv2D",h.JFn.registerClass(Pl);class Vl extends yi{constructor(e){let t;if(super(e),null==e.cell)throw new ea("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new ql({cells:e.cell}):e.cell,null==t.stateSize)throw new ea("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new fi({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?tr(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){ri(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return h.DZQ(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new ta("Constants support is not implemented in RNN yet.");ri(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new fi({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!h.ZSL.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),a))throw new ea(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map(e=>new fi({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){(0,h.DZQ)(()=>{if(!this.stateful)throw new Js("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new ea("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>h.Ul9([n,e])):this.states_=[h.Ul9([n,this.cell.stateSize])];else if(null==e)h.ASo(this.states_),null!=this.keptStates&&(h.ASo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>h.Ul9([n,e])):this.states_[0]=h.Ul9([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ea(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):h.ASo(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,r=[n,a];if(!h.ZSL.arraysEqual(s.shape,r))throw new ea(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>h.aCs(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Wl(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],i=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new fi({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length),r[0]instanceof mi){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return(0,h.DZQ)(()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let a=null==t?null:t.initialState;e=oi(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new ea(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Bl((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(e){return(0,h.DZQ)(()=>{let t=h.Ul9(e.shape);return t=h.czq(t,[1,2]),t=sr(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?ur(t,[1,e]):t):this.cell.stateSize>1?[ur(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Vl.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Li(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Vl.className="RNN",h.JFn.registerClass(Vl);class Ul extends yi{}class Zl extends Ul{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ya(this.units,"units"),this.activation=ll(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Pr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Pr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Pr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ml(e.kernelRegularizer),this.recurrentRegularizer=ml(e.recurrentRegularizer),this.biasRegularizer=ml(e.biasRegularizer),this.kernelConstraint=Ra(e.kernelConstraint),this.recurrentConstraint=Ra(e.recurrentConstraint),this.biasConstraint=Ra(e.biasConstraint),this.dropout=Ya([1,er([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ya([1,er([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=li(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.DZQ)(()=>{if(2!==e.length)throw new ea(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xl({ones:()=>h.P61(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xl({ones:()=>h.P61(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,i=this.recurrentDropoutMask;a=hr(null!=r?h.lKK(e,r):e,this.kernel.read()),null!=this.bias&&(a=mr(a,this.bias.read())),null!=i&&(n=h.lKK(n,i));let o=h.WQq(a,hr(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:il(this.activation),useBias:this.useBias,kernelInitializer:Mr(this.kernelInitializer),recurrentInitializer:Mr(this.recurrentInitializer),biasInitializer:Mr(this.biasInitializer),kernelRegularizer:pl(this.kernelRegularizer),recurrentRegularizer:pl(this.recurrentRegularizer),biasRegularizer:pl(this.biasRegularizer),activityRegularizer:pl(this.activityRegularizer),kernelConstraint:Aa(this.kernelConstraint),recurrentConstraint:Aa(this.recurrentConstraint),biasConstraint:Aa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Zl.className="SimpleRNNCell",h.JFn.registerClass(Zl);class Gl extends Vl{constructor(e){e.cell=new Zl(e),super(e)}call(e,t){return(0,h.DZQ)(()=>{null!=this.cell.dropoutMask&&(h.ASo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.ASo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})})}static fromConfig(e,t){return new e(t)}}Gl.className="SimpleRNN",h.JFn.registerClass(Gl);class Kl extends Ul{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new ea("GRUCell does not support reset_after parameter set to true.");this.units=e.units,ya(this.units,"units"),this.activation=ll(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ll(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Pr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Pr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Pr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ml(e.kernelRegularizer),this.recurrentRegularizer=ml(e.recurrentRegularizer),this.biasRegularizer=ml(e.biasRegularizer),this.kernelConstraint=Ra(e.kernelConstraint),this.recurrentConstraint=Ra(e.recurrentConstraint),this.biasConstraint=Ra(e.biasConstraint),this.dropout=Ya([1,er([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ya([1,er([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=li(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return(0,h.DZQ)(()=>{if(2!==e.length)throw new ea(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xl({ones:()=>h.P61(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xl({ones:()=>h.P61(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,r=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=h.lKK(e,a[0]));let u=hr(e,this.kernel.read());this.useBias&&(u=mr(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=h.lKK(s,r[0]));const c=this.recurrentKernel.read(),[d,p]=h.lDo(c,[2*this.units,this.units],c.rank-1),f=hr(s,d),[m,g,x]=h.lDo(u,3,u.rank-1),[b,y]=h.lDo(f,2,f.rank-1);i=this.recurrentActivation.apply(h.WQq(m,b)),o=this.recurrentActivation.apply(h.WQq(g,y));const v=hr(h.lKK(o,s),p);l=this.activation.apply(h.WQq(x,v));const w=h.WQq(h.lKK(i,s),h.lKK(h.WQq(1,h.HZy(i)),l));return[w,w]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:il(this.activation),recurrentActivation:il(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Mr(this.kernelInitializer),recurrentInitializer:Mr(this.recurrentInitializer),biasInitializer:Mr(this.biasInitializer),kernelRegularizer:pl(this.kernelRegularizer),recurrentRegularizer:pl(this.recurrentRegularizer),biasRegularizer:pl(this.biasRegularizer),activityRegularizer:pl(this.activityRegularizer),kernelConstraint:Aa(this.kernelConstraint),recurrentConstraint:Aa(this.recurrentConstraint),biasConstraint:Aa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Kl.className="GRUCell",h.JFn.registerClass(Kl);class Hl extends Vl{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Kl(e),super(e)}call(e,t){return(0,h.DZQ)(()=>{null!=this.cell.dropoutMask&&(h.ASo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.ASo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Hl.className="GRU",h.JFn.registerClass(Hl);class Ql extends Ul{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ya(this.units,"units"),this.activation=ll(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ll(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Pr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Pr(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Pr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=ml(e.kernelRegularizer),this.recurrentRegularizer=ml(e.recurrentRegularizer),this.biasRegularizer=ml(e.biasRegularizer),this.kernelConstraint=Ra(e.kernelConstraint),this.recurrentConstraint=Ra(e.recurrentConstraint),this.biasConstraint=Ra(e.biasConstraint),this.dropout=Ya([1,er([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ya([1,er([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=li(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends vr{apply(t,s){const a=e.apply([n]),r=(new kr).apply([n]),i=e.apply([2*n]);return lr(lr(a,r),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return(0,h.DZQ)(()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new ea(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xl({ones:()=>h.P61(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xl({ones:()=>h.P61(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=h.lKK(e,r[0]));let d=hr(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=h.lKK(s,i[0])),d=h.WQq(d,hr(s,this.recurrentKernel.read())),this.useBias&&(d=mr(d,this.bias.read()));const[p,f,m,g]=h.lDo(d,4,d.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(f),u=h.WQq(h.lKK(l,a),h.lKK(o,this.activation.apply(m))),c=this.recurrentActivation.apply(g);const x=h.lKK(c,this.activation.apply(u));return[x,x,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:il(this.activation),recurrentActivation:il(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Mr(this.kernelInitializer),recurrentInitializer:Mr(this.recurrentInitializer),biasInitializer:Mr(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:pl(this.kernelRegularizer),recurrentRegularizer:pl(this.recurrentRegularizer),biasRegularizer:pl(this.biasRegularizer),activityRegularizer:pl(this.activityRegularizer),kernelConstraint:Aa(this.kernelConstraint),recurrentConstraint:Aa(this.recurrentConstraint),biasConstraint:Aa(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Ql.className="LSTMCell",h.JFn.registerClass(Ql);class jl extends Vl{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Ql(e),super(e)}call(e,t){return(0,h.DZQ)(()=>{null!=this.cell.dropoutMask&&(h.ASo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.ASo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}jl.className="LSTM",h.JFn.registerClass(jl);class ql extends Ul{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return(0,h.DZQ)(()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const a=[];let r;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],r=0===i?[e[0]].concat(n):[r[0]].concat(n),r=o.call(r,t),a.push(r.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[r[0]].concat(n)})}build(e){let t;ri(e)&&(e=e[0]),this.cells.forEach((n,s)=>{Ka(`RNNCell_${s}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Li(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return di(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}pi(t)}}function Xl(e){const{ones:t,rate:n,training:s=!1,count:a=1,dropoutFunc:r}=e,i=()=>null!=r?r(t(),n):gr(t(),n),o=()=>xr(i,t,s);return!a||a<=1?h.aCs(o().clone()):Array(a).fill(void 0).map(o).map(e=>h.aCs(e.clone()))}ql.className="StackedRNNCells",h.JFn.registerClass(ql);class Jl extends Vl{constructor(e){if(e.unroll)throw new ta("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new ta("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new fi({ndim:5})]}call(e,t){return h.DZQ(()=>{if(null!=this.cell.dropoutMask&&(h.ASo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(h.ASo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new ea("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return h.DZQ(()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)],r=h.Ul9(a);return Array.isArray(t)?Array(t.length).fill(r):[r]})}resetStates(e,t=!1){h.DZQ(()=>{if(!this.stateful)throw new Js("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new ea("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>h.Ul9(a)):this.states_=[h.Ul9(a)];else if(null==e)h.ASo(this.states_),null!=this.keptStates&&(h.ASo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>h.Ul9(a)):this.states_[0]=h.Ul9(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new ea(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):h.ASo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!h.ZSL.arraysEqual(n.shape,s))throw new ea(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>h.aCs(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Cl(l,s[0],a,r[0],i[0]),h=Cl(u,s[1],a,r[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Jl.className="ConvRNN2D";class Yl extends Ql{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,ya(this.filters,"filters"),this.kernelSize=kl(n,2,"kernelSize"),this.kernelSize.forEach(e=>ya(e,"kernelSize")),this.strides=kl(s||1,2,"strides"),this.strides.forEach(e=>ya(e,"strides")),this.padding=a||"valid",Ua(this.padding),this.dataFormat=r||"channelsLast",Va(this.dataFormat),this.dilationRate=kl(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>ya(e,"dilationRate"))}build(e){var t;e=li(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new ea(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],a=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends vr{apply(e,t){return or([n.apply([s]),h.SaS([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return h.DZQ(()=>{if(3!==e.length)throw new ea(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],r=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xl({ones:()=>h.P61(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?h.lKK(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),d=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xl({ones:()=>h.P61(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let f=o(a,p,0),m=o(a,p,1),g=o(a,p,2),x=o(a,p,3);const[b,y,v,w]=h.lDo(this.kernel.read(),4,3),[k,C,S,I]=this.useBias?h.lDo(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,b,k,this.padding),u=this.inputConv(u,y,C,this.padding),c=this.inputConv(c,v,S,this.padding),d=this.inputConv(d,w,I,this.padding);const[T,$,N,A]=h.lDo(this.recurrentKernel.read(),4,3);f=this.recurrentConv(f,T),m=this.recurrentConv(m,$),g=this.recurrentConv(g,N),x=this.recurrentConv(x,A);const F=this.recurrentActivation.apply(h.WQq(l,f)),R=this.recurrentActivation.apply(h.WQq(u,m)),E=h.WQq(h.lKK(R,r),h.lKK(F,this.activation.apply(h.WQq(c,g)))),D=h.lKK(this.recurrentActivation.apply(h.WQq(d,x)),this.activation.apply(E));return[D,D,E]})}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const a=h.Xtf(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?mr(a,n,this.dataFormat):a}recurrentConv(e,t){return h.Xtf(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Yl.className="ConvLSTM2DCell",h.JFn.registerClass(Yl);class eu extends Jl{constructor(e){const t=new Yl(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}eu.className="ConvLSTM2D",h.JFn.registerClass(eu);class tu extends yi{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return xr(()=>gr(n,this.rate,s,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}tu.className="Dropout",h.JFn.registerClass(tu);class nu extends tu{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}nu.className="SpatialDropout1D",h.JFn.registerClass(nu);class su extends yi{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,ya(this.units,"units"),this.activation=ll(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Pr(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Pr(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ra(e.kernelConstraint),this.biasConstraint=Ra(e.biasConstraint),this.kernelRegularizer=ml(e.kernelRegularizer),this.biasRegularizer=ml(e.biasRegularizer),this.activityRegularizer=ml(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=li(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=li(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e),s=wa(this.activation.getClassName());let a;return null!=s?a=hr(n,this.kernel.read(),s,this.bias?this.bias.read():null):(a=hr(n,this.kernel.read()),null!=this.bias&&(a=mr(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:il(this.activation),useBias:this.useBias,kernelInitializer:Mr(this.kernelInitializer),biasInitializer:Mr(this.biasInitializer),kernelRegularizer:pl(this.kernelRegularizer),biasRegularizer:pl(this.biasRegularizer),activityRegularizer:pl(this.activityRegularizer),kernelConstraint:Aa(this.kernelConstraint),biasConstraint:Aa(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}su.className="Dense",h.JFn.registerClass(su);class au extends yi{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=li(e);for(const t of e.slice(1))if(null==t)throw new ea(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Ja(e,1)]}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);let n=oi(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=(0,h.mgz)(n,e)}return function(e){if(e.rank<=1)throw new ea(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Ja(e.shape,1)];return h.tQQ(e,t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}au.className="Flatten",h.JFn.registerClass(au);class ru extends yi{constructor(e){super(e),this.supportsMasking=!0,this.activation=ll(e.activation)}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e);return this.activation.apply(n)})}getConfig(){const e={activation:il(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}ru.className="Activation",h.JFn.registerClass(ru);class iu extends yi{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return(0,h.DZQ)(()=>{return e=oi(e),t=e,n=this.n,(0,h.DZQ)(()=>{if(2!==t.shape.length)throw new ea(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return ur(sr(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}iu.className="RepeatVector",h.JFn.registerClass(iu);class ou extends yi{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new ea("Can only specifiy one unknown dimension.");r=e}else a*=t}const i=Ja(e);if(null!==r){if(0===a||i%a!==0)throw new ea(n);s[r]=i/a}else if(i!==a)throw new ea(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return(0,h.tQQ)(n,a)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}ou.className="Reshape",h.JFn.registerClass(ou);class lu extends yi{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=tr(1,e.dims.length+1);if(!h.ZSL.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new fi({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=li(e)).slice();return this.dims.forEach((n,s)=>{t[s+1]=e[n]}),t}call(e,t){return(0,h.mgz)(oi(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}lu.className="Permute",h.JFn.registerClass(lu);class uu extends yi{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=oi(e);return(0,h.bzn)((0,h.Ec)(n,this.maskValue),-1)}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e),s=(0,h.bzn)((0,h.Ec)(n,this.maskValue),-1,!0);return(0,h.lKK)(n,(0,h.wgE)(s,n.dtype))})}}uu.className="Masking",h.JFn.registerClass(uu);class cu extends yi{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(oa(e.inputLength))}this.inputDim=e.inputDim,ya(this.inputDim,"inputDim"),this.outputDim=e.outputDim,ya(this.outputDim,"outputDim"),this.embeddingsInitializer=Pr(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=ml(e.embeddingsRegularizer),this.activityRegularizer=ml(e.activityRegularizer),this.embeddingsConstraint=Ra(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return(0,h.DZQ)(()=>this.maskZero?(e=oi(e),(0,h.Ec)(e,(0,h.POl)(e))):null)}computeOutputShape(e){if(e=li(e),null==this.inputLength)return[...e,this.outputDim];const t=oa(this.inputLength);if(t.length!==e.length-1)throw new ea(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new ea(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);let n=oi(e);"int32"!==n.dtype&&(n=nr(n,"int32"));const s=dr(this.embeddings.read(),(0,h.tQQ)(n,[n.size]));return(0,h.tQQ)(s,li(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Mr(this.embeddingsInitializer),embeddingsRegularizer:pl(this.embeddingsRegularizer),activityRegularizer:pl(this.activityRegularizer),embeddingsConstraint:Aa(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}cu.className="Embedding",h.JFn.registerClass(cu);class hu extends yi{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new ta}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new ea("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[li(e)]),e.length<2)throw new ea(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=ma(t),t.length>1)throw new ea(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map(e=>e.length);-1===e.indexOf(null)&&1===ma(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return(0,h.DZQ)(()=>{if(this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const s=er(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=sr(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,a=e[0],r=e.slice(1).concat([a]);let i=h.tQQ(s,[a].concat(Ja(e.slice(1))));i=h.mgz(i,[1,0]),i=h.tQQ(i,r),t.push(i),n=!0}else if(e>1){const a=tr(1,e).concat([0]);t.push(h.mgz(s,a)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=h.tQQ(h.mgz(h.tQQ(s,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(tr(0,a-1));s=h.mgz(s,e)}return s}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=ma(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return h.DZQ(()=>{if(null==t)return null;if(!Array.isArray(t))throw new ea("`mask` should be an Array");if(!Array.isArray(e))throw new ea("`inputs` should be an Array");if(t.length!==e.length)throw new ea(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:h.UG6(e,0)))[0];for(let e=1;e<t.length-1;++e)n=h.n76(n,t[e]);return n})}}class du extends hu{constructor(e){super(e)}mergeFunction(e){return(0,h.DZQ)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.WQq(t,e[n]);return t})}}du.className="Add",h.JFn.registerClass(du);class pu extends hu{constructor(e){super(e)}mergeFunction(e){return(0,h.DZQ)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.lKK(t,e[n]);return t})}}pu.className="Multiply",h.JFn.registerClass(pu);class fu extends hu{constructor(e){super(e)}mergeFunction(e){return(0,h.DZQ)(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=h.WQq(t,e[n]);return h.lKK(1/e.length,t)})}}fu.className="Average",h.JFn.registerClass(fu);class mu extends hu{constructor(e){super(e)}mergeFunction(e){return(0,h.DZQ)(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=h.PhQ(t,e[n]);return t})}}mu.className="Maximum",h.JFn.registerClass(mu);class gu extends hu{constructor(e){super(e)}mergeFunction(e){return(0,h.DZQ)(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=h.BpO(t,e[n]);return t})}}gu.className="Minimum",h.JFn.registerClass(gu);class xu extends hu{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new ea("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let a=!1;for(const e of n)if(h.ZSL.arraysEqual(e,s)){a=!0;break}a||n.push(s)}if(n.length>1)throw new ea("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,h.DZQ)(()=>or(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new ea("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new ea("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new ea("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new ea(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return h.DZQ(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(h.wgE(h.P61(e[n]),"bool")):t[n].rank<e[n].rank?s.push(h.UG6(t[n],-1)):s.push(t[n]);const a=h.xWs(s,this.axis);return h.Q7R(a,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function bu(e,t){for(;e<0;)e+=t;return e}xu.className="Concatenate",h.JFn.registerClass(xu);class yu extends hu{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){h.ZSL.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new ta("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new ea(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new ea(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>bu(t,e[n].shape.length)):[bu(this.axes,n.shape.length),bu(this.axes,s.shape.length)],this.normalize&&(n=zi(n,t[0]),s=zi(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new ta("batchDot is not implemented for tensors of 4D or higher rank yet");if(h.ZSL.assert(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),h.ZSL.assert(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new ta("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const r=n;return h.DZQ(()=>{let n,i;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=h.tQQ(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=h.tQQ(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=r[0]===r[1]?h.czq(h.lKK(e,t),r[0]):h.czq(h.lKK(h.mgz(e,[1,0]),t),r[1]);else{const n=r[0]!==e.shape.length-1,s=r[1]===t.shape.length-1;i=h.NoW(e,t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=h.r2V(i,t)}return 1===i.shape.length&&(i=h.UG6(i,1)),i})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[bu(this.axes,e.length),bu(this.axes,t.length)],n}computeOutputShape(e){h.ZSL.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new ta("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}yu.className="Dot",h.JFn.registerClass(yu);class vu extends yi{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e);return xr(()=>(0,h.WQq)(cr(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}vu.className="GaussianNoise",h.JFn.registerClass(vu);class wu extends yi{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t);const n=oi(e);return this.rate>0&&this.rate<1?xr(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return(0,h.lKK)(n,cr(n.shape,1,e))},()=>n,t.training||!1):n})}}wu.className="GaussianDropout",h.JFn.registerClass(wu);class ku extends yi{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||oi(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return(0,h.DZQ)(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),s=()=>{const t=oi(e),s=-1.7580993408473766;let a=(0,h.DQN)((0,h.YeY)(n),this.rate);a=nr(a,"float32");const r=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-r*s*this.rate,o=(0,h.WQq)((0,h.lKK)(t,a),(0,h.lKK)((0,h.WQq)(a,-1),s));return(0,h.WQq)((0,h.lKK)(o,r),i)};return xr(s,()=>oi(e),t.training||!1)}return e})}}function Cu(e,t,n,s,a,r=.001){let i;if(2===e.rank)i=h.BFc(e,t,n,s,a,r);else if(3===e.rank)i=h.kSi(e,t,n,s,a,r);else{if(4!==e.rank)throw new ta(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=h.T5N(e,t,n,s,a,r)}return i}ku.className="AlphaDropout",h.JFn.registerClass(ku);class Su extends yi{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Pr(e.betaInitializer||"zeros"),this.gammaInitializer=Pr(e.gammaInitializer||"ones"),this.movingMeanInitializer=Pr(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Pr(e.movingVarianceInitializer||"ones"),this.betaConstraint=Ra(e.betaConstraint),this.gammaConstraint=Ra(e.gammaConstraint),this.betaRegularizer=ml(e.betaRegularizer),this.gammaRegularizer=ml(e.gammaRegularizer)}build(e){e=li(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new ea(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new fi({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return(0,h.DZQ)(()=>{const n=null!=t.training&&t.training,s=oi(e),a=s.shape,r=a.length,i=tr(0,r),o=this.axis>=0?this.axis:this.axis+r;i.splice(o,1);const l=sa(1,r);l[o]=a[o];const u=i.slice();u.sort();const c=!h.ZSL.arraysEqual(u,tr(0,r).slice(0,r-1));if(!n)return(()=>{if(c){const e=(0,h.tQQ)(this.movingMean.read(),l),t=(0,h.tQQ)(this.movingVariance.read(),l),n=this.center?(0,h.tQQ)(this.beta.read(),l):null,a=this.scale?(0,h.tQQ)(this.gamma.read(),l):null;return Cu(s,e,t,n,a,this.epsilon)}return Cu(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[d,p,f]=function(e,t,n,s,a=.001){return h.ZSL.arraysEqual(s.slice().sort(),tr(0,e.rank-1))?function(e,t,n,s,a=.001){return(0,h.DZQ)(()=>{const r=h.Clk(e,s),i=r.mean,o=r.variance;return[Cu(e,i,o,n,t,a),i,o]})}(e,t,n,s,a):function(e,t,n,s,a=.001){return(0,h.DZQ)(()=>{const r=h.Clk(e,s),i=r.mean,o=r.variance,l=[];for(const t of tr(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=(0,h.tQQ)(i,l),c=(0,h.tQQ)(o,l),d=null==t?null:(0,h.tQQ)(t,l),p=null==n?null:(0,h.tQQ)(n,l);return[Cu(e,u,c,p,d,a),i,o]})}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{h.DZQ(()=>{const s=1-n,a=e.read(),r=h.lKK(h.jbE(a,t),s);e.write(h.jbE(a,r))})};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),d})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Mr(this.betaInitializer),gammaInitializer:Mr(this.gammaInitializer),movingMeanInitializer:Mr(this.movingMeanInitializer),movingVarianceInitializer:Mr(this.movingVarianceInitializer),betaRegularizer:pl(this.betaRegularizer),gammaRegularizer:pl(this.gammaRegularizer),betaConstraint:Aa(this.betaConstraint),gammaConstraint:Aa(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Su.className="BatchNormalization",h.JFn.registerClass(Su);class Iu extends yi{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Pr(e.betaInitializer||"zeros"),this.gammaInitializer=Pr(e.gammaInitializer||"ones"),this.betaRegularizer=ml(e.betaRegularizer),this.gammaRegularizer=ml(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=li(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==ma(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map(t=>e[t]),s=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const n=oi(e),s=n.shape,a=s.length;return(0,h.DZQ)(()=>{let{mean:e,variance:t}=(0,h.Clk)(n,this.axis,!0);const r=sa(1,a);for(const e of this.axis)r[e]=s[e];const i=e=>null!=e&&e.shape.length!==a?h.tQQ(e,r):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=h.Vsq(e,u),t=h.Vsq(t,u),o=h.Vsq(o,c),l=h.Vsq(l,c),Cu(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Mr(this.betaInitializer),gammaInitializer:Mr(this.gammaInitializer),betaRegularizer:pl(this.betaRegularizer),gammaRegularizer:pl(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Iu.className="LayerNormalization",h.JFn.registerClass(Iu);class Tu extends yi{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new ea(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new ea(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new ea(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new fi({ndim:4})]}computeOutputShape(e){let t,n;return e=li(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return(0,h.DZQ)(()=>{return t=oi(e),n=this.padding,s=this.dataFormat,(0,h.DZQ)(()=>{if(4!==t.rank)throw new ea(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new ea("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new ea(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],h.eVF(t,e)});var t,n,s})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function $u(e,t,n,s,a,r){return(0,h.DZQ)(()=>{let i;Va(a),Za(r),Ua(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=Il(e,a);const o="same"===s?"same":"valid";return i="max"===r?h.jgi(e,t,n,o):h.$jT(e,t,n,o),"channelsFirst"===a&&(i=h.mgz(i,[0,3,1,2])),i})}function Nu(e,t,n,s,a,r){return(0,h.DZQ)(()=>{let i;Va(a),Za(r),Ua(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=Tl(e,a);const o="same"===s?"same":"valid";return i="max"===r?h.NYV(e,t,n,o):h.sub(e,t,n,o),"channelsFirst"===a&&(i=h.mgz(i,[0,4,1,2,3])),i})}Tu.className="ZeroPadding2D",h.JFn.registerClass(Tu);class Au extends yi{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new ea(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(ya(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new ea(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}ya(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Ua(this.padding),this.inputSpec=[new fi({ndim:3})]}computeOutputShape(e){const t=Cl((e=li(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return(0,h.DZQ)(()=>{this.invokeCallHook(e,t),e=sr(oi(e),2);const n=this.poolingFunction(oi(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return h.r2V(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Fu extends Au{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),$u(e,t,n,s,a,"max")}}Fu.className="MaxPooling1D",h.JFn.registerClass(Fu);class Ru extends Au{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),$u(e,t,n,s,a,"avg")}}Ru.className="AveragePooling1D",h.JFn.registerClass(Ru);class Eu extends yi{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new ea(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];ya(this.poolSize,"poolSize"),ya(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Va(this.dataFormat),Ua(this.padding),this.inputSpec=[new fi({ndim:4})]}computeOutputShape(e){e=li(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Cl(t,this.poolSize[0],this.padding,this.strides[0]),n=Cl(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return(0,h.DZQ)(()=>(this.invokeCallHook(e,t),this.poolingFunction(oi(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Du extends Eu{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),$u(e,t,n,s,a,"max")}}Du.className="MaxPooling2D",h.JFn.registerClass(Du);class Lu extends Eu{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),$u(e,t,n,s,a,"avg")}}Lu.className="AveragePooling2D",h.JFn.registerClass(Lu);class zu extends yi{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new ea(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];ya(this.poolSize,"poolSize"),ya(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Va(this.dataFormat),Ua(this.padding),this.inputSpec=[new fi({ndim:5})]}computeOutputShape(e){e=li(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Cl(t,this.poolSize[0],this.padding,this.strides[0]),n=Cl(n,this.poolSize[1],this.padding,this.strides[1]),s=Cl(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return(0,h.DZQ)(()=>(this.invokeCallHook(e,t),this.poolingFunction(oi(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ou extends zu{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),Nu(e,t,n,s,a,"max")}}Ou.className="MaxPooling3D",h.JFn.registerClass(Ou);class _u extends zu{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return Va(a),Ua(s),Nu(e,t,n,s,a,"avg")}}_u.className="AveragePooling3D",h.JFn.registerClass(_u);class Mu extends yi{constructor(e){super(e),this.inputSpec=[new fi({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new ta}}class Pu extends Mu{constructor(e){super(e||{})}call(e,t){return(0,h.DZQ)(()=>{const t=oi(e);return h.i2o(t,1)})}}Pu.className="GlobalAveragePooling1D",h.JFn.registerClass(Pu);class Wu extends Mu{constructor(e){super(e||{})}call(e,t){return(0,h.DZQ)(()=>{const t=oi(e);return h.T9B(t,1)})}}Wu.className="GlobalMaxPooling1D",h.JFn.registerClass(Wu);class Bu extends yi{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Va(this.dataFormat),this.inputSpec=[new fi({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new ta}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Vu extends Bu{call(e,t){return(0,h.DZQ)(()=>{const t=oi(e);return"channelsLast"===this.dataFormat?h.i2o(t,[1,2]):h.i2o(t,[2,3])})}}Vu.className="GlobalAveragePooling2D",h.JFn.registerClass(Vu);class Uu extends Bu{call(e,t){return(0,h.DZQ)(()=>{const t=oi(e);return"channelsLast"===this.dataFormat?h.T9B(t,[1,2]):h.T9B(t,[2,3])})}}Uu.className="GlobalMaxPooling2D",h.JFn.registerClass(Uu);class Zu extends yi{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Li(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class Gu extends Zu{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=li(e)).length<3)throw new ea(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=li(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return(0,h.DZQ)(()=>Bl((e,n)=>[oi(this.layer.call(e,t)),[]],e=oi(e),[],!1,null,null,!1,!0)[1])}}Gu.className="TimeDistributed",h.JFn.registerClass(Gu);class Ku extends Zu{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Li(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Li(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,xa(Wa,"BidirectionalMergeMode",a),e.weights)throw new ta("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState?(s=a.slice(1),t=a[0]):t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):ia(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=Wl(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new ea("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map(e=>new fi({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new ta("Support for constants in Bidirectional layers is not implemented yet.");const o=r[0]instanceof mi;for(const e of r)if(e instanceof mi!==o)throw new ea("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return(0,h.DZQ)(()=>{const n=t.initialState;let s,a,r,i;if(null==n)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(r=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=h.BEg(a,1)),"concat"===this.mergeMode?i=or([s,a]):"sum"===this.mergeMode?i=h.WQq(s,a):"ave"===this.mergeMode?i=h.lKK(.5,h.WQq(s,a)):"mul"===this.mergeMode?i=h.lKK(s,a):null==this.mergeMode&&(i=[s,a]),this.returnState?null==this.mergeMode?i.concat(r):[i].concat(r):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Ka(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Ka(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Li(t.layer);if(delete t.layer,null!=t.numConstants)throw new ta("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function Hu(e){return new wi(e)}function Qu(e){return new yl(e)}function ju(e){return new gl(e)}function qu(e){return new xl(e)}function Xu(e){return new bl(e)}function Ju(e){return new wl(e)}function Yu(e){return new vl(e)}function ec(e){return new Ol(e)}function tc(e){return new Fl(e)}function nc(e){return new El(e)}function sc(e){return new Rl(e)}function ac(e){return new Dl(e)}function rc(e){return new zl(e)}function ic(e){return new _l(e)}function oc(e){return new Ml(e)}function lc(e){return new Pl(e)}function uc(e){return new ru(e)}function cc(e){return new su(e)}function hc(e){return new tu(e)}function dc(e){return new nu(e)}function pc(e){return new au(e)}function fc(e){return new iu(e)}function mc(e){return new ou(e)}function gc(e){return new lu(e)}function xc(e){return new cu(e)}function bc(e){return new du(e)}function yc(e){return new fu(e)}function vc(e){return new xu(e)}function wc(e){return new mu(e)}function kc(e){return new gu(e)}function Cc(e){return new pu(e)}function Sc(e){return new yu(e)}function Ic(e){return new Su(e)}function Tc(e){return new Iu(e)}function $c(e){return new Tu(e)}function Nc(e){return new Ru(e)}function Ac(e){return Nc(e)}function Fc(e){return Nc(e)}function Rc(e){return new Lu(e)}function Ec(e){return Rc(e)}function Dc(e){return Rc(e)}function Lc(e){return new _u(e)}function zc(e){return Lc(e)}function Oc(e){return Lc(e)}function _c(e){return new Pu(e)}function Mc(e){return new Vu(e)}function Pc(e){return new Wu(e)}function Wc(e){return new Uu(e)}function Bc(e){return new Fu(e)}function Vc(e){return new Du(e)}function Uc(e){return new Ou(e)}function Zc(e){return new Hl(e)}function Gc(e){return new Kl(e)}function Kc(e){return new jl(e)}function Hc(e){return new Ql(e)}function Qc(e){return new Gl(e)}function jc(e){return new Zl(e)}function qc(e){return new eu(e)}function Xc(e){return new Yl(e)}function Jc(e){return new Vl(e)}function Yc(e){return new ql(e)}function eh(e){return new Ku(e)}function th(e){return new Gu(e)}Ku.className="Bidirectional",h.JFn.registerClass(Ku);const nh=Pc,sh=Wc,ah=Bc,rh=Vc;function ih(e){return new vu(e)}function oh(e){return new wu(e)}function lh(e){return new ku(e)}function uh(e){return new uu(e)}function ch(e,t){return Gi(e,t)}function hh(e,t){return ji(e,t)}function dh(e,t){return qi(e,t)}function ph(e,t){return Ki(e,t)}function fh(e,t){return Xi(e,t)}function mh(e,t){return Qi(e,t)}function gh(e,t){return function(e,t){return(0,h.DZQ)(()=>{const n=Hi(e,t),s=function(e,t){return(0,h.DZQ)(()=>h.wgE(h.czq(h.n76(h.LCg(e,1),h.LCg(t,0))),"float32"))}(e,t),a=h.WQq(n,s);return h.wgE(h._M9(h.rhj(a,0),h.y4m(n,a),0),"float32")})}(e,t)}function xh(e,t){return Vi(e,t)}function bh(e,t){return _i(e,t)}function yh(e,t){return Mi(e,t)}function vh(e,t){return Mi(e,t)}function wh(e,t){return Mi(e,t)}function kh(e,t){return Oi(e,t)}function Ch(e,t){return Oi(e,t)}function Sh(e,t){return Oi(e,t)}function Ih(e){return new hl(e)}function Th(e){return ul(t=e),new hl({l1:null!=t?t.l1:null,l2:0});var t}function $h(e){return ul(t=e),new hl({l2:null!=t?t.l2:null,l1:0});var t}class Nh extends Ti{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof Oo))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Ah(e,t){return e<t}function Fh(e,t){return e>t}class Rh extends Nh{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new ta("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Ah:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=Fh:this.monitorFunc=Ah,this.monitorFunc===Ah&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Ah?1/0:-1/0}async onEpochEnd(e,t){await Ci(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const Eh={earlyStopping:function(e){return new Rh(e)}};var Dh,Lh=n(7354),zh=n(7391);function Oh(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(Bh(e)){const a=Array.isArray(e)?[]:{};s.add(e);for(const r in e){const i=Oh(e[r],t,n,s);a[r]=i}return s.delete(e),e.__proto__&&(a.__proto__=e.__proto__),a}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,a.value),a.value}function _h(e,t=Ph){return Mh(e,t)}function Mh(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(Bh(s)){const a=Array.isArray(s)?[]:{};n.add(s);for(const r in s){const s=Mh(e.map(e=>e[r]),t,n);a[r]=s}return n.delete(s),a}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}function Ph(e){return null===e?null:Bh(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function Wh(e,t){const n=new Map;Oh(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(h.ZSL.isPromise(t)){const s=await t;n.set(e,s)}}return Oh(e,t,n)}function Bh(e){let t=!1;if(h._K2().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(551);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof h.qYS)&&!(e instanceof Promise)&&!t)}function Vh(e){return e instanceof h.qYS?{value:e.clone(),recurse:!1}:Bh(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Uh{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Zh extends Uh{constructor(){super(Zh.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Gh(e){return new Qh(e)}function Kh(e){return new jh(e)}Zh.INITIAL_CAPACITY=32;class Hh{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new nd(this,e)}filter(e){return new ed(this,e)}map(e){return new td(this,e)}mapAsync(e){return new sd(this,e)}serialMapAsync(e){return new sd(this,e).serial()}flatmap(e){return new rd(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Yh(this,e,t)}columnMajorBatch(e,t=!0,n=Ph){return this.rowMajorBatch(e,t).map(e=>_h(e,n))}concatenate(e,t){return new id(Gh([this,e]),t)}take(e){return e<0||null==e?this:new Jh(this,e)}skip(e){return e<0||null==e?this:new Xh(this,e)}prefetch(e){return new ld(this,e)}shuffle(e,t){return new ud(this,e,t)}serial(){return new qh(this)}}class Qh extends Hh{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return Oh(e,t)}(t,Vh)),done:!1};var t}}class jh extends Hh{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class qh extends Hh{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Xh extends Hh{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;h.ASo(e.value)}return this.upstream.next()}}class Jh extends Hh{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Yh extends Hh{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class ed extends Hh{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;h.ASo(e.value)}}}class td extends Hh{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=h.d_S.getTensorsInContainer(e.value),n=this.transform(e.value),s=h.d_S.getTensorsInContainer(n);for(const e of t)h.d_S.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class nd extends Hh{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class sd extends Hh{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=h.d_S.getTensorsInContainer(e.value),n=await this.transform(e.value),s=h.d_S.getTensorsInContainer(n);for(const e of t)h.d_S.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class ad extends Hh{constructor(){super(),this.outputQueue=new Zh,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class rd extends ad{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=h.d_S.getTensorsInContainer(e.value),n=this.transform(e.value),s=h.d_S.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)h.d_S.isTensorInList(e,s)||e.dispose();return!0}}class id extends Hh{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Dh||(Dh={}));class od extends Hh{constructor(e,t=Dh.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await Wh(this.iterators,function(e){return e instanceof Hh?{value:e.next().then(e=>(t++,e.done&&n++,e.value)),recurse:!1}:{value:null,recurse:!0}});if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Dh.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Dh.SHORTEST:return{value:null,done:!0};case Dh.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class ld extends Hh{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Uh(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class ud extends ld{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=zh.alea(n||h.ZSL.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class cd{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return h.ZSL.assert(e>0,()=>`batchSize needs to be positive, but it is\n      ${e}`),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),hd(async()=>(await n.iterator()).columnMajorBatch(e,t,fd),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,hd(async()=>(await t.iterator()).concatenate(await e.iterator()),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,hd(async()=>(await t.iterator()).filter(t=>h.DZQ(()=>e(t))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return hd(async()=>(await t.iterator()).map(t=>h.DZQ(()=>e(t))),this.size)}mapAsync(e){const t=this;return hd(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return hd(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,hd(async()=>{return n=Kh(async()=>({value:await t.iterator(),done:!1})).take(e),new id(n,s);var n,s},n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,hd(async()=>(await t.iterator()).skip(e),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=zh.alea(t||h.ZSL.now().toString());return hd(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,hd(async()=>(await t.iterator()).take(e),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function hd(e,t=null){return new class extends cd{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function dd(e){return hd(async()=>Gh(e),e.length)}function pd(e){if(!Bh(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return hd(async()=>function(e,t=Dh.FAIL){return new od(e,t)}(await Wh(e,e=>{if(e instanceof cd)return{value:e.iterator(),recurse:!1};if(Bh(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Dh.SHORTEST),t)}function fd(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof h.qYS||h.ZSL.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof h.qYS?h.t$z(e):h.OEK(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}cd.MAX_BUFFER_SIZE=1e4;class md extends cd{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e))}}const gd='"',xd=Symbol("out"),bd=Symbol("field"),yd=Symbol("quote"),vd=Symbol("quoteafterquote"),wd=Symbol("quoteinquote");class kd extends cd{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new md(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(h.ZSL.assert(null==t.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&h.ZSL.assert(e.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce((e,t)=>(e[t]=e[t]+1||1,e),{}),n=Object.keys(t).filter(e=>t[e]>1);if(h.ZSL.assert(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map(e=>this.makeDataElement(e))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let a=0;a<this.fullColumnNames.length;a++){const r=this.fullColumnNames[a],i=this.columnConfigs?this.columnConfigs[r]:null;if(!this.configuredColumnsOnly||i){const o=t[a];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${r} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o)}else l=e}i&&i.isLabel?s[r]=l:n[r]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const a=e.length;let r=xd;for(let t=0;t<a;t++)switch(r){case xd:switch(e.charAt(t)){case gd:s=t+1,r=yd;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),r=xd;break;default:r=bd,s=t}break;case bd:e.charAt(t)===this.delimiter&&(n.push(e.substring(s,t)),r=xd,s=t+1);break;case yd:e.charAt(t)===gd&&(r=vd);break;case vd:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),r=xd,s=t+1;break;case gd:r=yd;break;default:r=wd}break;case wd:e.charAt(t)===gd&&(r=yd)}if(r===vd?n.push(e.substring(s,a-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class Cd extends Hh{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if((0,h._K2)().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new Cd(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise(s=>{const a=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(a),s({freqDataQueue:e,timeDataQueue:t}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach((e,s)=>n.set(e,s*t)),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(h.ZSL.sizeFromShape(t));return n.set(e,n.length-e.length),(0,h.OEK)(n,t)}}class Sd extends Hh{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=(0,h.tGX)([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,a=n+e,r=t+s;this.cropBox=(0,h.KtR)([s,n,r,a],[1,4])}else this.cropBox=(0,h.KtR)([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if((0,h._K2)().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new Sd(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&h.ZSL.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}})}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=h.TaL.fromPixels(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return(0,h.DZQ)(()=>{const t=(0,h.UG6)((0,h.wgE)(e,"float32"),0);let n;n=h.Slp.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return(0,h.tQQ)(n,s.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(e=>e.stop());try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class Id{}class Td extends Hh{split(e){return new $d(this,e)}}class $d extends Td{constructor(e,t){super(),this.upstream=e,this.impl=new Nd(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Nd extends ad{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class Ad extends Hh{decodeUTF8(){return new Fd(this)}}class Fd extends Td{constructor(e){super(),this.upstream=e,this.impl=new Rd(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class Rd extends ad{constructor(e){if(super(),this.upstream=e,(0,h._K2)().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(4530);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=(0,h._K2)().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class Ed extends Ad{constructor(e,t={}){super(),this.file=e,this.options=t,h.ZSL.assert(e instanceof Uint8Array||!!(0,h._K2)().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let a=s.result;if(a instanceof ArrayBuffer&&(a=new Uint8Array(a)),!(a instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(a)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const a=this.file.slice(this.offset,n);s.readAsArrayBuffer(a)}this.offset=n});return{value:await e,done:!1}}}function Dd(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class Ld extends Id{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(Dd(this.input)&&(0,h._K2)().get("IS_NODE")){const e=n(8108);this.input=e.readFileSync(this.input.substr(7))}return new Ed(this.input,this.options)}}class zd extends Id{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return Dd(this.url)?new Ld(this.url,this.fileOptions).iterator():async function(e,t={},n){let s,a;var r;"string"==typeof e?s=e:(s=e.url,a={method:(r=e).method,headers:r.headers,body:r.body,mode:r.mode,credentials:r.credentials,cache:r.cache,redirect:r.redirect,referrer:r.referrer,integrity:r.integrity});const i=await(n||h.ZSL.fetch)(s,a);if(i.ok){const e=new Uint8Array(await i.arrayBuffer());return new Ed(e,t)}throw new Error(i.statusText)}(this.url,this.fileOptions)}}function Od(e,t={}){return new kd(new zd(e),t)}function _d(e){const t=Kh(e);return hd(async()=>t)}function Md(e){return hd(async()=>{const t=await e();return Kh(()=>t.next())})}async function Pd(e,t){return Sd.create(e,t)}async function Wd(e){return Cd.create(e)}const Bd="3.11.0";var Vd=n(7870);const Ud=h.kpo.whereImpl;class Zd extends h.uI_{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new h.GJx(this,(0,h.Hi9)())}nextDataId(){return Zd.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,h._K2)().get("IS_NODE")&&h.C0T.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&h.ZSL.isString(n[0])){const a=n.map(e=>h.ZSL.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return h.C0T.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>h.ZSL.decodeString(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,h.ra8)(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return(0,h.Hi9)().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=h.ZSL.now();return e(),{kernelMs:h.ZSL.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,Vd.C)([e],"where");const t=this.readSync(e.dataId);return Ud(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Gd(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if((0,Vd.C)(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=h.ZSL.sizeFromShape(i.shape),c=n||i.dtype,d=h.ZSL.getArrayFromDType(c,u);for(let e=0;e<u;++e)d[e]=t(l[e],a);return o.makeTensorInfo(i.shape,c,d)}}function Kd(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if((0,Vd.C)(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,a);return o.makeTensorInfo(i.shape,u,c)}}Zd.nextDataId=0,(0,h.gJX)("cpu",()=>new Zd,1);const Hd=Gd(h.Pah,e=>e>=0?e:Math.exp(e)-1),Qd={kernelName:h.Pah,backendName:"cpu",kernelFunc:Hd};function jd(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const qd={kernelName:h.lzr,backendName:"cpu",kernelFunc:jd};function Xd(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s;(0,Vd.C)([a],"leakyRelu");const i=h.ZSL.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,l=h.ZSL.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?r*o[e]:o[e];return n.makeTensorInfo(a.shape,"float32",l)}const Jd={kernelName:h.X0$,backendName:"cpu",kernelFunc:Xd};function Yd(e){return(t,n,s,a,r)=>{const i=h.C0T.assertAndGetBroadcastShape(t,n),o=i.length,l=h.ZSL.computeStrides(i),u=h.ZSL.sizeFromShape(i),c=h.ZSL.getTypedArrayFromDType(r,u),d=t.length,p=n.length,f=h.ZSL.computeStrides(t),m=h.ZSL.computeStrides(n),g=h.C0T.getBroadcastDims(t,i),x=h.C0T.getBroadcastDims(n,i);if(g.length+x.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<c.length;++t){const n=h.ZSL.indexToLoc(t,o,l),r=n.slice(-d);g.forEach(e=>r[e]=0);const i=h.ZSL.locToIndex(r,d,f),u=n.slice(-p);x.forEach(e=>u[e]=0);const b=h.ZSL.locToIndex(u,p,m);c[t]=e(s[i],a[b])}return[c,i]}}const ep=Yd((e,t)=>e<0?t*e:e);function tp(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;(0,Vd.C)([s,a],"prelu");const r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,[o,l]=ep(s.shape,a.shape,r,i,"float32");return n.makeTensorInfo(l,"float32",o)}const np={kernelName:h.Ncv,backendName:"cpu",kernelFunc:tp},sp=Gd(h.fUj,e=>Math.max(0,e)),ap={kernelName:h.fUj,backendName:"cpu",kernelFunc:sp},rp=Gd(h.P_L,e=>Math.min(Math.max(0,e),6)),ip={kernelName:h.P_L,backendName:"cpu",kernelFunc:rp};function op(e){return(t,n,s)=>{const a=h.ZSL.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}const lp=op(e=>1/(1+Math.exp(-e))),up=Gd(h.vI1,e=>1/(1+Math.exp(-e))),cp={kernelName:h.vI1,backendName:"cpu",kernelFunc:up};function hp(e,t,n,s,a){if("linear"===n)return jd({inputs:{x:t},backend:e});if("relu"===n)return sp({inputs:{x:t},backend:e});if("elu"===n)return Hd({inputs:{x:t},backend:e});if("relu6"===n)return rp({inputs:{x:t},backend:e});if("prelu"===n)return tp({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Xd({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return up({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function dp(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",i)},o}const pp={kernelName:h.pr3,backendName:"cpu",kernelFunc:dp};function fp(e,t,n="float32"){if("complex64"===n)return dp({inputs:{real:fp(e,t,"float32"),imag:fp(e,t,"float32")},backend:e});const s=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function mp(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const gp={kernelName:h.LRy,backendName:"cpu",kernelFunc:mp};function xp(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:r}=s;if("complex64"===r){if("complex64"===a.dtype)return jd({inputs:{x:a},backend:n});const e=fp(n,a.shape,a.dtype),t=xp({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=dp({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=mp({inputs:{input:a},backend:n}),t=xp({inputs:{x:e},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(e),t}if(!h.ZSL.hasEncodingLoss(a.dtype,r)){const e=jd({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:r}}if("int32"===r){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===r){const e=n.data.get(a.dataId).values,t=h.ZSL.toTypedArray([0],a.dtype),[s,r]=Yd((e,t)=>e!==t?1:0)(a.shape,[],e,t,"bool");return n.makeTensorInfo(r,"bool",s)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${r}`)}const bp={kernelName:h.KXH,backendName:"cpu",kernelFunc:xp};function yp(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:r,b:i}=n,o=a;(0,Vd.C)([r,i],e);const l=o.data.get(r.dataId).values,u=o.data.get(i.dataId).values,c="string"===r.dtype?h.C0T.fromUint8ToStringArray(l):l,d="string"===r.dtype?h.C0T.fromUint8ToStringArray(u):u,p=s||r.dtype,[f,m]=t(r.shape,i.shape,c,d,p);return o.makeTensorInfo(m,p,f)}:({inputs:e,backend:a})=>{const{a:r,b:i}=e,o=a;if("complex64"===r.dtype||"complex64"===i.dtype){const e=xp({inputs:{x:r},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(a.dataId).values,c=xp({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=o.data.get(d.dataId).values,m=o.data.get(p.dataId).values,[g,x,b]=n(r.shape,i.shape,l,u,f,m),y=o.makeTensorInfo(b,"float32",g),v=o.makeTensorInfo(b,"float32",x),w=dp({inputs:{real:y,imag:v},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(v),w}{const e=o.data.get(r.dataId).values,n=o.data.get(i.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,i.shape,e,n,a);return o.makeTensorInfo(u,a,l)}}}function vp(e){return(t,n,s,a,r,i)=>{const o=h.C0T.assertAndGetBroadcastShape(t,n),l=h.ZSL.sizeFromShape(o),u=o.length,c=h.ZSL.computeStrides(o),d=h.ZSL.getTypedArrayFromDType("float32",l),p=h.ZSL.getTypedArrayFromDType("float32",l),f=h.C0T.getBroadcastDims(t,o),m=h.C0T.getBroadcastDims(n,o),g=h.C0T.mergeRealAndImagArrays(s,a),x=h.C0T.mergeRealAndImagArrays(r,i),b=t.length,y=h.ZSL.computeStrides(t),v=n.length,w=h.ZSL.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,s=t%x.length,a=e(g[2*n],g[2*n+1],x[2*s],x[2*s+1]);d[t]=a.real,p[t]=a.imag}else for(let t=0;t<d.length;t++){const n=h.ZSL.indexToLoc(t,u,c),s=n.slice(-b);f.forEach(e=>s[e]=0);const a=h.ZSL.locToIndex(s,b,y),r=n.slice(-v);m.forEach(e=>r[e]=0);const i=h.ZSL.locToIndex(r,v,w),o=e(g[2*a],g[2*a+1],x[2*i],x[2*i+1]);d[t]=o.real,p[t]=o.imag}return[d,p,o]}}const wp=Yd((e,t)=>e+t),kp=vp((e,t,n,s)=>({real:e+n,imag:t+s})),Cp=yp(h.OMN,wp,kp),Sp={kernelName:h.OMN,backendName:"cpu",kernelFunc:Cp};function Ip(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,i=h.ZSL.sizeFromShape(a.shape),o=h.ZSL.inferFromImplicitShape(r,i),l=h.ZSL.sizeFromShape(o);h.ZSL.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);const u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:a.dataId,shape:o,dtype:a.dtype}}const Tp={kernelName:h.R23,backendName:"cpu",kernelFunc:Ip};function $p(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;(0,Vd.C)([a,r],"matMul");const l=a.shape.length,u=r.shape.length,c=i?a.shape[l-2]:a.shape[l-1],d=o?r.shape[u-1]:r.shape[u-2],p=i?a.shape[l-1]:a.shape[l-2],f=o?r.shape[u-2]:r.shape[u-1],m=a.shape.slice(0,-2),g=r.shape.slice(0,-2),x=h.ZSL.sizeFromShape(m),b=h.ZSL.sizeFromShape(g),y=x===b||1===x||1===b;h.ZSL.assert(l>=2&&u>=2&&y,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`);const v=(x>b?a.shape.slice(0,-2):r.shape.slice(0,-2)).concat([p,f]);h.ZSL.assert(c===d,()=>`Error in matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${a.shape} and ${r.shape} and transposeA=${i} and transposeB=${o} must match.`);const w=o?[b,f,d]:[b,d,f],k=Ip({inputs:{x:a},backend:n,attrs:{shape:i?[x,c,p]:[x,p,c]}}),C=Ip({inputs:{x:r},backend:n,attrs:{shape:w}}),S=i?k.shape[1]:k.shape[2],I=i?k.shape[2]:k.shape[1],T=o?C.shape[1]:C.shape[2],$=Math.max(x,b),N=n.data.get(k.dataId).values,A=n.data.get(C.dataId).values,F=h.ZSL.computeStrides(k.shape),R=h.ZSL.computeStrides(C.shape),[E,D,L]=i?[F[0],1,F[1]]:[F[0],F[1],1],[z,O,_]=o?[1,R[1],R[0]]:[R[1],1,R[0]],M=I*T,P=(0,h.ra8)([$,I,T],k.dtype),W=P.values,B=n.blockSize;for(let e=0;e<$;e++)for(let t=0;t<I;t+=B)for(let n=0;n<T;n+=B)for(let s=0;s<S;s+=B){const a=Math.min(t+B,I),r=Math.min(n+B,T),i=Math.min(s+B,S);for(let o=t;o<a;o++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<i;a++){const s=Math.min(e,x-1)*E,r=Math.min(e,b-1)*_;n+=N[s+o*D+a*L]*A[a*z+t*O+r]}W[e*M+(o*T+t)]+=n}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(C),n.makeTensorInfo(v,P.dtype,P.values)}const Np={kernelName:h.jAQ,backendName:"cpu",kernelFunc:$p},Ap={kernelName:h.Dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=$p({inputs:{a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=Cp({inputs:{a:d,b:i},backend:n}),m.push(d),d=p),c&&(f=hp(n,d,c,o,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}};function Fp(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Rp={kernelName:h.ljI,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;(0,Vd.C)(t,"abs");let s=new Float32Array(h.ZSL.sizeFromShape(t.shape));return s=Fp(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Ep=Gd(h.Vvy,e=>Math.acos(e)),Dp={kernelName:h.Vvy,backendName:"cpu",kernelFunc:Ep},Lp=Gd(h.PH8,e=>Math.acosh(e)),zp={kernelName:h.PH8,backendName:"cpu",kernelFunc:Lp},Op={kernelName:h.EkD,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;(0,Vd.C)(t,"addN");const a=s.map(e=>n.data.get(e.dataId).values),r=(0,h.ra8)(s[0].shape,s[0].dtype),i=r.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};function _p(e,t,n,s,a){const r=t.length,i=h.ZSL.sizeFromShape(t),o=h.ZSL.computeStrides(t),l=h.ZSL.computeStrides(a),u=h.ZSL.getTypedArrayFromDType(n,h.ZSL.sizeFromShape(a));for(let t=0;t<i;++t){const n=h.ZSL.indexToLoc(t,r,o),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];u[h.ZSL.locToIndex(a,r,l)]=e[t]}return u}function Mp(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;(0,Vd.C)(a,"transpose");const i=a.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=a.shape[r[e]];const l=_p(s.data.get(a.dataId).values,a.shape,a.dtype,r,o);return{dataId:s.write(l,o,a.dtype),shape:o,dtype:a.dtype}}const Pp={kernelName:h.wx0,backendName:"cpu",kernelFunc:Mp},Wp={kernelName:h.u8Z,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;(0,Vd.C)(a,"all");const o=h.ZSL.parseAxisParam(r,a.shape);let l=o;const u=h.C0T.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Mp({inputs:{x:a},backend:n,attrs:{perm:u}}),l=h.C0T.getInnerMostAxes(l.length,a.shape.length)),h.C0T.assertAxesAreInnerMostDims("all",l,c.shape.length);const[d,p]=h.C0T.computeOutAndReduceShapes(c.shape,l),f=h.ZSL.sizeFromShape(p),m=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Ip({inputs:{x},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(x),e}return x}},Bp={kernelName:h.FSt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;(0,Vd.C)(a,"any");const o=h.ZSL.parseAxisParam(r,a.shape);let l=o;const u=h.C0T.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Mp({inputs:{x:a},backend:n,attrs:{perm:u}}),l=h.C0T.getInnerMostAxes(l.length,a.shape.length)),h.C0T.assertAxesAreInnerMostDims("any",l,c.shape.length);const[d,p]=h.C0T.computeOutAndReduceShapes(c.shape,l),f=h.ZSL.sizeFromShape(p),m=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Ip({inputs:{x},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(x),e}return x}},Vp={kernelName:h.Jp_,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;(0,Vd.C)(a,"argMax");let i=h.ZSL.parseAxisParam(r,a.shape);const o=h.C0T.getAxesPermutation(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Mp({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=h.C0T.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],h.C0T.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,d]=h.C0T.computeOutAndReduceShapes(l.shape,i),p=h.ZSL.sizeFromShape(c),f=h.ZSL.makeZerosTypedArray(p,"int32"),m=h.ZSL.sizeFromShape(d),g=n.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const a=g[t+e];a>n&&(n=a,s=e)}f[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",f)}},Up={kernelName:h.p_m,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;(0,Vd.C)(a,"argMin");let i=h.ZSL.parseAxisParam(r,a.shape);const o=h.C0T.getAxesPermutation(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Mp({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=h.C0T.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],h.C0T.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,d]=h.C0T.computeOutAndReduceShapes(l.shape,i),p=h.ZSL.sizeFromShape(c),f=h.ZSL.makeZerosTypedArray(p,"int32"),m=h.ZSL.sizeFromShape(d),g=n.data.get(l.dataId).values;for(let e=0;e<f.length;++e){const t=e*m;let n=g[t],s=0;for(let e=0;e<m;++e){const a=g[t+e];a<n&&(n=a,s=e)}f[e]=s}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",f)}},Zp=Gd(h.QKF,e=>Math.asin(e)),Gp={kernelName:h.QKF,backendName:"cpu",kernelFunc:Zp},Kp=Gd(h.epO,e=>Math.asinh(e)),Hp={kernelName:h.epO,backendName:"cpu",kernelFunc:Kp},Qp=Gd(h.TyE,e=>Math.atan(e)),jp={kernelName:h.TyE,backendName:"cpu",kernelFunc:Qp},qp=Yd((e,t)=>Math.atan2(e,t)),Xp=yp(h.lxb,qp),Jp={kernelName:h.lxb,backendName:"cpu",kernelFunc:Xp},Yp=Gd(h.zP9,e=>Math.atanh(e)),ef={kernelName:h.zP9,backendName:"cpu",kernelFunc:Yp};function tf(e,t,n,s,a,r){const i=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,d=a.effectiveFilterWidth,p=a.padInfo.top,f=a.padInfo.left,m="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,h.ra8)(a.outShape,n),x=g.values,b=a.outShape[1]*a.outShape[2]*a.outShape[3],y=a.outShape[2]*a.outShape[3],v=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*b,h=t*s[0];for(let t=0;t<a.inChannels;++t)for(let g=0;g<a.outHeight;++g){const b=g*i-p,w=Math.max(0,b),k=Math.min(a.inHeight,c+b),C=n+g*y;for(let n=0;n<a.outWidth;++n){const i=n*o-f,c=Math.max(0,i),p=Math.min(a.inWidth,d+i);let g=m,b=0,y=0;for(let n=w;n<k;n+=l){const a=h+n*s[1];for(let n=c;n<p;n+=u){const i=e[a+n*s[2]+t];"max"===r&&i>g?g=i:"avg"===r&&(b+=i,y++)}if(isNaN(g))break}x[C+n*v+t]="avg"===r?b/y:g}}}return g}function nf(e,t,n,s,a=!1,r=!1){const i=(0,h.ra8)(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,d=s.effectiveFilterHeight,p=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,g=(0,h.ra8)(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const h=n*o-f;let x=h;for(;x<0;)x+=u;const b=Math.min(s.inHeight,d+h);for(let o=0;o<s.outWidth;++o){const d=o*l-m;let f=d;for(;f<0;)f+=c;const y=Math.min(s.inWidth,p+d);let v=Number.NEGATIVE_INFINITY,w=-1;for(let n=x;n<b;n+=u){const i=n-h;for(let o=f;o<y;o+=c){const l=o-d,u=g.get(e,n,o,t);u>v&&(v=u,w=a?r?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(w,e,n,o,t)}}return i}function sf(e,t,n,s,a,r){const i=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,d=a.dilationWidth,p=a.effectiveFilterDepth,f=a.effectiveFilterHeight,m=a.effectiveFilterWidth,g=a.padInfo.front,x=a.padInfo.top,b=a.padInfo.left,y="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=(0,h.ra8)(a.outShape,n),w=v.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],C=a.outShape[2]*a.outShape[3]*a.outShape[4],S=a.outShape[3]*a.outShape[4],I=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,h=t*s[0];for(let t=0;t<a.inChannels;++t)for(let v=0;v<a.outDepth;++v){const k=v*i-g;let T=k;for(;T<0;)T+=u;const $=Math.min(a.inDepth,p+k),N=n+v*C;for(let n=0;n<a.outHeight;++n){const i=n*o-x;let p=i;for(;p<0;)p+=c;const g=Math.min(a.inHeight,f+i),v=N+n*S;for(let n=0;n<a.outWidth;++n){const i=n*l-b;let o=i;for(;o<0;)o+=d;const f=Math.min(a.inWidth,m+i),x=v+n*I;let k=y,C=0,S=0;for(let n=T;n<$;n+=u){const a=h+n*s[1];for(let n=p;n<g;n+=c){const i=a+n*s[2];for(let n=o;n<f;n+=d){const a=e[i+n*s[3]+t];if("max"===r&&a>k?k=a:"avg"===r&&(C+=a,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[x+t]="avg"===r?C/S:k}}}}return v}const af={kernelName:h.ho8,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;(0,Vd.C)(a,"avgPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.C0T.computePool2DInfo(a.shape,r,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&h.ZSL.arraysEqual(u.inShape,u.outShape))c=jd({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=h.ZSL.computeStrides(a.shape),s=tf(e,a.shape,a.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}},rf={kernelName:h.cS,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;(0,Vd.C)(a,"avgPool3d");const c=h.C0T.computePool3DInfo(a.shape,r,i,1,o,l,u),d=sf(n.data.get(a.dataId).values,a.shape,a.dtype,h.ZSL.computeStrides(a.shape),c,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},of={kernelName:h.wwC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;(0,Vd.C)([a,r],"avgPool3DGrad");const c=h.C0T.computePool3DInfo(r.shape,i,o,1,l,u),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.filterDepth,g=c.filterHeight,x=c.filterWidth,b=c.dilationDepth,y=c.dilationHeight,v=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,C=c.effectiveFilterWidth,S=w-1-c.padInfo.front,I=C-1-c.padInfo.left,T=k-1-c.padInfo.top,$=(0,h.ra8)(r.shape,"float32"),N=1/(m*g*x),A=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-S,i=s-T,o=a-I;let l=0;for(let n=0;n<w;n+=b){const s=(r+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=y){const a=(i+n)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<C;n+=v){const r=(o+n)/f;r<0||r>=c.outWidth||Math.floor(r)!==r||(l+=A.get(e,s,a,r,t))}}}$.set(l*N,e,n,s,a,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},lf={kernelName:h.VCH,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;(0,Vd.C)([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=h.C0T.computePool2DInfo(i.shape,o,l,1,u),d=c.strideHeight,p=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterHeight,y=c.effectiveFilterWidth,v=y-1-c.padInfo.left,w=b-1-c.padInfo.top,k=(0,h.ra8)(i.shape,"float32"),C=1/(f*m),S=n.data.get(a.dataId).values,I=(0,h.ra8)(a.shape,"float32",S);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const a=n-w,r=s-v;let i=0;for(let n=0;n<b;n+=g){const s=(a+n)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<y;n+=x){const a=(r+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(i+=I.get(e,s,a,t))}}k.set(i*C,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},uf={kernelName:h.i5R,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:r,offset:i,mean:o,variance:l}=t;h.ZSL.assert(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h.ZSL.assert(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h.ZSL.assert(null==r||o.shape.length===r.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),(0,Vd.C)([a,o,l,r,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(a.dataId).values,d=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,f=r?n.data.get(r.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),x=m.length,b=f.length,y=p.length,v=d.length;let w=0,k=0,C=0,S=0;for(let e=0;e<c.length;++e)g[e]=m[w++]+(c[e]-d[k++])*f[C++]/Math.sqrt(p[S++]+u),w>=x&&(w=0),k>=v&&(k=0),C>=b&&(C=0),S>=y&&(S=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};var cf=n(7906);const hf={kernelName:h.Ik2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:i}=s;(0,Vd.C)([a],"batchToSpaceND");const o=r.reduce((e,t)=>e*t),l=h.C0T.getReshaped(a.shape,r,o),u=h.C0T.getPermuted(l.length,r.length),c=h.C0T.getReshapedPermuted(a.shape,r,o),d=h.C0T.getSliceBeginCoords(i,r.length),p=h.C0T.getSliceSize(c,i,r.length),f=Ip({inputs:{x:a},backend:n,attrs:{shape:l}}),m=Mp({inputs:{x:f},backend:n,attrs:{perm:u}}),g=Ip({inputs:{x:m},backend:n,attrs:{shape:c}}),x=(0,cf.di)({inputs:{x:g},backend:n,attrs:{begin:d,size:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),x}};function df(e,t,n,s,a){const r=h.ZSL.sizeFromShape(s),i=h.ZSL.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(i[s]+=r>0?t[n]:1)}return i}function pf(e,t,n,s=!1){const a=e.shape[0],r=e.shape[1],i=(0,h.ra8)([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<r;a++){const r=e.get(o,a);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(s?i.set(1,o,r):t.size>0?i.set(i.get(o,r)+t.get(o,a),o,r):i.set(i.get(o,r)+1,o,r))}return i}const ff={kernelName:h.N4F,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=df(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,o)}},mf={kernelName:h.vj7,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=h.C0T.assertAndGetBroadcastShape(Array.from(r),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},gf=op(e=>Math.ceil(e)),xf=Kd(h.QDP,gf),bf={kernelName:h.QDP,backendName:"cpu",kernelFunc:xf},yf=Gd(h.vaV,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}),vf={kernelName:h.vaV,backendName:"cpu",kernelFunc:yf},wf={kernelName:h.$zE,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(h.ZSL.sizeFromShape(t.shape)),a=n.data.get(t.dataId),r=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};var kf=n(7763);function Cf(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Sf={kernelName:h.dv8,backendName:"cpu",kernelFunc:Cf};function If(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=h.ZSL.parseAxisParam(a,t[0].shape)[0];let i=h.C0T.computeOutShape(t.map(e=>e.shape),r);if(0===h.ZSL.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>h.ZSL.sizeFromShape(e.shape)>0);if(1===o.length)return jd({inputs:{x:o[0]},backend:n});const l=o.map(e=>e.shape);if(h.C0T.assertParamsConsistent(l,r),"complex64"===o[0].dtype){const e=o.map(e=>mp({inputs:{input:e},backend:n})),t=o.map(e=>Cf({inputs:{input:e},backend:n})),s=If({inputs:e,backend:n,attrs:{axis:r}}),a=If({inputs:t,backend:n,attrs:{axis:r}}),i=dp({inputs:{real:s,imag:a},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}const u=o.map(e=>{const t=h.ZSL.sizeFromShape(e.shape.slice(r));return Ip({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),c=u.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));i=h.C0T.computeOutShape(u.map(e=>e.shape),1);const d=1===u[0].shape[0],p=(0,kf.h)(c,i,t[0].dtype,d),f=h.C0T.computeOutShape(o.map(e=>e.shape),r),m=n.makeTensorInfo(f,t[0].dtype,p);return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}const Tf={kernelName:h.$dB,backendName:"cpu",kernelFunc:If};function $f(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;(0,Vd.C)([a,r],"conv2d");const d=h.C0T.convertConv2DDataFormat(l),p=h.C0T.computeConv2DInfo(a.shape,r.shape,i,u,o,c,!1,d),f=p.filterHeight,m=p.filterWidth,g=p.dilationHeight,x=p.dilationWidth,b=p.padInfo.left,y=p.padInfo.top,v="channelsLast"===p.dataFormat,w=new h.ylz(p.outShape,a.dtype),k=h.ZSL.computeStrides(a.shape),C=h.ZSL.computeStrides(r.shape),S=k[0],I=v?k[1]:k[2],T=v?k[2]:1,$=v?1:k[1],N=w.strides[0],A=v?w.strides[1]:w.strides[2],F=v?w.strides[2]:1,R=v?1:w.strides[1],E=n.data.get(a.dataId).values,D=n.data.get(r.dataId).values,L=w.values;for(let e=0;e<p.batchSize;++e){const t=e*S,n=e*N;for(let e=0;e<p.outHeight;++e){const s=n+e*A,a=e*p.strideHeight-y;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=p.inHeight)continue;const r=e*C[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=s+e*F,n=e*p.strideWidth-b;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=p.inWidth)continue;const a=i+s*T;let o=r+e*C[1];for(let e=0;e<p.inChannels;++e){const n=E[a+e*$];for(let e=0;e<p.outChannels;++e)L[t+e*R]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,L)}const Nf={kernelName:h.p2J,backendName:"cpu",kernelFunc:$f},Af={kernelName:h.rFm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;(0,Vd.C)([a,r],"conv2dBackpropFilter");const d=h.C0T.convertConv2DDataFormat(l),p=h.C0T.computeConv2DInfo(a.shape,c,i,1,o,u,!1,d),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:x}=p,b="channelsLast"===p.dataFormat,y=new h.ylz(p.filterShape,"float32"),v=p.padInfo.left,w=p.padInfo.top,k=n.data.get(a.dataId).values,C=n.data.get(r.dataId).values,S=new h.ylz(a.shape,a.dtype,k),I=new h.ylz(r.shape,r.dtype,C);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((w-e)/f)),n=Math.min(p.outHeight,(p.inHeight+w-e)/f);for(let s=0;s<x;++s){const a=Math.max(0,Math.ceil((v-s)/m)),r=Math.min(p.outWidth,(p.inWidth+v-s)/m);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*f-w;for(let e=a;e<r;++e){const n=s+e*m-v;l+=b?S.get(u,t,n,i)*I.get(u,c,e,o):S.get(u,i,t,n)*I.get(u,o,c,e)}}y.set(l,e,s,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Ff={kernelName:h.jfg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;(0,Vd.C)([a,r],"conv2dBackpropInput");const d=h.ZSL.computeStrides(r.shape),p=h.ZSL.computeStrides(a.shape);let f=h.C0T.convertConv2DDataFormat(u);const m=h.C0T.computeConv2DInfo(i,r.shape,o,1,l,c,!1,f),g=new h.ylz(m.inShape,"float32"),x=g.values,b=n.data.get(a.dataId).values,y=n.data.get(r.dataId).values,[v,w,k]=d,{batchSize:C,filterHeight:S,filterWidth:I,inChannels:T,inHeight:$,inWidth:N,outChannels:A,outHeight:F,outWidth:R,strideHeight:E,strideWidth:D}=m;f=m.dataFormat;const L=S-1-m.padInfo.top,z=I-1-m.padInfo.left,O="channelsLast"===f,_=g.strides[0],M=O?g.strides[1]:g.strides[2],P=O?g.strides[2]:1,W=O?1:g.strides[1],B=p[0],V=O?p[1]:p[2],U=O?p[2]:1,Z=O?1:p[1];for(let e=0;e<C;++e)for(let t=0;t<T;++t)for(let n=0;n<$;++n){const s=n-L,a=Math.max(0,Math.ceil(s/E)),r=Math.min(F,(S+s)/E);for(let i=0;i<N;++i){const o=i-z,l=Math.max(0,Math.ceil(o/D)),u=Math.min(R,(I+o)/D);let c=0;for(let n=a;n<r;++n){const a=n*E-s;for(let s=l;s<u;++s){const r=B*e+V*n+U*s,i=v*(S-1-a)+w*(I-1-(s*D-o))+k*t;for(let e=0;e<A;++e)c+=b[r+Z*e]*y[i+e]}}x[_*e+M*n+P*i+W*t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Rf={kernelName:h.A1h,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s;(0,Vd.C)([a,r],"conv3d");const u=h.C0T.computeConv3DInfo(a.shape,r.shape,i,l,o),{filterDepth:c,filterHeight:d,filterWidth:p,dilationDepth:f,dilationHeight:m,dilationWidth:g,padInfo:x}=u,b=x.front,y=x.left,v=x.top,w=new h.ylz(u.outShape,a.dtype),k=n.data.get(a.dataId).values,C=n.data.get(r.dataId).values,S=w.values,I=h.ZSL.computeStrides(a.shape),T=h.ZSL.computeStrides(r.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],a=e*u.strideDepth-b;for(let e=0;e<c;++e){const n=a+e*f;if(n<0||n>=u.inDepth)continue;const r=e*T[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-v;for(let e=0;e<d;++e){const s=n+e*m;if(s<0||s>=u.inHeight)continue;const a=r+e*T[1],o=i+s*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-y;for(let e=0;e<p;++e){const t=s+e*g;if(t<0||t>=u.inWidth)continue;const r=a+e*T[2],i=o+t*u.inChannels;let l=r;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)S[n+e]+=t*C[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Ef={kernelName:h.iGz,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s;(0,Vd.C)([a,r],"conv3dBackpropFilterV2");const u=h.ZSL.computeStrides(a.shape),c=h.ZSL.computeStrides(r.shape),d=h.C0T.computeConv3DInfo(a.shape,l,i,1,o),p=d.strideDepth,f=d.strideHeight,m=d.strideWidth,g=d.filterDepth,x=d.filterHeight,b=d.filterWidth,y=new h.ylz(d.filterShape,"float32"),v=y.values,[w,k,C,S]=y.strides,I=n.data.get(r.dataId).values,[T,$,N,A]=c,F=n.data.get(a.dataId).values,[R,E,D,L]=u,z=d.padInfo.front,O=d.padInfo.left,_=d.padInfo.top;for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((z-e)/p)),n=Math.min(d.outDepth,(d.inDepth+z-e)/p),s=e*w;for(let a=0;a<x;++a){const r=Math.max(0,Math.ceil((_-a)/f)),i=Math.min(d.outHeight,(d.inHeight+_-a)/f),o=a*k+s;for(let s=0;s<b;++s){const l=Math.max(0,Math.ceil((O-s)/m)),u=Math.min(d.outWidth,(d.inWidth+O-s)/m),c=s*C+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let g=0;for(let h=0;h<d.batchSize;++h){const d=h*R,x=h*T;for(let h=t;h<n;++h){const t=(e+h*p-z)*E+d,n=h*$+x;for(let e=r;e<i;++e){const r=(a+e*f-_)*D+t,i=e*N+n;for(let e=l;e<u;++e){const t=e*A+i;g+=F[(s+e*m-O)*L+r+o]*I[t+c]}}}}v[h+c]=g}}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Df={kernelName:h.gC7,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s;(0,Vd.C)([a],"conv3dBackpropInputV2");const u=h.ZSL.computeStrides(a.shape),c=h.ZSL.computeStrides(r.shape),d=h.C0T.computeConv3DInfo(l,r.shape,o,1,i),p=new h.ylz(d.inShape,"float32"),f=p.values,[m,g,x,b]=p.strides,y=n.data.get(a.dataId).values,[v,w,k,C]=u,S=n.data.get(r.dataId).values,[I,T,$,N]=c,{batchSize:A,filterDepth:F,filterHeight:R,filterWidth:E,inChannels:D,inDepth:L,inHeight:z,inWidth:O,outChannels:_,outDepth:M,outHeight:P,outWidth:W,strideDepth:B,strideHeight:V,strideWidth:U}=d,Z=F-1-d.padInfo.front,G=R-1-d.padInfo.top,K=E-1-d.padInfo.left;for(let e=0;e<A;++e)for(let t=0;t<D;++t)for(let n=0;n<L;++n){const s=n-Z,a=Math.max(0,Math.ceil(s/B)),r=Math.min(M,(F+s)/B);for(let i=0;i<z;++i){const o=i-G,l=Math.max(0,Math.ceil(o/V)),u=Math.min(P,(R+o)/V);for(let c=0;c<O;++c){const h=c-K,d=Math.max(0,Math.ceil(h/U)),p=Math.min(W,(E+h)/U);let A=0;for(let n=a;n<r;++n){const a=n*B-s;for(let s=l;s<u;++s){const r=s*V-o;for(let i=d;i<p;++i){const o=v*e+w*n+k*s+C*i,l=I*(F-1-a)+T*(R-1-r)+$*(E-1-(i*U-h))+N*t;for(let e=0;e<_;++e)A+=y[o+e]*S[l+e]}}}f[m*e+g*n+x*i+b*c+t]=A}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Lf=Gd(h.Mn0,e=>Math.cos(e)),zf={kernelName:h.Mn0,backendName:"cpu",kernelFunc:Lf},Of=Gd(h.MnK,e=>Math.cosh(e)),_f={kernelName:h.MnK,backendName:"cpu",kernelFunc:Of},Mf={kernelName:h.MRQ,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,d,p,f]=a.shape,m=r.shape[0],[g,x]=o,b=(0,h.ra8)([m,g,x,f],"float32"),y=n.data.get(r.dataId).values,v=n.data.get(i.dataId).values,w=n.data.get(a.dataId).values,k=h.ZSL.computeStrides(a.shape),C=h.ZSL.computeStrides(b.shape);for(let e=0;e<m;e++){const t=4*e,n=y[t],s=y[t+1],a=y[t+2],r=y[t+3],i=v[e];if(i>=c)continue;const o=g>1?(a-n)*(d-1)/(g-1):0,h=x>1?(r-s)*(p-1)/(x-1):0;for(let t=0;t<g;t++){const c=g>1?n*(d-1)+t*o:.5*(n+a)*(d-1);if(c<0||c>d-1)for(let n=0;n<x;n++)for(let s=0;s<f;s++){const a=s+n*C[2]+t*C[1]+e*C[0];b.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),o=c-n;for(let l=0;l<x;l++){const c=x>1?s*(p-1)+l*h:.5*(s+r)*(p-1);if(c<0||c>p-1){for(let n=0;n<f;n++){const s=n+l*C[2]+t*C[1]+e*C[0];b.values[s]=u}continue}const d=Math.floor(c),m=Math.ceil(c),g=c-d;for(let s=0;s<f;s++){let r=s+d*k[2]+n*k[1]+i*k[0];const u=w[r];r=s+m*k[2]+n*k[1]+i*k[0];const c=w[r];r=s+d*k[2]+a*k[1]+i*k[0];const h=w[r];r=s+m*k[2]+a*k[1]+i*k[0];const p=u+(c-u)*g,f=h+(w[r]-h)*g;r=s+l*C[2]+t*C[1]+e*C[0],b.values[r]=p+(f-p)*o}}}else for(let n=0;n<x;++n){const a=x>1?s*(p-1)+n*h:.5*(s+r)*(p-1);if(a<0||a>p-1){for(let s=0;s<f;s++){const a=s+n*C[2]+t*C[1]+e*C[0];b.values[a]=u}continue}const o=Math.round(a),l=Math.round(c);for(let s=0;s<f;s++){const a=s+o*k[2]+l*k[1]+i*k[0],r=s+n*C[2]+t*C[1]+e*C[0];b.values[r]=w[a]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Pf={kernelName:h.nY8,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;(0,Vd.C)(a,"cumsum");const l=h.C0T.getAxesPermutation([r],a.shape.length);let u=a;null!=l&&(u=Mp({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=h.C0T.getInnerMostAxes(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const d=(0,h.TuY)(u.dtype,"int32"),p=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(u.shape),d),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)p[n]=i?0:f[n];else{const s=g(e,t-1);p[n]=i?f[s]+p[s]:f[n]+p[s]}}const x=n.makeTensorInfo(u.shape,d,p);if(null!=l){const e=Mp({inputs:{x},backend:n,attrs:{perm:h.C0T.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(u),e}return x}},Wf={kernelName:h.wNW,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=df(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,e)}if(2===a.shape.length){const e=pf(n.bufferSync(a),n.bufferSync(r),i,o);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},Bf={kernelName:h.TMz,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:i}=s;h.ZSL.assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const o=a.shape[0],l=a.shape[1],u=a.shape[2],c=a.shape[3],d=l*r,p=u*r,f=c/(r*r),m=n.data.get(a.dataId).values,g=new Float32Array(o*d*p*f);let x=0;for(let e=0;e<o;++e)for(let t=0;t<d;++t){const n=Math.floor(t/r),s=t%r;for(let t=0;t<p;++t){const a=Math.floor(t/r),i=(s*r+t%r)*f;for(let t=0;t<f;++t){const s=t+i+c*(a+u*(n+l*e));g[x++]=m[s]}}}return n.makeTensorInfo([o,d,p,f],a.dtype,g)}};function Vf(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;(0,Vd.C)([a,r],"depthwiseConv2DNative");const c=h.ZSL.computeStrides(a.shape),d=h.ZSL.computeStrides(r.shape);let p=l;null==p&&(p=[1,1]),h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const f=h.C0T.computeConv2DInfo(a.shape,r.shape,i,p,o,u,!0),{filterHeight:m,filterWidth:g,dilationHeight:x,dilationWidth:b,padInfo:y}=f,v=y.left,w=y.top,k=f.outChannels/f.inChannels,C=new h.ylz(f.outShape,a.dtype),S=n.data.get(a.dataId).values,I=n.data.get(r.dataId).values,T=C.values;for(let e=0;e<f.batchSize;++e){const t=e*c[0],n=e*C.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*C.strides[1],a=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=a+e*x;if(n<0||n>=f.inHeight)continue;const r=e*d[0],i=t+n*c[1];for(let e=0;e<f.outWidth;++e){const t=s+e*C.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const a=r+e*d[1],o=i+s*f.inChannels;let l=t,u=a;for(let e=0;e<f.inChannels;++e){const t=S[o+e];for(let e=0;e<k;++e)T[l+e]+=t*I[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(C.shape,C.dtype,C.values)}const Uf={kernelName:h.tGH,backendName:"cpu",kernelFunc:Vf},Zf={kernelName:h.X$8,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;(0,Vd.C)([a,r],"depthwiseConv2dNativeBackpropFilter");const d=h.C0T.computeConv2DInfo(a.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,x=new h.ylz(d.filterShape,"float32"),b=d.padInfo.left,y=d.padInfo.top,v=d.outChannels/d.inChannels,w=n.data.get(a.dataId).values,k=new h.ylz(a.shape,a.dtype,w),C=n.data.get(r.dataId).values,S=new h.ylz(r.shape,r.dtype,C);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((y-e)/p)),n=Math.min(d.outHeight,(d.inHeight+y-e)/p);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((b-s)/f)),r=Math.min(d.outWidth,(d.inWidth+b-s)/f);for(let i=0;i<d.outChannels;++i){const o=Math.trunc(i/v),l=i%v;let u=0;for(let l=0;l<d.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-y;for(let e=a;e<r;++e){const n=s+e*f-b;u+=k.get(l,t,n,o)*S.get(l,c,e,i)}}x.set(u,e,s,o,l)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Gf={kernelName:h.nVu,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;(0,Vd.C)([a,r],"depthwiseConv2DNativeBackpropInput");const d=h.ZSL.computeStrides(a.shape),p=h.ZSL.computeStrides(r.shape),f=h.C0T.computeConv2DInfo(c,r.shape,i,o,l,u,!0),m=new h.ylz(f.inShape,"float32"),g=m.values,[x,b,y]=m.strides,v=n.data.get(a.dataId).values,[w,k,C]=d,S=n.data.get(r.dataId).values,[I,T,$]=p,{batchSize:N,filterHeight:A,filterWidth:F,inChannels:R,inHeight:E,inWidth:D,outChannels:L,outHeight:z,outWidth:O,strideHeight:_,strideWidth:M}=f,P=A-1-f.padInfo.top,W=F-1-f.padInfo.left,B=L/R;for(let e=0;e<N;++e)for(let t=0;t<R;++t)for(let n=0;n<E;++n){const s=n-P,a=Math.max(0,Math.ceil(s/_)),r=Math.min(z,(A+s)/_);for(let i=0;i<D;++i){const o=i-W,l=Math.max(0,Math.ceil(o/M)),u=Math.min(O,(F+o)/M);let c=0;for(let n=a;n<r;++n){const a=n*_-s;for(let s=l;s<u;++s){const r=w*e+k*n+C*s,i=I*(A-1-a)+T*(F-1-(s*M-o))+$*t;for(let e=0;e<B;++e)c+=v[r+(t*B+e)]*S[i+e]}}g[x*e+b*n+y*i+t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},Kf={kernelName:h.ORI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=h.ZSL.sizeFromShape(s.shape),r=n.data.get(s.dataId).values,i=(0,h.ra8)([a,a],s.dtype),o=i.values;for(let e=0;e<r.length;e++)o[e*a+e]=r[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Hf={kernelName:h.jxD,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:r,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,d=l.data.get(a.dataId).values,p=a.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:x,outHeight:b,outWidth:y,padInfo:v,strideHeight:w,strideWidth:k,filterHeight:C,filterWidth:S,dilationHeight:I,dilationWidth:T,outShape:$}=h.C0T.computeDilation2DInfo(s.shape,a.shape,r,i,"NHWC",o),N=h.ZSL.sizeFromShape($),A=$.length,F=h.ZSL.getArrayFromDType(s.dtype,N);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*w-v.top;for(let r=0;r<y;++r){const i=r*k-v.left;for(let o=0;o<x;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<C;++t){const r=n+t*I;if(r>=0&&r<m)for(let n=0;n<S;++n){const f=i+n*T;if(f>=0&&f<g){const i=h.ZSL.locToIndex([e,r,f,o],c,h.ZSL.computeStrides(s.shape)),m=h.ZSL.locToIndex([t,n,o],p,h.ZSL.computeStrides(a.shape)),g=u[i]+d[m];g>l&&(l=g)}}}F[h.ZSL.locToIndex([e,t,r,o],A,h.ZSL.computeStrides($))]=l}}}return{dataId:l.write(h.ZSL.toTypedArray(F,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},Qf={kernelName:h.pk0,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=h.ZSL.toNestedArray(s.shape,u.data.get(s.dataId).values),d=h.ZSL.toNestedArray(a.shape,u.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:C,dilationHeight:S,dilationWidth:I,outShape:T}=h.C0T.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",l);h.ZSL.assert(r.rank===T.length,()=>`Error in ${h.pk0}, dy must have the same rank as output ${T.length}, but got ${r.rank}`);const $=h.ZSL.toNestedArray(T,u.data.get(r.dataId).values),N=h.ZSL.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let s=0;s<b;++s){const a=s*w-y.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<C;++n){const u=a+n*I;if(u>=0&&u<m){const a=c[e][s][u][r]+d[t][n][r];a>i&&(i=a,o=t,l=n)}}}N[o][l][r]+=$[e][t][s][r]}}}return{dataId:u.write(h.ZSL.toTypedArray(N,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},jf={kernelName:h.bP9,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=h.ZSL.toNestedArray(s.shape,u.data.get(s.dataId).values),d=h.ZSL.toNestedArray(a.shape,u.data.get(a.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:w,filterHeight:k,filterWidth:C,dilationHeight:S,dilationWidth:I,outShape:T}=h.C0T.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",l);h.ZSL.assert(r.rank===T.length,()=>`Error in ${h.bP9}, dy must have the same rank as output ${T.length}, but got ${r.rank}`);const $=h.ZSL.toNestedArray(T,u.data.get(r.dataId).values),N=h.ZSL.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let s=0;s<b;++s){const a=s*w-y.left;for(let r=0;r<g;++r){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){const s=n+t*S;if(s>=0&&s<f)for(let n=0;n<C;++n){const u=a+n*I;if(u>=0&&u<m){const a=c[e][s][u][r]+d[t][n][r];a>i&&(i=a,o=s,l=u)}}}N[e][o][l][r]+=$[e][t][s][r]}}}return{dataId:u.write(h.ZSL.toTypedArray(N,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},qf=Yd((e,t)=>e*t),Xf=vp((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n})),Jf=yp(h.xu7,qf,Xf),Yf={kernelName:h.xu7,backendName:"cpu",kernelFunc:Jf};function em(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;let o;(0,Vd.C)(a,"sum"),o="bool"===a.dtype?xp({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):jd({inputs:{x:a},backend:n});const l=o.shape.length,u=h.ZSL.parseAxisParam(r,o.shape),c=h.C0T.getAxesPermutation(u,l);let d=u,p=o;null!=c&&(p=Mp({inputs:{x:o},backend:n,attrs:{perm:c}}),d=h.C0T.getInnerMostAxes(d.length,l)),h.C0T.assertAxesAreInnerMostDims("sum",d,p.shape.length);const[f,m]=h.C0T.computeOutAndReduceShapes(p.shape,d);let g=fp(n,f,h.C0T.upcastType(p.dtype,"int32"));const x=h.ZSL.sizeFromShape(m),b=n.data.get(g.dataId).values,y=n.data.get(p.dataId).values;for(let e=0;e<b.length;++e){const t=e*x;let n=0;for(let e=0;e<x;++e)n+=y[t+e];b[e]=n}if(i){const e=g;g=Ip({inputs:{x:g},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),g}const tm={kernelName:h.WuN,backendName:"cpu",kernelFunc:em},nm={kernelName:h.Qgm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:i,summedDims:o,idDims:l}=h.C0T.decodeEinsumEquation(a,r.length);h.C0T.checkEinsumDimSizes(i.length,l,r);const{path:u,steps:c}=h.C0T.getEinsumComputePath(o,l),d=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=h.C0T.getEinsumPermutation(f,l[t]);let a;h.C0T.isIdentityPermutation(e)?a=r[t]:(a=Mp({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),m.push(a));const i=a.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);h.ZSL.arraysEqual(a.shape,i)||(a=Ip({inputs:{x:a},backend:n,attrs:{shape:i}}),m.push(a)),null===p?p=a:(p=Jf({inputs:{a,b:p},backend:n}),m.push(p))}e<d-1&&(u[e]>=0&&(p=em({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},sm={kernelName:h.rsH,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;(0,Vd.C)([s,a],"eluGrad");const r=new Float32Array(h.ZSL.sizeFromShape(a.shape)),i=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];r[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",r)}},am=Yd((e,t)=>e===t?1:0),rm=yp(h.BRl,am,null,"bool"),im={kernelName:h.BRl,backendName:"cpu",kernelFunc:rm},om=h.C0T.ERF_P,lm=h.C0T.ERF_A1,um=h.C0T.ERF_A2,cm=h.C0T.ERF_A3,hm=h.C0T.ERF_A4,dm=h.C0T.ERF_A5,pm=Gd(h._s9,e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+om*n);return t*(1-((((dm*s+hm)*s+cm)*s+um)*s+lm)*s*Math.exp(-n*n))}),fm={kernelName:h._s9,backendName:"cpu",kernelFunc:pm},mm=op(e=>Math.exp(e)),gm=Kd(h.ox3,mm,"float32"),xm={kernelName:h.ox3,backendName:"cpu",kernelFunc:gm};function bm(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:r}=s,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(h.ZSL.assert(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+r+1),o.splice(l,0,1),Ip({inputs:{x:a},backend:n,attrs:{shape:o}})}const ym={kernelName:h.ybN,backendName:"cpu",kernelFunc:bm},vm=op(e=>Math.expm1(e)),wm=Kd(h.ybj,vm),km={kernelName:h.ybj,backendName:"cpu",kernelFunc:wm},Cm=Yd((e,t)=>e/t),Sm=yp(h.sDr,Cm),Im={kernelName:h.sDr,backendName:"cpu",kernelFunc:Sm},Tm=Yd((e,t)=>e-t),$m=vp((e,t,n,s)=>({real:e-n,imag:t-s})),Nm=yp(h.PbM,Tm,$m),Am={kernelName:h.PbM,backendName:"cpu",kernelFunc:Nm};function Fm(e,t,n){const s=e.shape,a=s[0],r=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[a,r],c=h.ZSL.sizeFromShape(u),d=h.ZSL.getTypedArrayFromDType("float32",c),p=h.ZSL.getTypedArrayFromDType("float32",c);for(let e=0;e<a;e++){const s=(0,cf.di)({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,r]}}),a=(0,cf.di)({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,r]}}),i=dp({inputs:{real:s,imag:a},backend:n}),{real:u,imag:c}=Rm(i,t,n),f=h.C0T.mergeRealAndImagArrays(u,c);for(let t=0;t<r;t++){const n=h.C0T.getComplexWithIndex(f,t);d[e*r+t]=n.real,p[e*r+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",d),m=n.makeTensorInfo(u,"float32",p),g=dp({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Rm(e,t,n){const s=h.ZSL.sizeFromShape(e.shape),a=n.data.get(e.dataId),r=n.data.get(a.complexTensorInfos.real.dataId).values,i=n.data.get(a.complexTensorInfos.imag.dataId).values;if((o=s)&o-1){const e=function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let r=0,i=0;for(let s=0;s<t;s++){const o=h.C0T.exponent(a*s,t,n),l=h.C0T.getComplexWithIndex(e,s);r+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(r/=t,i/=t),h.C0T.assignToTypedArray(s,r,i,a)}return s}(h.C0T.mergeRealAndImagArrays(r,i),s,t);return h.C0T.splitRealAndImagArrays(e)}{const a=Em(r,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",a.real),t=n.makeTensorInfo(o,"float32",a.imag),r=n.makeTensorInfo([],"float32",h.ZSL.createScalarValue(s,"float32")),i=jd({inputs:{x:r},backend:n}),l=Im.kernelFunc({inputs:{a:e,b:r},backend:n}),u=Im.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:d}}return a}var o}function Em(e,t,n,s,a){if(1===n)return{real:e,imag:t};const r=h.C0T.mergeRealAndImagArrays(e,t),i=n/2,o=h.C0T.complexWithEvenIndex(r),l=o.real,u=o.imag,c=[l.length],d=a.makeTensorInfo(c,"float32",l),p=a.makeTensorInfo(c,"float32",u),f=dp({inputs:{real:d,imag:p},backend:a}),m=h.C0T.complexWithOddIndex(r),g=m.real,x=m.imag,b=[g.length],y=a.makeTensorInfo(b,"float32",g),v=a.makeTensorInfo(b,"float32",x),w=dp({inputs:{real:y,imag:v},backend:a}),k=Em(l,u,i,s,a),C=k.real,S=k.imag,I=[C.length],T=a.makeTensorInfo(I,"float32",C),$=a.makeTensorInfo(I,"float32",S),N=dp({inputs:{real:T,imag:$},backend:a}),A=Em(g,x,i,s,a),F=A.real,R=A.imag,E=[F.length],D=a.makeTensorInfo(E,"float32",F),L=a.makeTensorInfo(E,"float32",R),z=dp({inputs:{real:D,imag:L},backend:a}),O=h.C0T.exponents(n,s),_=[O.real.length],M=a.makeTensorInfo(_,"float32",O.real),P=a.makeTensorInfo(_,"float32",O.imag),W=dp({inputs:{real:M,imag:P},backend:a}),B=Jf({inputs:{a:W,b:z},backend:a}),V=Cp({inputs:{a:N,b:B},backend:a}),U=Nm({inputs:{a:N,b:B},backend:a}),Z=mp({inputs:{input:V},backend:a}),G=mp({inputs:{input:U},backend:a}),K=Cf({inputs:{input:V},backend:a}),H=Cf({inputs:{input:U},backend:a}),Q=If({inputs:[Z,G],backend:a,attrs:{axis:0}}),j=If({inputs:[K,H],backend:a,attrs:{axis:0}}),q=a.data.get(Q.dataId).values,X=a.data.get(j.dataId).values;return a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(y),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(N),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(M),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(Z),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(Q),a.disposeIntermediateTensorInfo(j),{real:q,imag:X}}const Dm={kernelName:h.rGP,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=h.ZSL.sizeFromShape(s.shape),r=s.shape[s.shape.length-1],i=Ip({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=Fm(i,!1,n),l=Ip({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Lm(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:r}=n,i=r||h.ZSL.inferDtype(a),o=h.ZSL.getArrayFromDType(i,h.ZSL.sizeFromShape(s));return function(e,t){e.fill(t)}(o,a),t.makeTensorInfo(s,i,o)}const zm={kernelName:h.SQl,backendName:"cpu",kernelFunc:Lm},Om={kernelName:h.BxF,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,r=h.ZSL.getTypedArrayFromDType(s.dtype,h.ZSL.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=a.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let a=0;a<u;a++){const i=Math.round(l-e-1),o=t+n+s+a;let h=c[o];i>=0&&i<l&&(h=c[t+n+i*u+a]),r[o]=h}}}}return{dataId:a.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},_m=op(e=>Math.floor(e)),Mm=Kd(h.ZgB,_m),Pm={kernelName:h.ZgB,backendName:"cpu",kernelFunc:Mm},Wm=Yd((e,t)=>Math.floor(e/t)),Bm=yp(h.ElG,Wm,null,"int32"),Vm={kernelName:h.ElG,backendName:"cpu",kernelFunc:Bm},Um={kernelName:h.aAr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=$f({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=Cp({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=hp(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}},Zm={kernelName:h.T7M,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=Vf({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=m;m=Cp({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=hp(n,m,p,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function Gm(e,t,n,s,a,r,i,o,l){const u=(0,h.ra8)([s,r],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<a;t++){const r=e[n*a+t];c+=r*i[t],s.push(r)}if(c<0||c>=l/r)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<r;e++)u.values[n*r+e]=t.get(...t.indexToLoc(c*r+e))}return u}const Km={kernelName:h.O4G,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=h.ZSL.sizeFromShape(s.shape),i=a.shape,o=i[i.length-1],[l,u,c,d]=h.C0T.prepareAndValidate(s,a);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=Gm(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,u,o,c,d,s.shape,r);return n.makeTensorInfo(l,s.dtype,p.values)}};function Hm(e,t,n){const s=(0,h.ra8)(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],i=a[2],o=t.locToIndex([r,i]);a[2]=t.values[o];const l=e.locToIndex(a);s.values[n]=e.values[l]}return s}const Qm={kernelName:h.mxL,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s;(0,Vd.C)([a,r],"gatherV2");const l=h.ZSL.parseAxisParam(i,a.shape)[0],u=n.data.get(r.dataId).values,c=a.shape[l];for(let e=0;e<u.length;++e){const t=u[e];h.ZSL.assert(t<=c-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`)}let d=o;null==o&&(d=0);const p=h.ZSL.sizeFromShape(r.shape),f=h.C0T.segment_util.collectGatherOpShapeInfo(a,r,l,d),m=Ip({inputs:{x:a},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Ip({inputs:{x:r},backend:n,attrs:{shape:[f.batchSize,p/f.batchSize]}}),x=[f.batchSize,f.outerSize,p/f.batchSize,f.sliceSize],b=n.bufferSync(g),y=Hm(n.bufferSync(m),b,x);return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.makeTensorInfo(f.outputShape,y.dtype,y.values)}},jm=Yd((e,t)=>e>t?1:0),qm=yp(h.XhZ,jm,null,"bool"),Xm={kernelName:h.XhZ,backendName:"cpu",kernelFunc:qm},Jm=Yd((e,t)=>e>=t?1:0),Ym=yp(h.lLS,Jm,null,"bool"),eg={kernelName:h.lLS,backendName:"cpu",kernelFunc:Ym},tg={kernelName:h.OAQ,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=h.ZSL.sizeFromShape(s.shape),r=s.shape[s.shape.length-1],i=Ip({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=Fm(i,!0,n),l=Ip({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},ng=Gd(h.gIW,e=>Number.isFinite(e)?1:0,"bool"),sg={kernelName:h.gIW,backendName:"cpu",kernelFunc:ng},ag=Gd(h.E3$,e=>Math.abs(e)===1/0?1:0,"bool"),rg={kernelName:h.E3$,backendName:"cpu",kernelFunc:ag},ig=Gd(h.iPs,e=>Number.isNaN(e)?1:0,"bool"),og={kernelName:h.iPs,backendName:"cpu",kernelFunc:ig},lg=Yd((e,t)=>e<t?1:0),ug=yp(h.mIA,lg,null,"bool"),cg={kernelName:h.mIA,backendName:"cpu",kernelFunc:ug},hg=Yd((e,t)=>e<=t?1:0),dg=yp(h.CwD,hg,null,"bool"),pg={kernelName:h.CwD,backendName:"cpu",kernelFunc:dg};function fg(e,t,n){const s=(t-e)/(n-1),a=h.ZSL.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const mg={kernelName:h.mnI,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=fg(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},gg=op(e=>Math.log(e)),xg=Kd(h.tG8,gg),bg={kernelName:h.tG8,backendName:"cpu",kernelFunc:xg},yg=Gd(h.Cg$,e=>Math.log1p(e)),vg={kernelName:h.Cg$,backendName:"cpu",kernelFunc:yg},wg=Yd((e,t)=>e&&t),kg=yp(h.RUm,wg,null,"bool"),Cg={kernelName:h.RUm,backendName:"cpu",kernelFunc:kg},Sg=Gd(h.nZd,e=>e?0:1,"bool"),Ig={kernelName:h.nZd,backendName:"cpu",kernelFunc:Sg},Tg=Yd((e,t)=>e||t),$g=yp(h.LXA,Tg,null,"bool"),Ng={kernelName:h.LXA,backendName:"cpu",kernelFunc:$g},Ag={kernelName:h.jM4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s;(0,Vd.C)(a,"LRN");const u=a.shape[3],c=u-1,d=n.data.get(a.dataId).values,p=h.ZSL.sizeFromShape(a.shape),f=new Float32Array(p);function m(e){const t=e%u;let n=e-t+Math.max(0,t-r);const s=e-t+Math.min(t+r,c);let a=0;for(;n<=s;n++){const e=d[n];a+=e*e}return a}for(let e=0;e<p;e++){const t=m(e),n=d[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(a.shape,a.dtype,f)}},Fg={kernelName:h.ToN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;(0,Vd.C)(i,"LRNGrad");const d=h.ZSL.sizeFromShape(i.shape),p=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(r.dataId).values,x=new Float32Array(d),b=d;for(let e=0;e<b;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(m[e],2);a=u*a+l;for(let t=n;t<s;t++){let n=-2*u*c*m[t]*g[e]/a;e===t&&(n+=Math.pow(a,-c)),n*=f[e],x[t]+=n}}return n.makeTensorInfo(i.shape,a.dtype,x)}};function Rg(e,t,n,s){const a=h.ZSL.getTypedArrayFromDType(s,h.ZSL.sizeFromShape(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>r)&&(r=t)}a[n]=r}return a}function Eg(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=n;let l=a.shape;const u=l.length,c=h.ZSL.parseAxisParam(r,l);let d=c;const p=h.C0T.getAxesPermutation(d,u);let f=o.data.get(a.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];f=_p(f,l,a.dtype,p,e),d=h.C0T.getInnerMostAxes(d.length,u),l=e}(0,Vd.C)(a,"max"),h.C0T.assertAxesAreInnerMostDims("max",d,u);const[m,g]=h.C0T.computeOutAndReduceShapes(l,d),x=Rg(f,h.ZSL.sizeFromShape(g),m,a.dtype),b=o.write(x,m,a.dtype);let y=m;return i&&(y=h.C0T.expandShapeToKeepDim(m,c)),{dataId:b,shape:y,dtype:a.dtype}}const Dg={kernelName:h.VAI,backendName:"cpu",kernelFunc:Eg},Lg=Yd((e,t)=>Math.max(e,t)),zg=yp(h.LDN,Lg),Og={kernelName:h.LDN,backendName:"cpu",kernelFunc:zg},_g={kernelName:h.t3d,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;(0,Vd.C)(a,"maxPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.C0T.computePool2DInfo(a.shape,r,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&h.ZSL.arraysEqual(u.inShape,u.outShape))c=jd({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=h.ZSL.computeStrides(a.shape),s=tf(e,a.shape,a.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}},Mg={kernelName:h.ySp,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;(0,Vd.C)(a,"maxPool3d");const c=h.C0T.computePool3DInfo(a.shape,r,i,1,o,l,u),d=sf(n.data.get(a.dataId).values,a.shape,a.dtype,h.ZSL.computeStrides(a.shape),c,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},Pg={kernelName:h.cHb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;(0,Vd.C)([a,r],"maxPool3DGrad");const c=h.C0T.computePool3DInfo(r.shape,i,o,1,l,u),d=function(e,t){const n=(0,h.ra8)(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,r=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.front,f=t.padInfo.top,m=t.padInfo.left;for(let h=0;h<t.batchSize;++h)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){const b=x*s-p;let y=b;for(;y<0;)y+=i;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*a-f;let p=u;for(;p<0;)p+=o;const w=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const f=a*r-m;let k=f;for(;k<0;)k+=l;const C=Math.min(t.inWidth,d+f);let S=Number.NEGATIVE_INFINITY,I=-1;for(let t=y;t<v;t+=i){const n=t-b;for(let s=p;s<w;s+=o){const a=s-u;for(let r=k;r<C;r+=l){const i=r-f,o=e.get(h,t,s,r,g);o>=S&&(S=o,I=n*c*d+a*c+i)}}}n.set(I,h,x,s,a,g)}}}return n}(n.bufferSync(r),c),p=c.strideDepth,f=c.strideHeight,m=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,y=c.effectiveFilterDepth,v=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=y-1-c.padInfo.front,C=w-1-c.padInfo.left,S=v-1-c.padInfo.top,I=(0,h.ra8)(r.shape,"float32"),T=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-k,i=s-S,o=a-C;let l=0;for(let n=0;n<y;n+=g){const s=(r+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let a=0;a<v;a+=x){const r=(i+a)/f;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let i=0;i<w;i+=b){const u=(o+i)/m;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const h=y*v*w-1-d.get(e,s,r,u,t)===n*v*w+a*w+i?1:0;0!==h&&(l+=T.get(e,s,r,u,t)*h)}}}I.set(l,e,n,s,a,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},Wg={kernelName:h.RXX,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;(0,Vd.C)([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=h.C0T.computePool2DInfo(o.shape,l,u,1,c,d),f=n.data.get(o.dataId).values,m=(0,h.ra8)(p.outShape,o.dtype,nf(f,o.shape,o.dtype,p).values),g=p.strideHeight,x=p.strideWidth,b=p.dilationHeight,y=p.dilationWidth,v=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,C=v-1-p.padInfo.top,S=(0,h.ra8)(o.shape,"float32"),I=n.data.get(a.dataId).values,T=(0,h.ra8)(a.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const a=n-C,r=s-k;let i=0;for(let n=0;n<v;n+=b){const s=(a+n)/g;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let a=0;a<w;a+=y){const o=(r+a)/x;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=v*w-1-m.get(e,s,o,t)===n*w+a?1:0;0!==l&&(i+=T.get(e,s,o,t)*l)}}S.set(i,e,n,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},Bg={kernelName:h.TL8,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:i,includeBatchInIndex:o}=t,l=n;(0,Vd.C)(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=h.C0T.computePool2DInfo(s.shape,a,r,[1,1],i),[d,p]=function(e,t,n,s,a){const r=tf(e,0,n,h.ZSL.computeStrides(t),a,"max"),i=nf(e,t,n,a,!0,s);return[r.values,i.values]}(u,s.shape,s.dtype,o,c),f=l.write(d,c.outShape,s.dtype),m=l.write(p,c.outShape,s.dtype);return[{dataId:f,shape:c.outShape,dtype:s.dtype},{dataId:m,shape:c.outShape,dtype:"int32"}]}},Vg={kernelName:h.g5A,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=h.ZSL.parseAxisParam(r,a.shape),l=h.C0T.computeOutAndReduceShapes(a.shape,o)[1],u=h.ZSL.sizeFromShape(l),c=[],d=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(d);const p=xp({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});c.push(p);const f=Sm({inputs:{a:p,b:d},backend:n});c.push(f);const m=em({inputs:{x:f},backend:n,attrs:{axis:r,keepDims:i}});return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}},Ug={kernelName:h.lNG,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;(0,Vd.C)(a,"min");const o=h.ZSL.parseAxisParam(r,a.shape);let l=o;const u=h.C0T.getAxesPermutation(l,a.shape.length);let c=a;null!=u&&(c=Mp({inputs:{x:a},backend:n,attrs:{perm:u}}),l=h.C0T.getInnerMostAxes(l.length,a.shape.length)),h.C0T.assertAxesAreInnerMostDims("min",l,c.shape.length);const[d,p]=h.C0T.computeOutAndReduceShapes(c.shape,l),f=h.ZSL.sizeFromShape(p),m=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(d),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];(Number.isNaN(s)||s<n)&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const x=n.makeTensorInfo(d,c.dtype,m);if(i){const e=Ip({inputs:{x},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(d,o)}});return n.disposeIntermediateTensorInfo(x),e}return x}},Zg=Yd((e,t)=>Math.min(e,t)),Gg=yp(h.LG0,Zg),Kg={kernelName:h.LG0,backendName:"cpu",kernelFunc:Gg},Hg={kernelName:h.x7F,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,mode:i}=s;(0,Vd.C)(a,"mirrorPad");const o=r.map((e,t)=>e[0]+a.shape[t]+e[1]),l=r.map(e=>e[0]),u=r.map((e,t)=>e[0]+a.shape[t]),c="reflect"===i?0:1,d=n.data.get(a.dataId).values,p=a.shape.length,f=h.ZSL.computeStrides(a.shape),m=h.ZSL.sizeFromShape(o),g=o.length,x=h.ZSL.computeStrides(o),b=h.ZSL.getTypedArrayFromDType(a.dtype,m);for(let e=0;e<m;e++){let t=h.ZSL.indexToLoc(e,g,x);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map((e,t)=>e-l[t]);const n=h.ZSL.locToIndex(t,p,f);b[e]=d[n]}return{dataId:n.write(b,o,a.dtype),shape:o,dtype:a.dtype}}},Qg=Yd((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),jg=yp(h.BLA,Qg),qg={kernelName:h.BLA,backendName:"cpu",kernelFunc:jg};var Xg=n(7546);function Jg(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=a.shape.length;let o=r;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=h.ZSL.parseAxisParam([o],a.shape),u=Eg({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=h.C0T.expandShapeToKeepDim(u.shape,l),d=Ip({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Nm({inputs:{a,b:d},backend:n}),f=gm({inputs:{x:p},backend:n}),m=em({inputs:{x:f},backend:n,attrs:{axis:l,keepDims:!1}}),g=Ip({inputs:{x:m},backend:n,attrs:{shape:c}}),x=Sm({inputs:{a:f,b:g},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),x}const Yg={kernelName:h.rFG,backendName:"cpu",kernelFunc:Jg},ex={kernelName:h.WT3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s;(0,Vd.C)(a,"multinomial");const l=o?a:Jg({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],d=n.data.get(l.dataId).values,p=[u,r],f=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=d[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+d[t+e];const s=Xg.alea(i.toString()),a=e*r;for(let e=0;e<r;++e){const t=s();f[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[a+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",f)}};function tx(e,t,n){const s=h.ZSL.createScalarValue(-1,n);return qf([],t,s,e,n)}const nx={kernelName:h.l0G,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;(0,Vd.C)(s,"neg");const a=n.data.get(s.dataId).values,[r,i]=tx(a,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,r)}},sx=h.kpo.nonMaxSuppressionV3Impl,ax={kernelName:h.SDM,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;(0,Vd.C)(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=sx(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},rx=h.kpo.nonMaxSuppressionV4Impl,ix={kernelName:h.Zl4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;(0,Vd.C)(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:d,validOutputs:p}=rx(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},ox=h.kpo.nonMaxSuppressionV5Impl,lx={kernelName:h.e0f,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;(0,Vd.C)(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,d=i,p=o,f=l,m=u,{selectedIndices:g,selectedScores:x}=ox(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}},ux=Yd((e,t)=>e!==t?1:0),cx=yp(h.ylV,ux,null,"bool"),hx={kernelName:h.ylV,backendName:"cpu",kernelFunc:cx},dx={kernelName:h.urI,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s;(0,Vd.C)(a,"oneHot");const l=h.ZSL.sizeFromShape(a.shape),u=new Float32Array(l*r);u.fill(o);const c=n.data.get(a.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<r&&(u[e*r+c[e]]=i);return n.makeTensorInfo([...a.shape,r],"int32",u)}};function px(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=mp({inputs:{input:s},backend:n}),t=px({inputs:{x:e},backend:n}),a=Cf({inputs:{input:s},backend:n}),r=px({inputs:{x:a},backend:n}),i=dp({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return Lm({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const fx={kernelName:h.xJ3,backendName:"cpu",kernelFunc:px},mx={kernelName:h.LWX,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=mp({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Cf({inputs:{input:a},backend:s}),i=px({inputs:{x:r},backend:s}),o=dp({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return Lm({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function gx(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return bm({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,i=t[0].dtype;t.forEach(e=>{h.ZSL.assertShapesMatch(r,e.shape,"All tensors passed to stack must have matching shapes"),h.ZSL.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=If({inputs:t.map(e=>{const t=bm({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}const xx={kernelName:h.mM$,backendName:"cpu",kernelFunc:gx},bx={kernelName:h.ODT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s;(0,Vd.C)(a,"pad");const o=r.map((e,t)=>e[0]+a.shape[t]+e[1]),l=r.map(e=>e[0]),u=n.data.get(a.dataId).values,c=h.ZSL.sizeFromShape(a.shape),d=a.shape.length,p=h.ZSL.computeStrides(a.shape),f=h.ZSL.sizeFromShape(o),m=o.length,g=h.ZSL.computeStrides(o),x=h.ZSL.getTypedArrayFromDType(a.dtype,f);0!==i&&x.fill(i);for(let e=0;e<c;e++){const t=h.ZSL.indexToLoc(e,d,p).map((e,t)=>e+l[t]);x[h.ZSL.locToIndex(t,m,g)]=u[e]}return{dataId:n.write(x,o,a.dtype),shape:o,dtype:a.dtype}}},yx=Yd((e,t)=>Math.pow(e,t)),vx=yp(h.pyJ,yx),wx={kernelName:h.pyJ,backendName:"cpu",kernelFunc:vx};function kx(e,t,n,s){const[a,r]=h.C0T.computeOutAndReduceShapes(e,s),i=(0,h.TuY)(t,"int32"),o=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(a),i),l=h.ZSL.sizeFromShape(r);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:a,outDtype:i}}const Cx={kernelName:h.kdj,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;(0,Vd.C)(a,"prod");const o=a.shape.length,l=h.ZSL.parseAxisParam(r,a.shape),u=h.C0T.getAxesPermutation(l,o);let c=l,d=a;const p=[];null!=u&&(d=Mp({inputs:{x:a},backend:n,attrs:{perm:u}}),p.push(d),c=h.C0T.getInnerMostAxes(c.length,o));const f=n.data.get(d.dataId).values,{outVals:m,outShape:g,outDtype:x}=kx(d.shape,d.dtype,f,c);let b=g;return i&&(b=h.C0T.expandShapeToKeepDim(g,l)),p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(b,x,m)}};var Sx=n(2610);const Ix={kernelName:h.Q6t,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:i}=n,o=(0,Sx.q)(s,a,i,r);return t.makeTensorInfo([o.length],r,o)}},Tx=Gd(h.huO,e=>1/e),$x={kernelName:h.huO,backendName:"cpu",kernelFunc:Tx},Nx={kernelName:h.hgw,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;(0,Vd.C)(a,"resizeBilinear");const l=h.ZSL.computeStrides(a.shape),[u,c]=o,[d,p,f,m]=a.shape,g=n.data.get(a.dataId).values,x=new Float32Array(h.ZSL.sizeFromShape([d,u,c,m])),b=[r&&u>1?p-1:p,r&&c>1?f-1:f],y=[r&&u>1?u-1:u,r&&c>1?c-1:c];let v=0;const w=b[0]/y[0],k=b[1]/y[1];for(let e=0;e<d;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],d=o+r*l[2],p=u+r*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],r=t+(g[d+e]-t)*s,i=r+(n+(g[p+e]-n)*s-r)*a;x[v++]=i}}}return n.makeTensorInfo([d,u,c,m],"float32",x)}},Ax={kernelName:h.FCQ,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;(0,Vd.C)([r,a],"resizeBilinearGrad");const o=h.ZSL.computeStrides(a.shape),[l,u,c,d]=a.shape,[,p,f]=r.shape,m=new Float32Array(l*u*c*d),g=[i&&p>1?u-1:u,i&&f>1?c-1:c],x=[i&&p>1?p-1:p,i&&f>1?f-1:f],b=g[0]/x[0],y=g[1]/x[1],v=n.data.get(r.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*b,s=Math.floor(n),a=Math.min(Math.ceil(n),u-1),r=t+s*o[1],i=t+a*o[1],l=n-s,h=1-l;for(let e=0;e<f;e++){const t=e*y,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,p=r+n*o[2],f=r+s*o[2],g=i+n*o[2],x=i+s*o[2],b=h*u,k=h*a,C=l*u,S=l*a;for(let e=0;e<d;e++){const t=v[w++];m[p+e]+=t*b,m[f+e]+=t*k,m[g+e]+=t*C,m[x+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,d],"float32",m)}},Fx={kernelName:h.jOE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;(0,Vd.C)(a,"resizeNearestNeighbor");const l=h.ZSL.computeStrides(a.shape),[u,c]=o,[d,p,f,m]=a.shape,g=n.data.get(a.dataId).values,x=new Float32Array(d*u*c*m),b=[r&&u>1?p-1:p,r&&c>1?f-1:f],y=[r&&u>1?u-1:u,r&&c>1?c-1:c],v=b[0]/y[0],w=b[1]/y[1];let k=0;for(let e=0;e<d;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?v*(e+.5):v*e;let s=Math.min(p-1,r?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const a=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(f-1,r?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=a+n*l[2];for(let e=0;e<m;e++){const t=g[s+e];x[k++]=t}}}}return n.makeTensorInfo([d,u,c,m],a.dtype,x)}},Rx={kernelName:h.XQy,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;(0,Vd.C)([r,a],"resizeNearestNeighborGrad");const o=h.ZSL.computeStrides(a.shape),l=h.ZSL.computeStrides(r.shape),[u,c,d,p]=a.shape,[,f,m]=r.shape,g=new Float32Array(u*c*d*p),x=n.data.get(r.dataId).values,b=[i&&f>1?c-1:c,i&&m>1?d-1:d],y=[i&&f>1?f-1:f,i&&m>1?m-1:m],v=b[0]/y[0],w=b[1]/y[1],k=1/v,C=1/w,S=2*Math.ceil(k)+2,I=2*Math.ceil(C)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),a=Math.floor(s-S/2);for(let s=0;s<d;s++){const r=n+s*o[2],u=Math.floor(s*C),h=Math.floor(u-I/2);for(let n=0;n<p;n++){let o=0;for(let r=0;r<S;r++){const u=r+a;if(u<0||u>=f)continue;const p=t+u*l[1],g=u*v;if(e===Math.min(c-1,i?Math.round(g):Math.floor(g)))for(let e=0;e<I;e++){const t=e+h;if(t<0||t>=m)continue;const a=p+t*l[2],r=t*w;s===Math.min(d-1,i?Math.round(r):Math.floor(r))&&(o+=x[a+n])}}g[r+n]=o}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},Ex={kernelName:h.D7i,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s;(0,Vd.C)(a,"reverse");const i=a.shape.length,o=h.ZSL.parseAxisParam(r,a.shape);if(0===i)return jd({inputs:{x:a},backend:n});const l=new h.ylz(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach(e=>n[e]=a.shape[e]-1-n[e]),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Dx={kernelName:h.BK4,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=h.ZSL.getTypedArrayFromDType(s.dtype,h.ZSL.sizeFromShape(s.shape)),[u,c,d,p]=s.shape,[f,m]=h.C0T.getImageCenter(i,c,d),g=Math.sin(a),x=Math.cos(a),b=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*d*c*p;for(let e=0;e<c;e++){const n=e*(d*p);for(let s=0;s<d;s++){const a=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],h=o[2],y=o[1];let v=(h-f)*x-(y-m)*g,w=(h-f)*g+(y-m)*x;v=Math.round(v+f),w=Math.round(w+m);let k=r;"number"!=typeof r&&(k=3===i?255:r[i]),v>=0&&v<d&&w>=0&&w<c&&(k=b[t+w*(d*p)+v*p+i]),l[t+n+a+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Lx=Gd(h.hVg,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),zx={kernelName:h.hVg,backendName:"cpu",kernelFunc:Lx},Ox=op(e=>1/Math.sqrt(e)),_x=Kd(h.TOR,Ox),Mx={kernelName:h.TOR,backendName:"cpu",kernelFunc:_x};function Px(e,t,n,s,a,r,i,o,l,u){const c=[s/a,a],d=e.values,p=t.values;if(0===s)return(0,h.ra8)(n,t.dtype);const f=(0,h.ra8)(c,t.dtype);f.values.fill(l);for(let e=0;e<r;e++){const r=[];let l=0;for(let t=0;t<i;t++){const n=d[e*i+t];r.push(n),l+=n*o[t]}if(l<0||l>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)u?f.values[l*a+n]+=p[e*a+n]:f.values[l*a+n]=0===t.rank?p[0]:p[e*a+n]}return f}const Wx={kernelName:h.pJc,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=h.C0T.calculateShapes(r,a,i),p=Px(n.bufferSync(a),n.bufferSync(r),i,d,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}},Bx={kernelName:h.l6P,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t;(0,Vd.C)([s,a,r],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=(0,h.TuY)(a.dtype,r.dtype),d=h.ZSL.makeZerosTypedArray(h.ZSL.sizeFromShape(a.shape),c);let p=0;const f=0===i||i>1||1===a.shape.length?1:h.ZSL.sizeFromShape(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?d[p++]=l[e]:d[p++]=u[e];return n.makeTensorInfo(a.shape,c,d)}},Vx=h.C0T.SELU_SCALEALPHA,Ux=h.C0T.SELU_SCALE,Zx=Gd(h.u$b,e=>e>=0?Ux*e:Vx*(Math.exp(e)-1)),Gx={kernelName:h.u$b,backendName:"cpu",kernelFunc:Zx},Kx=Gd(h.YVe,e=>e<0?-1:e>0?1:0),Hx={kernelName:h.YVe,backendName:"cpu",kernelFunc:Kx},Qx=Gd(h.hql,e=>Math.sin(e)),jx={kernelName:h.hql,backendName:"cpu",kernelFunc:Qx},qx=Gd(h.J3C,e=>Math.sinh(e)),Xx={kernelName:h.J3C,backendName:"cpu",kernelFunc:qx},Jx=Math.log(1.1920928955078125e-7)+2,Yx=Gd(h.Fin,e=>{const t=e>-Jx,n=e<Jx,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a}),eb={kernelName:h.Fin,backendName:"cpu",kernelFunc:Yx},tb={kernelName:h.A8B,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:i}=s;(0,Vd.C)([a],"spaceToBatchND");const o=h.ZSL.sizeFromShape(r),l=[[0,0]];l.push(...i);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=bx.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),c=h.C0T.getReshaped(u.shape,r,o,!1),d=h.C0T.getPermuted(c.length,r.length,!1),p=h.C0T.getReshapedPermuted(u.shape,r,o,!1),f=Ip({inputs:{x:u},backend:n,attrs:{shape:c}}),m=Mp({inputs:{x:f},backend:n,attrs:{perm:d}}),g=Ip({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function nb(e,t,n,s,a,r,i){const o=t[0],l=r[0],u=new Array(l),c=new Array(o),d=t[1];if(0===l){if(0!==o)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${o}`);return[h.ZSL.getArrayFromDType(n,0),[0,d],h.ZSL.getArrayFromDType(a,0),u,c]}let p=!0,f=0;const m=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*d];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=l)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${l}`);++m[n],p=p&&n>=f,f=n}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];u[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,d],n,u,c]}{const t=m[l-1],r=h.ZSL.getArrayFromDType(n,t*d),p=h.ZSL.getArrayFromDType(a,t),f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*d],a=f[n],i=(0===n?0:m[n-1])+a;f[n]++;for(let n=0;n<d;++n)r[i*d+n]=e[t*d+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e)if(0===f[e]){const t=0===e?0:m[e-1];r[t*d+0]=e;for(let e=1;e<d;++e)r[t*d+e]=0;p[t]=i}return[r,[t,d],p,u,c]}}const sb={kernelName:h.C8s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=n.data.get(i.dataId).values[0],[h,d,p,f,m]=nb(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function ab(e,t,n,s,a){const r=h.ZSL.sizeFromShape(s),i=t[0],o=a.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,l.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(r/u);if(u*e!==r)throw new Error(`Input to reshape is a SparseTensor with ${r}\n          dense values, but the requested shape requires a multiple of ${u}. inputShape=${s} outputShape= ${l}`);l[c]=e}const d=h.ZSL.sizeFromShape(l);if(d!==r)throw new Error(`Input to reshape is a tensor with ${r} dense values, but the requested shape has ${d}. inputShape=${s} outputShape=${l}`);const p=s.length,f=[];if(p>0){f[p-1]=1;for(let e=p-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}const m=[];if(o>0){m[o-1]=1;for(let e=o-2;e>=0;--e)m[e]=m[e+1]*l[e+1]}const g=h.ZSL.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<p;++s)n+=e[t*p+s]*f[s];for(let e=0;e<o;++e)g[t*o+e]=Math.trunc(n/m[e]),n%=m[e]}return[g,[i,o],l]}const rb={kernelName:h.BoJ,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.data.get(a.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(r.dataId).values),[u,c,h]=ab(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};function ib(e,t,n,s,a,r=!1,i=0){const o=s.length;if(o!==a.length)throw new Error("segmentIds and indices should have same size.");const l=[t[0],e.length/t[0]],u=l[1],c=o>0?a[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=c;const p=d.reduce((e,t)=>e*t,1),f=h.ZSL.getArrayFromDType(n,p);if(0===o)return c>0&&f.fill(i),[f,d];if(c<=0)throw new Error("segment ids must be >= 0");let m=0,g=1,x=0,b=a[m];for(;;){let t=0;if(g<o){if(t=a[g],b===t){++g;continue}if(b>=t)throw new Error("segment ids are not increasing")}if(b<0||b>=c)throw new Error(`Segment id ${b} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);b>x&&f.fill(i,x*u,b*u);for(let t=m;t<g;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(`Bad: indices[${t}] == ${s[t]} out of range [0, ${l[0]})`);for(let t=0;t<u;t++)f[b*u+t]+=e[n*u+t]}if(r)for(let e=0;e<u;e++)f[b*u+e]/=g-m;if(m=g,++g,x=b+1,b=t,g>o)break}return x<c&&f.fill(i,x*u,c*u),[f,d]}const ob={kernelName:h.L6G,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${r.shape}`);const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=ib(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},lb={kernelName:h.DvZ,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${r.shape}`);const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=ib(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},ub={kernelName:h.jgd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:p}=h.C0T.calculateShapes(r,a,o),f=Px(n.bufferSync(a),n.bufferSync(r),o,p,c,u,l,d,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,f.dtype,f.values)}},cb={kernelName:h.Blb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=h.ZSL.parseAxisParam(i,a.shape)[0],l=h.C0T.prepareSplitSize(a,r,o),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map(e=>{const t=[...c];t[o]=e;const s=(0,cf.di)({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s})}},hb=op(e=>Math.sqrt(e)),db=Gd(h.dFH,e=>Math.sqrt(e)),pb={kernelName:h.dFH,backendName:"cpu",kernelFunc:db},fb={kernelName:h.M6A,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;(0,Vd.C)(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},mb=Yd((e,t)=>{const n=e-t;return n*n}),gb=yp(h.Ddj,mb),xb={kernelName:h.Ddj,backendName:"cpu",kernelFunc:gb},bb=Gd(h.pnw,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),yb={kernelName:h.pnw,backendName:"cpu",kernelFunc:bb};function vb(e,t,n,s){const a=(0,h.ra8)(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),i=new Array(r.length);for(let e=0;e<i.length;e++)i[e]=r[e]*n[e]+s[e];a.set(t.get(...i),...r)}return a}const wb={kernelName:h.UcO,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s;(0,Vd.C)(a,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:b,begin:y,end:v,strides:w}=h.Kro.sliceInfo(a.shape,r,i,o,l,u,c,d,p);let k;if(g)k=Ip({inputs:{x:a},backend:n,attrs:{shape:m}});else if(x||b){h.ZSL.assert(a.shape.length>=1,()=>`Input must have rank at least 1, got: ${a.shape.length}`);const e=h.Kro.computeOutShape(y,v,w),t=(0,cf.di)({inputs:{x:a},backend:n,attrs:{begin:y,size:e}});k=Ip({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=vb(f,n.bufferSync(a),w,y);k=n.makeTensorInfo(m,e.dtype,e.values)}return k}};class kb{constructor(e,t,n,s,a,r){this.separator=h.ZSL.encodeString(e),this.nGramWidths=t,this.leftPad=h.ZSL.encodeString(n),this.rightPad=h.ZSL.encodeString(s),this.padWidth=a,this.preserveShort=r}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,a,r){for(let i=0;i<a;++i){const o=this.getPadWidth(r),l=Math.max(0,o-i),u=Math.max(0,o-(a-(i+1))),c=r-(l+u),h=t+(l>0?0:i-o);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(d);const p=n[s+i];let f=0;const m=e=>e.forEach(e=>p[f++]=e);for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<s;++a){let s=t[a]>=e;if(s=s&&t[a]<=n,!s)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,r=h.ZSL.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=a;++e)r[e]=0;return[e,r]}r[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach(e=>{s+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===s&&(s=1),r[e]=r[e-1]+s}const i=new Array(r[a]);for(let n=0;n<a;++n){const s=t[n];let a=r[n];if(this.nGramWidths.forEach(r=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,r);this.createNGrams(e,s,i,a,l,r),a+=l}),this.preserveShort&&a===r[n]){const r=t[n+1]-t[n];if(0===r)continue;const o=r+2*this.padWidth,l=1;this.createNGrams(e,s,i,a,l,o)}}return[i,r]}}function Cb(e,t,n,s,a,r,i,o){return new kb(n,s,a,r,i,o).compute(e,t)}const Sb={kernelName:h.YAb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=Cb(d,p,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function Ib(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let r=e.indexOf(a);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||s.push(t),r=(e=e.subarray(r+1)).indexOf(a)}return void(n&&0===e.length||s.push(e))}let a=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(a,r);n&&0===t.length||s.push(t),a=r+1}}function Tb(e,t,n){const s=e.length,a=[];let r=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=a.length;Ib(e[l],t,n,a);const u=a.length-s;o[l]=u,r+=u,i=Math.max(i,u)}const l=h.ZSL.getArrayFromDType("int32",2*r),u=new Array(r),c=[s,i];let d=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*d]=e,l[2*d+1]=t,u[d]=a[d],++d;return[l,u,c]}const $b={kernelName:h.iW0,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=Tb(o,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function Nb(e,t){const n=h.ZSL.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=h.ZSL.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const Ab={kernelName:h.$jE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=Nb(n.data.get(r.dataId).values,a);return n.makeTensorInfo(r.shape,"int32",i)}},Fb=Gd(h.oFs,e=>Math.tan(e)),Rb={kernelName:h.oFs,backendName:"cpu",kernelFunc:Fb},Eb=Gd(h.iuW,e=>Math.tanh(e)),Db={kernelName:h.iuW,backendName:"cpu",kernelFunc:Eb};function Lb(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=(0,h.ra8)(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}const zb={kernelName:h.FAs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;(0,Vd.C)(a,"tile");const i=Lb(n.bufferSync(a),r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},Ob=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function _b(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const a=s-n+1,r=t-n+1,i=Math.log(a),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(a-o)/a)*Math.sign(r-a/2);_b(e,t,Math.max(n,Math.floor(t-r*o/a+l)),Math.min(s,Math.floor(t+(a-r)*o/a+l)))}const a=e[t];let r=n,i=s;for(h.ZSL.swap(e,n,t),Ob(e[s],a)>0&&h.ZSL.swap(e,n,s);r<i;){for(h.ZSL.swap(e,r,i),r++,i--;Ob(e[r],a)<0;)r+=1;for(;Ob(e[i],a)>0;)i-=1}0===Ob(e[n],a)?h.ZSL.swap(e,n,i):(i+=1,h.ZSL.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function Mb(e,t,n,s,a){const r=t[t.length-1],[i,o]=[e.length/r,r],l=h.ZSL.getTypedArrayFromDType(n,i*s),u=h.ZSL.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o);let i=new Array(r.length);r.forEach((e,t)=>i[t]={value:e,index:t}),s<i.length&&(_b(i,s),i=i.slice(0,s)),a&&i.sort(Ob);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,d[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[(0,h.ra8)(c,n,l),(0,h.ra8)(c,"int32",u)]}const Pb={kernelName:h.TBb,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s;(0,Vd.C)(a,"topk");const o=n.data.get(a.dataId).values,[l,u]=Mb(o,a.shape,a.dtype,r,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Wb={kernelName:h.dLy,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,d,p,f]=a.shape,[m,g]=null!=u?u:[d,p],x=[c,m,g,f],b=h.ZSL.computeStrides(a.shape),y=b[0],v=b[1],w=b[2],k=h.ZSL.getTypedArrayFromDType(a.dtype,h.ZSL.sizeFromShape(x));k.fill(l);const C=s.data.get(a.dataId).values,S=s.data.get(r.dataId).values;for(let e=0;e<c;++e){const t=1===r.shape[0]?S:S.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let a=0;a<f;++a){let r;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,h=(t[3]*s+t[4]*n+t[5])/u,f=Bb(c,p,o),m=Bb(h,d,o);switch(i){case"nearest":r=Ub(C,d,p,y,v,w,e,m,f,a,l);break;case"bilinear":r=Zb(C,d,p,y,v,w,e,m,f,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}k[e*y+n*v+s*w+a]=r}return s.makeTensorInfo(x,a.dtype,k)}return{dataId:s.write(k,x,a.dtype),shape:a.shape,dtype:a.dtype}}};function Bb(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return h.ZSL.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return h.ZSL.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return h.ZSL.clamp(0,e,t-1)}(e,t);default:return e}}function Vb(e,t,n,s,a,r,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*a+l*r+u]:c}function Ub(e,t,n,s,a,r,i,o,l,u,c){return Vb(e,t,n,s,a,r,i,Math.round(o),Math.round(l),u,c)}function Zb(e,t,n,s,a,r,i,o,l,u,c){const h=Math.floor(o),d=Math.floor(l),p=h+1,f=d+1;return(p-o)*((f-l)*Vb(e,t,n,s,a,r,i,h,d,u,c)+(l-d)*Vb(e,t,n,s,a,r,i,h,f,u,c))+(o-h)*((f-l)*Vb(e,t,n,s,a,r,i,p,d,u,c)+(l-d)*Vb(e,t,n,s,a,r,i,p,f,u,c))}function Gb(e,t,n,s){const a=h.ZSL.parseAxisParam(t,n)[0],r=[1,n[0],1];for(let e=0;e<a;e++)r[0]*=n[e];r[1]=n[a];for(let e=a+1;e<n.length;e++)r[2]*=n[e];const i={},o=new Int32Array(n[a]),l=new h.ylz(r,s,e),u=[],c=1===r[0]&&1===r[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const d=r.slice();d[1]=Object.keys(i).length;const p=new h.ylz(d,s);u.forEach((e,t)=>{for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)p.set(l.get(n,e,s),n,t,s)});const f=n.slice();return f[a]=d[1],{outputValues:p.values,outputShape:f,indices:o}}const Kb={kernelName:h.EwU,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;(0,Vd.C)(r,"unique");const i=s.data.get(r.dataId).values,{outputValues:o,outputShape:l,indices:u}=Gb(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},Hb={kernelName:h.dXR,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a.shape.length,o=a.shape[r],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(i).fill(0),h=a.shape.slice();h[r]=1;const d=new Array(o);for(let e=0;e<d.length;e++){c[r]=e;const t=(0,cf.di)({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});d[e]=Ip({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},Qb={kernelName:h.pPe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s;(0,Vd.C)(a,"unsortedSegmentSum");const o=[],l=[],u=a.shape.length-r.shape.length;let c=r;for(let e=0;e<u;++e){const t=bm({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=h.ZSL.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),r=rm({inputs:{a:s,b:c},backend:n}),i=xp({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),u=Jf({inputs:{a:i,b:a},backend:n}),d=em({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(d),l.push(s),l.push(r),l.push(i),l.push(u),l.push(d)}const d=gx({inputs:o,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),d}},jb=[Ap,Rp,Dp,zp,Sp,Op,Wp,Bp,Vp,Up,Gp,Hp,jp,Jp,ef,af,rf,of,lf,Np,uf,hf,ff,mf,bp,bf,vf,pp,wf,Tf,Af,Ff,Nf,Ef,Df,Rf,zf,_f,Mf,Pf,Wf,Bf,Uf,Zf,Gf,Kf,Hf,jf,Qf,Im,nm,Qd,sm,im,fm,xm,ym,km,Dm,zm,Om,Pm,Vm,Um,Zm,Km,Qm,Xm,eg,qd,tg,Sf,sg,rg,og,Jd,cg,pg,mg,bg,vg,Cg,Ig,Ng,Ag,Fg,Og,_g,Mg,Pg,Wg,Bg,Dg,Vg,Ug,Kg,Hg,qg,ex,Yf,nx,ax,ix,lx,hx,dx,mx,xx,bx,wx,np,Cx,Ix,gp,$x,ap,ip,Tp,Nx,Ax,Fx,Rx,Ex,Dx,zx,Mx,Wx,Bx,Gx,cp,Hx,jx,Xx,cf.lv,Yg,eb,tb,sb,rb,ob,lb,ub,cb,pb,fb,xb,yb,wb,Sb,$b,Ab,Am,tm,Rb,Db,zb,Pb,Pp,Wb,Kb,Hb,Qb,fx];for(const e of jb)(0,h.tAK)(e);const qb={},Xb={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Jb(e){if(!(e in qb)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete qb[e]},!1),1===e?t.getContext("webgl",Xb)||t.getContext("experimental-webgl",Xb):t.getContext("webgl2",Xb)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;qb[e]=t}const t=qb[e];return t.isContextLost()?(delete qb[e],Jb(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),qb[e])}var Yb,ey,ty;function ny(e,t){return[t,e]}function sy(e){const t=h.ZSL.sizeFromShape(e),n=Math.ceil(t/4);return h.ZSL.sizeToSquarishShape(n)}function ay(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function ry(e,t){const n=e;let s,a,r,i,o,l,u,c,d,p;return 2===(0,h._K2)().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,r=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,d=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,a=e.RGBA,r=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,d=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:d,textureTypeFloat:p}}function iy(e,t){const n=t();return(0,h._K2)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function oy(e){return!!((0,h._K2)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function ly(e,t){return gy(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Yb||(Yb={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(ey||(ey={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ty||(ty={}));const uy=/ERROR: [0-9]+:([0-9]+):/g;function cy(e,t){if(iy(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function hy(e,t,n,s,a,r,i){const o=e.getAttribLocation(t,n);return-1!==o&&(iy(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),iy(e,()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,r,i)),iy(e,()=>e.enableVertexAttribArray(o)),!0)}function dy(e,t,n,s){iy(e,()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),iy(e,()=>e.activeTexture(e.TEXTURE0+n)),iy(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,s)),iy(e,()=>e.uniform1i(n,s))}function py(e,t,n){iy(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),iy(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function fy(e,t){iy(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),iy(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function my(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function gy(e,t,n){const s=iy(e,()=>t());if(null==s)throw new Error(n);return s}function xy(e,t=2){return h.ZSL.sizeFromShape(e.slice(0,e.length-t))}function by(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function yy(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[xy(e),...by(e)]),t}function vy(e){return e%2==0}function wy(e,t){if(e=e.slice(-2),t=t.slice(-2),h.ZSL.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(vy(n)&&vy(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&vy(e[0])&&vy(t[0])}let ky,Cy;function Sy(e,t){return null!=e.getExtension(t)}function Iy(e){try{if(null!=Jb(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Ty(e){const t=ry(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function $y(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&h.ZSL.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Ny=(0,h._K2)();function Ay(){let e,t,n,s,a,r,i,o,l,u;return 2===(0,h._K2)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",r="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",r="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:r,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function Fy(e,t,n="index"){const s=h.ZSL.computeStrides(t);return s.map((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`).join("")}function Ry(e,t,n="index"){const s=h.ZSL.computeStrides(t);return s.map((t,a)=>`int ${e[a]} = ${n} / outShapeStrides[${a}]; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`).join("")}function Ey(e){const t=h.ZSL.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ny.registerFlag("HAS_WEBGL",()=>Ny.getNumber("WEBGL_VERSION")>0),Ny.registerFlag("WEBGL_VERSION",()=>Iy(2)?2:Iy(1)?1:0),Ny.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Ny.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Ny.get("WEBGL_VERSION")),Ny.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Ny.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Ny.registerFlag("WEBGL_PACK",()=>Ny.getBool("HAS_WEBGL")),Ny.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_CLIP",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_PACK_REDUCE",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_CONV_IM2COL",()=>Ny.getBool("WEBGL_PACK")),Ny.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==ky){const t=Jb(e);ky=t.getParameter(t.MAX_TEXTURE_SIZE)}return ky}(Ny.getNumber("WEBGL_VERSION"))),Ny.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==Cy){const t=Jb(e);Cy=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Cy)}(Ny.getNumber("WEBGL_VERSION"))),Ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=Ny.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Jb(e);return t=Sy(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Sy(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),Ny.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ny.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!h.eMq.isMobile()),Ny.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=Jb(e);if(1===e){if(!Sy(t,"OES_texture_float"))return!1}else if(!Sy(t,"EXT_color_buffer_float"))return!1;return Ty(t)}(Ny.getNumber("WEBGL_VERSION"))),Ny.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Ny.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ny.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Ny.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=Jb(e);if(1!==e){if(Sy(t,"EXT_color_buffer_float"))return Ty(t);const e="EXT_color_buffer_half_float";if(Sy(t,e)){const n=t.getExtension(e);return function(e,t){const n=ry(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(a),r}(t,n)}return!1}return!!Sy(t,"OES_texture_float")&&!!Sy(t,"WEBGL_color_buffer_float")&&Ty(t)}(Ny.getNumber("WEBGL_VERSION"))),Ny.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=Ny.getNumber("WEBGL_VERSION"))&&null!=Jb(e).fenceSync;var e}),Ny.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ny.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Ny.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),Ny.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>h.eMq.isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),Ny.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Ny.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Ny.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Ny.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);const Dy="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Ly}=h.C0T;function zy(e,t,n){const s=[];if(e.forEach(e=>{const t=h.ZSL.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Gy(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const a=s.join("\n"),r=e.map(e=>function(e,t,n=!1,s){let a="";a+=n?_y(e,s):Oy(e,s);const r=e.shapeInfo.logicalShape,i=t.logicalShape;return r.length<=i.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=Ly(e.shapeInfo.logicalShape,t.logicalShape),l=Zy(i),u=i-r;let c;const d=["x","y","z","w","u","v"];c=0===r?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${d[e+u]} = 0;`).join("\n");let p="";p=i<2&&r>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${d[t+u]}`).join(", ");let f="return outputValue;";const m=1===h.ZSL.sizeFromShape(e.shapeInfo.logicalShape),g=1===h.ZSL.sizeFromShape(t.logicalShape);if(1!==r||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=r-2,t=r-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&h.ZSL.arraysEqual(i,r))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Zy(l),c=Ly(e.shapeInfo.logicalShape,t.logicalShape),d=l-o;let p;const f=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${f[e+d]} = 0;`).join("\n");let m="";return m=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${f[t+d]}`).join(", "),`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${m});\n    }\n  `}(e,t)),a}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),i=t.texShape,o=Ay(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${My}\n    ${Py}\n    ${Wy}\n  `}(o);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(h.ZSL.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let i=r,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return h.ZSL.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Ry(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=Fy(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Ry(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Fy(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=Fy(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Fy(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(d+=By),[d,l,c,a,u,r,n.userCode].join("\n")}function Oy(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=Vy(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Uy(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],i=a[1];if(1===i&&1===r)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=Vy(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===r?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape;if(null!=r&&h.ZSL.arraysEqual(n,r)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=r[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=h.ZSL.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${Oy(Ky(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${Hy(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Uy(e)}\n      }\n    `;const u=r[0],c=r[1],d=Vy(s);return 1===c?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${d};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=h.ZSL.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${Oy(Ky(e,u),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${Hy(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${i}, 1)));\n        ${Uy(e)}\n      }\n    `;const c=e.shapeInfo.texShape,d=c[0],p=c[1],f=e.shapeInfo.flatOffset;if(p===r&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${d}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${d}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const m=Vy(s);return t?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${r} + col * ${i} + depth + ${m};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${d}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[3],i=n[2]*r,o=n[1]*i,{newShape:l,keptDims:u}=h.ZSL.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Oy(Ky(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${Hy(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${r}, 1)));\n        ${Uy(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1],m=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,x=`int stride0 = ${s}Shape[1] * stride1;`;if(f===o&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(f===r&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const b=Vy(s);return t?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${x}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${f}, index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],r=t[3]*a,i=t[2]*r,o=t[1]*i,{newShape:l,keptDims:u}=h.ZSL.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Oy(Ky(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Hy(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${r}, ${a})) +\n          depth3;\n        ${Uy(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${r} +\n          depth2 * ${a} + depth3 + ${Vy(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:r}=h.ZSL.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Oy(Ky(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Hy(t,r)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Uy(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,f=p[0],m=p[1];if(m===c&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===i&&null==d)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${Vy(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function _y(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Ay().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=Ay();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=r[0],o=r[1],l=Ay();if(null!=r&&h.ZSL.arraysEqual(n,r))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const s=[1,2],r=["b","row","col"];return`\n        ${_y(Ky(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${Hy(r,s)});\n        }\n      `}const o=Ay();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=Ay();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const r=e.shapeInfo.logicalShape,i=r.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(r[i-1]/2);let d=h*Math.ceil(r[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)p=`int b${e}, `+p,d*=r[i-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const My="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Py="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Wy="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",By="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Vy(e){return`offset${e}`}function Uy(e){const t=e.name,n=h.ZSL.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Zy(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Gy(e,t,n){const{newShape:s,keptDims:a}=h.ZSL.squeezeShape(t),r=t.length,i=e&&3===r&&1===t[0],o=i?t.slice(1):s,l=!e&&r>1&&!h.ZSL.arraysEqual(t,n)&&s.length<r||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:a}}function Ky(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Hy(e,t){return t.map(t=>e[t]).join(", ")}function Qy(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,a=t[n],r=a.shape;if(!h.ZSL.arraysEqual(s,r))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${r} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!h.ZSL.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function jy(e){return(0,h._K2)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class qy{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Yb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Ay();this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Ry(["r","c","d"],e):Fy(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Xy{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Yb.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Ay();this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Ry(["r","c","d"],e):Fy(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Jy{constructor(e){this.variableNames=["A"],this.outTexUsage=ey.DOWNLOAD;const t=Ay();this.outputShape=e,this.userCode=`\n      ${Dy}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Yy{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ey.DOWNLOAD;const t=Ay();this.outputShape=e,this.userCode=`\n      ${Dy}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ev{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Ay();this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ey(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class tv{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Ay();this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const r=2*t+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ey(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${a};\n        }\n    `}}function nv(e,t,n,s,a,r){!function(e,t){const n=(0,h._K2)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return gy(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return iy(e,()=>e.bindTexture(o,i)),iy(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),iy(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),iy(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),iy(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),iy(e,()=>e.texImage2D(o,0,s,t,n,0,a,r,null)),iy(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function sv(e){return e.internalFormatFloat}function av(e){return e.internalFormatHalfFloat}function rv(e){return e.downloadTextureFormat}function iv(e){return e.internalFormatPackedFloat}function ov(e){return e.internalFormatPackedHalfFloat}class lv{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,h._K2)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){qb[e]=t}(t,e)):this.gl=Jb(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===(0,h._K2)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=ly(this.gl,e),Sy(this.gl,t))this.textureHalfFloatExtension=ly(this.gl,t);else if((0,h._K2)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Sy(this.gl,s))this.colorBufferHalfFloatExtension=ly(this.gl,s);else if((0,h._K2)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Sy(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Sy(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=gy(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return iy(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),iy(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=gy(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return iy(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),iy(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return gy(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=ry(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,h._K2)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;iy(e,()=>e.finish()),iy(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),iy(e,()=>e.deleteFramebuffer(this.framebuffer)),iy(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),iy(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),iy(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=ny(t,n);return nv(e,a,r,sv(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=ny(t,n);return nv(e,a,r,av(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=ny(t,n);return nv(e,a,r,rv(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){iy(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?iy(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):iy(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),iy(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,r){let i,o,l;iy(e,()=>e.bindTexture(e.TEXTURE_2D,t)),a instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=r.internalFormatPackedFloat),i.set(a),iy(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i)),iy(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=ay(t,n);return nv(e,a,r,ov(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=ay(t,n);return nv(e,a,r,iv(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(fy(this.gl,this.framebuffer),this.outputTexture=null),iy(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,s){const[a,r]=ny(t,n),i=new Uint8Array(t*n*4);return iy(e,()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return function(e,t,n,s,a,r,i){const o=e,l=new Float32Array(function(e,t){const[n,s]=ay(e,t);return n*s*4}(r,i));return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,l),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n){const s=e.createBuffer();iy(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const a=16*t*n;return iy(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),iy(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),iy(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,h._K2)().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const s=new Float32Array(t*n*4);return iy(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s)),s}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=gy(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(iy(e,()=>e.shaderSource(n,t)),iy(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=uy.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),r=a.length.toString().length+2,i=a.map((e,t)=>h.ZSL.rightPad((t+1).toString(),r)+e);let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${h.ZSL.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e);null==this.vertexShader&&(this.vertexShader=function(e){const t=Ay();return function(e,t){const n=gy(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(iy(e,()=>e.shaderSource(n,t)),iy(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const s=function(e){return gy(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return iy(t,()=>t.attachShader(s,this.vertexShader)),iy(t,()=>t.attachShader(s,n)),function(e,t){if(iy(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&cy(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return iy(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),hy(e,t,"clipSpacePos",n,3,20,0)&&hy(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&iy(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&cy(this.gl,this.program),iy(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return gy(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),iy(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),dy(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=ay(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&cy(this.gl,this.program),my(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),iy(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),iy(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ly(this.gl,2===(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await h.ZSL.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||h.ZSL.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),py(this.gl,e,this.framebuffer),this.debug&&my(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(py(this.gl,this.outputTexture,this.framebuffer),this.debug&&my(this.gl)):fy(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;py(s,e,this.framebuffer),this.debug&&my(s),this.outputTexture=e,iy(s,()=>s.viewport(0,0,t,n)),iy(s,()=>s.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),iy(this.gl,()=>this.gl.scissor(e,t,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{mx:uv,XI:cv,Nk:hv,YG:dv,hH:pv,z3:fv,sG:mv,uM:gv,vS:xv,qB:bv,GG:yv,rq:vv,lg:wv,WR:kv,cu:Cv,GE:Sv,px:Iv,jC:Tv,He:$v,hE:Nv,BF:Av,Dk:Fv,cl:Rv,_B:Ev,qy:Dv,Zy:Lv,zv,dH:Ov,HS:_v,yH:Mv,l3:Pv,z9:Wv,x6:Bv,eW:Vv,GK:Uv,SP:Zv,f6:Gv,dl:Kv,Dw:Hv,xT:Qv,_X:jv,wz:qv}=c;function Xv(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Jv(e,t){return 1===t?[e]:Xv(e,t)}class Yv{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Jv("rc",t),s=Zy(t),a=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let a=e-2;a<e;a++)s+=`${n[a]} >= ${t[a]}`,a<e-1&&(s+="||");return s}(t,e,n),r=function(e,t,n,s){if(1===e)return"";const a=s.slice(-2);return`\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let a=0;a<=1;a++){let r=`${0===s?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<e;n++)r=`${t[t.length-1-n]},`+r;n.push(r)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class ew{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,a;this.userCode=`\n      ${s=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map(e=>`${t}[${e}]`),a=new Array(n-1);a[n-2]=s[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${s[e+1]})`;return a}(e.map((e,t)=>t),t);return s.map((t,a)=>`int ${e[a]} = ${n} / ${s[a]}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${s[a]}`:`index -= ${e[a]} * ${s[a]}`};`).join("")}(["r","c","d"],"inputShape"):Fy(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ey(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class tw{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=sw(t,n),a=aw(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=nw(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let i;return s===ty.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===ty.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===ty.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===ty.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===ty.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=sw(n,s),r=aw(t,a,s);r in this.freeTextures||(this.freeTextures[r]=[]);const i=nw(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=(0,h._K2)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[r].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[r],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function nw(e,t,n,s,a){const r=function(e,t){switch(e){case ty.PACKED_2X2_FLOAT32:return iv(t);case ty.PACKED_2X2_FLOAT16:return ov(t);case ty.UNPACKED_FLOAT32:return sv(t);case ty.UNPACKED_FLOAT16:return av(t);case ty.PACKED_4X1_UNSIGNED_BYTE:return rv(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(a){const[t,n]=ay(e[0],e[1]);i=t*n}else{const[t,n]=ny(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,r);return i*o}function sw(e,t){if(e===ey.UPLOAD)return ty.PACKED_2X2_FLOAT32;if(e===ey.RENDER||null==e)return function(e){return(0,h._K2)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?ty.PACKED_2X2_FLOAT32:ty.UNPACKED_FLOAT32:e?ty.PACKED_2X2_FLOAT16:ty.UNPACKED_FLOAT16}(t);if(e===ey.DOWNLOAD||e===ey.PIXELS)return ty.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function aw(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class rw{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const iw="if (isnan(x)) return x;",ow="return abs(x);",lw=iw+"\n  return (x < 0.0) ? 0.0 : x;\n",uw=iw+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",cw="return x;";class hw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class dw{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=Jv("rc",t),s=Zy(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),i=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const pw=h.kpo.whereImpl,fw={},mw=(0,h._K2)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class gw extends h.uI_{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,h._K2)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=Jb((0,h._K2)().getNumber("WEBGL_VERSION"));this.binaryCache=((t=(0,h._K2)().getNumber("WEBGL_VERSION"))in fw||(fw[t]={}),fw[t]),this.gpgpu=new lv(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new tw(this.gpgpu),this.numMBBeforeWarning=null==(0,h._K2)().global.screen?1024:(0,h._K2)().global.screen.height*(0,h._K2)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new h.GJx(this,(0,h.Hi9)())}nextDataId(){return gw.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if(((0,h._K2)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,h._K2)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:ey.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,a){if((0,h._K2)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:ey.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:r,shape:i,isPacked:o}=t;if(null!=r){let t;t=o?new hw(i,cw):new rw(i,cw);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=h.ZSL.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);c=h.C0T.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=h.ZSL.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:r,complexTensorInfos:i,isPacked:o}=t;if(null!=a){let t;t=o?new hw(s,cw):new rw(s,cw);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(!(0,h._K2)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,h._K2)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==r&&(0,h._K2)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...sy(s))}if(this.pendingRead.set(e,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=h.C0T.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=h.ZSL.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;iy(e,()=>e.deleteBuffer(c))}const d=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,h.Hi9)().removeDataId(e,this),this.pendingDeletes--),d}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>h.ZSL.decodeString(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,h.ra8)(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!oy(n)){if((0,h._K2)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=h.ZSL.sizeFromShape(t);if((0,h._K2)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...sy(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const r=(0,h._K2)().getBool("WEBGL_PACK")&&!0===s,i=r?yy(t):t,o=r?new Yy(i):new Jy(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=h.ZSL.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),r=h.ZSL.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if((0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=h.ZSL.sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:r[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:h.ZSL.now(),endMs:null}}endTimer(e){return(0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=h.ZSL.now(),e)}async getQueryTime(e){if((0,h._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=mw){return(0,h._K2)().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&h.ZSL.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){h.C0T.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return pw(e.shape,t)}packedUnaryOp(e,t,n){const s=new hw(e.shape,t),a=this.compileAndRun(s,[e],n);return(0,h.Hi9)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Ov(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,h._K2)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ow,e.dtype);const t=new rw(e.shape,ow),n=this.compileAndRun(t,[e]);return(0,h.Hi9)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&h.ZSL.isString(n[0])){const a=n.map(e=>h.ZSL.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return(0,h.Hi9)().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new dw(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Yv(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[xy(e.shape),...by(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[xy(t),...by(t)],r=new ew(a,n),i=[n],o=this.runWebGLProgram(r,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:a}=t,r=yy(s);let i;const o=sy(r);i=n?new Xy(r):new qy(r);const l=[o];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:r,dtype:a,dataId:e}],a,l,!0).dataId}}runWebGLProgram(e,t,n,s,a=!1){const r=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(r.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===Yb.DENSE){const t=sy(e.outputShape);i.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===h.ZSL.sizeFromShape(r.shape))return i.values=h.ZSL.getTypedArrayFromDType(r.dtype,0),r;const o=[],l=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&h.ZSL.sizeFromShape(t.shape)<=(0,h._K2)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!wy(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(r.dataId);const u={shape:r.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach(t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const r=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=Gy(e.packedInputs,t.shape,r);let u="",c="",d="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=h.ZSL.computeStrides(o);d=`${e[0]===r[1]}_${e[e.length-1]===r[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,f=2===o.length&&h.ZSL.arraysEqual(t.shape,r),m=1===h.ZSL.sizeFromShape(t.shape),g=h.C0T.getBroadcastDims(t.shape,n.shape),x=!e.packedInputs&&p===n.shape.length&&h.ZSL.arraysEqual(r,n.texData.texShape),b=e.packedInputs||o.length>2?"":`${r[0]>1}_${r[1]>1}`;s+=`${p}_${x}_${i?l:""}_${o.length}_${m}_${g}_${f}_${u}_${c}_${d}_${b}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${a}`}});const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a+`${(0,h._K2)().getNumber("WEBGL_VERSION")}`,r}(e,l,u),d=this.getAndSaveBinary(c,()=>function(e,t,n,s){const a=n.map((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}}),r=a.map(e=>e.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=zy(a,i,t),l=e.createProgram(o);let u=null;const c=e.getUniformLocation(l,"NAN",!1);1===(0,h._K2)().getNumber("WEBGL_VERSION")&&(u=e.getUniformLocation(l,"INFINITY",!1));const d=!1,p={},f={},m={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n];p[s]=e.getUniformLocation(l,s,d),p[`offset${s}`]=e.getUniformLocation(l,`offset${s}`,d),t.enableShapeUniforms&&(f[`${s}Shape`]=e.getUniformLocation(l,`${s}Shape`,d),m[`${s}TexShape`]=e.getUniformLocation(l,`${s}TexShape`,d))}let g,x,b;t.enableShapeUniforms&&(g=e.getUniformLocation(l,"outShape",d),b=e.getUniformLocation(l,"outShapeStrides",d),x=e.getUniformLocation(l,"outTexShape",d));const y=[];return t.customUniforms&&t.customUniforms.forEach((t,n)=>{y[n]=e.getUniformLocation(l,t.name,d)}),{program:t,source:o,webGLProgram:l,uniformLocations:p,customUniformLocations:y,inShapeInfos:r,outShapeInfo:i,infLoc:u,nanLoc:c,inShapesLocations:f,inTexShapesLocations:m,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:x}}(this.gpgpu,e,l,u)),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),function(e,t,n,s,a){t.program.enableShapeUniforms||(Qy(t.inShapeInfos,n),Qy([t.outShapeInfo],[s]));const r=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(r,i[0],i[1]):e.setOutputMatrixTexture(r,i[0],i[1]),e.setProgram(t.webGLProgram),1===(0,h._K2)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,s)=>{const a=t.program.variableNames[s],r=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`],o=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(o){const{uniformShape:s}=Gy(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=r)if(n.isUniform)if(h.ZSL.sizeFromShape(n.shape)<2)e.gl.uniform1f(r,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,r,s)});const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=h.ZSL.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach((n,s)=>{const r=t.customUniformLocations[s],i=a[s];if("float"===n.type)e.gl.uniform1fv(r,i);else if("vec2"===n.type)e.gl.uniform2fv(r,i);else if("vec3"===n.type)e.gl.uniform3fv(r,i);else if("vec4"===n.type)e.gl.uniform4fv(r,i);else if("int"===n.type)e.gl.uniform1iv(r,i);else if("ivec2"===n.type)e.gl.uniform2iv(r,i);else if("ivec3"===n.type)e.gl.uniform3iv(r,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(r,i)}}),e.executeProgram()}(this.gpgpu,d,l,u,s),o.forEach(e=>this.disposeIntermediateTensorInfo(e)),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=(0,h._K2)().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=h.ZSL.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,h._K2)().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(r);return this.disposeIntermediateTensorInfo(r),e}return r}compileAndRun(e,t,n,s,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,h._K2)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,h.DZQ)(()=>{if(!(0,h._K2)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,h._K2)().getBool("DEBUG");(0,h._K2)().set("DEBUG",!1);const t=this.abs((0,h.d_2)(1e-8)).dataSync()[0];if((0,h._K2)().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:r,usage:i,isPacked:o}=t;if(null!=r)return;const l=null!=this.activeTimers;let u;l&&(u=h.ZSL.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=(0,h._K2)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?h.ZSL.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=h.ZSL.squeezeShape(e);e=t.newShape}let s=h.ZSL.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=xy(e);let n=2,a=2;return e.length&&([n,a]=by(e)),s=t*(n/2)*(a/2),h.ZSL.sizeToSquarishShape(s).map(e=>2*e)}return h.ZSL.sizeToSquarishShape(s)}(n,o),t.texShape=c),null!=a){const e=yy(n);let r,i=c[1],d=c[0];const p=a instanceof Uint8Array||a instanceof Uint8ClampedArray;o?([i,d]=ay(c[0],c[1]),r=new tv(e,p)):r=new ev(e,p);const f=this.makeTensorInfo([d,i],s);this.texData.get(f.dataId).usage=p?ey.PIXELS:ey.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,d,a);const m=[[d,i]],g=!0,x=this.runWebGLProgram(r,[f],s,m,g),b=this.texData.get(x.dataId);t.texture=b.texture,t.texShape=b.texShape,t.isPacked=b.isPacked,t.usage=b.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(x.dataId),t.values=null,l&&(this.uploadWaitMs+=h.ZSL.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*h.ZSL.bytesPerElement(t)}}gw.nextDataId=0,h.eMq.isBrowser()&&(0,h.gJX)("webgl",()=>new gw,2);const xw="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class bw{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=h.C0T.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=jy(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const yw="\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n";class vw{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=h.C0T.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=jy(a);let r="";if(s)if(0===a||1===h.ZSL.sizeFromShape(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(r=`\n          ${Zy(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?r+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":r+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Jv("coords",a);this.enableShapeUniforms?r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${r}\n\n        setOutput(result);\n      }\n    `}}function ww(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const kw={kernelName:h.lzr,backendName:"webgl",kernelFunc:ww};function Cw(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(r.dataId),o=ww({inputs:{x:s},backend:n}),l=ww({inputs:{x:a},backend:n});return i.complexTensorInfos={real:o,imag:l},r}const Sw={kernelName:h.pr3,backendName:"webgl",kernelFunc:Cw},Iw="return (a < 0.) ? b * a : a;",Tw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",$w={kernelName:h.X0$,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s,i=n.makeTensorInfo([],"float32",h.ZSL.createScalarValue(r,"float32")),o=(0,h._K2)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new vw(Tw,a.shape,i.shape):new bw(Iw,a.shape,i.shape),l=n.runWebGLProgram(o,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},Nw="return (a < 0.) ? b * a : a;",Aw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Fw={kernelName:h.Ncv,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,r=(0,h._K2)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new vw(Aw,s.shape,a.shape):new bw(Nw,s.shape,a.shape);return n.runWebGLProgram(r,[s,a],"float32")}},Rw="if (isnan(x)) return x;";function Ew({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:r})=>{const{x:i}=a,o=r,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=(0,h._K2)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new hw(i.shape,t):new rw(i.shape,e),o.runWebGLProgram(u,[i],l)}}function Dw({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:r}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new bw(e,l.shape,u.shape);return c.runWebGLProgram(i,[a,r],(0,h.TuY)(n.dtype,s.dtype))}),r=Cw({inputs:{real:s,imag:a},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(a),r}const d=r||(0,h.TuY)(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=a){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?h.C0T.fromUint8ToStringArray(e):e,s="string"===l.dtype?h.C0T.fromUint8ToStringArray(t):t,[r,i]=a(l.shape,u.shape,n,s,d),o=c.makeTensorInfo(i,d);return c.texData.get(o.dataId).values=r,o}let p;return p=(0,h._K2)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new vw(t,l.shape,u.shape,n):new bw(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],d)}}function Lw(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":lw;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":uw;if("prelu"===e)return t?Aw:Nw;if("leakyrelu"===e)return t?Tw:Iw;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class zw{constructor(e,t,n,s=!1,a=!1,r=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=jy(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const x=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",y="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(y=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${y};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class Ow{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=h.C0T.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const _w="return a * b;";function Mw(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=h.C0T.upcastType(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new Ow("return areal * breal - aimag * bimag;",s.shape,a.shape),i=new Ow("return areal * bimag + aimag * breal;",s.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=Cw({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[i,o]=Av(s.shape,a.shape,e.values,t.values,r),l=n.makeTensorInfo(o,r);return n.texData.get(l.dataId).values=i,l}let i;return i=(0,h._K2)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new vw(_w,s.shape,a.shape):new bw(_w,s.shape,a.shape),n.runWebGLProgram(i,[s,a],r)}const Pw={kernelName:h.xu7,backendName:"webgl",kernelFunc:Mw};function Ww(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,i=n,o=h.ZSL.sizeFromShape(a.shape),l=h.ZSL.inferFromImplicitShape(r,o),u=h.ZSL.sizeFromShape(l);h.ZSL.assert(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(a.dataId);return!c.isPacked||wy(a.shape,l)||null!==c.texture&&wy(c.shape,l)?(i.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const s=[xy(e.shape),...by(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[xy(t),...by(t)],i=new ew(r,s),o=[s],l=n.runWebGLProgram(i,[a],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,l,i)}const Bw={kernelName:h.R23,backendName:"webgl",kernelFunc:Ww};class Vw{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${h.ZSL.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Uw{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function Zw(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=h.C0T.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let r=e;for(let i=0;i<a.length;i++){const{inSize:o,windowSize:l,outSize:u}=a[i];let c,h;c="mean"===n?0===i?new Vw({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new Vw({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new Uw({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=r,r=s.runWebGLProgram(c,[r],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return r}class Gw{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=Zy(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class Kw{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=Zy(this.rank),a=Xv("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const i=`vec2(${r.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Hw(e,t,n){const s=(0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kw(e.shape,t):new Gw(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function Qw(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;return function(e,t,n,s){const a=t,r=e.shape.length,i=h.ZSL.parseAxisParam(a,e.shape);let o=i;const l=h.C0T.getAxesPermutation(o,r),u=null!=l;let c=e;u&&(c=Hw(e,l,s),o=h.C0T.getInnerMostAxes(o.length,r)),h.C0T.assertAxesAreInnerMostDims("sum",o,r);const[d,p]=h.C0T.computeOutAndReduceShapes(c.shape,o);let f=d;n&&(f=h.C0T.expandShapeToKeepDim(d,i));const m=h.ZSL.sizeFromShape(p),g=Ww({inputs:{x:c},attrs:{shape:[h.ZSL.sizeFromShape(e.shape)/m,m]},backend:s}),x=Zw(g,(0,h.chL)(e.dtype),"sum",s),b=Ww({inputs:{x},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(x),u&&s.disposeIntermediateTensorInfo(c),b}(a,r,i,n)}const jw={kernelName:h.WuN,backendName:"webgl",kernelFunc:Qw};function qw(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,i=n,o=a.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(i.shouldExecuteOnCPU([a])){const e=i.texData.get(a.dataId).values,t=jv(e,a.shape,a.dtype,r,l);u=i.makeTensorInfo(l,a.dtype),i.texData.get(u.dataId).values=t}else u=Hw(a,r,i);return u}const Xw={kernelName:h.wx0,backendName:"webgl",kernelFunc:qw};function Jw({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,d=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],f=n?e.shape[u-1]:e.shape[u-2],m=s?t.shape[c-2]:t.shape[c-1],g=e.shape.slice(0,-2),x=t.shape.slice(0,-2),b=h.ZSL.sizeFromShape(g),y=h.ZSL.sizeFromShape(x),v=b===y||1===b||1===y;h.ZSL.assert(u>=2&&c>=2&&v,()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${x}).`);const w=(b>y?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);h.ZSL.assert(d===p,()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const k=n?[b,d,f]:[b,f,d],C=s?[y,m,p]:[y,p,m],S=Ww({inputs:{x:e},backend:a,attrs:{shape:k}}),I=Ww({inputs:{x:t},backend:a,attrs:{shape:C}}),T=[S,I],$=Math.max(b,y),N=n?S.shape[1]:S.shape[2],A=null!=r,F=null!=i,R="leakyrelu"===l,E=null!=l?Lw(l,!0):null;let D;if((1===f||1===m)&&N>1e3&&!1===(A||F||R||null!=E)){let e=S,t=I;n&&(e=qw({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),T.push(e)),s&&(t=qw({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),T.push(t));const r=1===m;let i=e;1!==m&&(i=Ww({inputs:{x:e},backend:a,attrs:{shape:[$,N,1]}}),T.push(i));const o=1===m?2:1;let l=t;r&&(l=Ww({inputs:{x:t},backend:a,attrs:{shape:[$,1,N]}}),T.push(l));const u=Mw({inputs:{a:i,b:l},backend:a});D=Qw({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),T.push(u)}else{const l=(0,h.TuY)(e.dtype,t.dtype),u=new zw(k,C,[$,f,m],n,s,A,E,F,R),c=[S,I];if(null!=r&&c.push(r),F&&c.push(i),R){const e=a.makeTensorInfo([],"float32",h.ZSL.createScalarValue(o,"float32"));c.push(e),T.push(e)}D=a.runWebGLProgram(u,c,l)}const L=Ww({inputs:{x:D},backend:a,attrs:{shape:w}});T.push(D);for(const e of T)a.disposeIntermediateTensorInfo(e);return L}const Yw={kernelName:h.Dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Jw({a,b:r,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},ek="return abs(x);",tk={kernelName:h.ljI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=Ov(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=(0,h._K2)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new hw(s.shape,ek):new rw(s.shape,ek),n.runWebGLProgram(a,[s],s.dtype)}},nk=Ew({opSnippet:iw+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),sk={kernelName:h.Vvy,backendName:"webgl",kernelFunc:nk},ak=Ew({opSnippet:iw+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),rk={kernelName:h.PH8,backendName:"webgl",kernelFunc:ak},ik="return a + b;",ok=Dw({opSnippet:ik,packedOpSnippet:ik,supportsComplex:!0,cpuKernelImpl:uv}),lk={kernelName:h.OMN,backendName:"webgl",kernelFunc:ok};class uk{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class ck{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const hk={kernelName:h.EkD,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return ww({inputs:{x:a[0]},backend:s});if(a.length>(0,h._K2)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const r=a.map(e=>e.dtype).reduce((e,t)=>(0,h.TuY)(e,t)),i=a.map(e=>e.shape),o=(0,h._K2)().getBool("WEBGL_PACK")?new ck(a[0].shape,i):new uk(a[0].shape,i);return s.runWebGLProgram(o,a,r)}},dk={kernelName:h.u8Z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=h.ZSL.parseAxisParam(r,a.shape);let u=l;const c=h.C0T.getAxesPermutation(u,o);let d=a;null!=c&&(d=qw({inputs:{x:a},backend:n,attrs:{perm:c}}),u=h.C0T.getInnerMostAxes(u.length,o)),h.C0T.assertAxesAreInnerMostDims("all",u,o);const[p,f]=h.C0T.computeOutAndReduceShapes(d.shape,u),m=Ww({inputs:{x:d},backend:n,attrs:{shape:[-1,h.ZSL.sizeFromShape(f)]}}),g=Zw(m,m.dtype,"all",n);let x;return x=Ww(i?{inputs:{x:g},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}},pk={kernelName:h.FSt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=h.ZSL.parseAxisParam(r,a.shape);let u=l;const c=h.C0T.getAxesPermutation(u,o);let d=a;null!=c&&(d=qw({inputs:{x:a},backend:n,attrs:{perm:c}}),u=h.C0T.getInnerMostAxes(u.length,o)),h.C0T.assertAxesAreInnerMostDims("any",u,o);const[p,f]=h.C0T.computeOutAndReduceShapes(d.shape,u),m=Ww({inputs:{x:d},backend:n,attrs:{shape:[-1,h.ZSL.sizeFromShape(f)]}}),g=Zw(m,m.dtype,"any",n);let x;return x=Ww(i?{inputs:{x:g},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}};class fk{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class mk{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,h.ZSL.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=e[e.length-1],r=Math.ceil(a/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=Zy(o),u=Jv("coords",o);let c,d;if(1===r){d=o+1;const e=Zy(d);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else d=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],m=p.map(e=>"int "+e),g=Jv("sourceLocR",d-1).concat("inIdx.r"),x=Jv("sourceLocG",d-1).concat("inIdx.g"),b=Jv("sourceLocB",d-1).concat("inIdx.b"),y=Jv("sourceLocA",d-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${x.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,C=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function gk(e,t,n,s=null){let a=t.shape[0],r=t.shape[1];null!=s&&(a=s.shape[0],r=s.shape[1]);const i=h.C0T.computeOptimalWindowSize(r),o={windowSize:i,inSize:r,batchSize:a,outSize:Math.ceil(r/i)},l=new fk(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const d=gk(e,t,n,c);return e.disposeIntermediateTensorInfo(c),d}function xk(e,t,n,s=null){const a=null!=s?s.shape:t.shape,r=a[a.length-1],i=h.C0T.computeOptimalWindowSize(r),o=new mk(a,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=xk(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function bk(e,t,n,s){const a=[n];if(h.C0T.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!(0,h._K2)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],r=e.texData.get(t.dataId);let i=t;null!==r&&r.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=h.C0T.computeOutAndReduceShapes(i.shape,a),u=h.ZSL.sizeFromShape(l),c=Ww({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const d=gk(e,c,s);n.push(d);const p=Ww({inputs:{x:d},backend:e,attrs:{shape:o}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),p}return xk(e,t,s)}const yk={kernelName:h.Jp_,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=h.ZSL.parseAxisParam(r,a.shape);const o=h.C0T.getAxesPermutation(i,a.shape.length);let l=a;const u=[];null!=o&&(l=qw({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=h.C0T.getInnerMostAxes(i.length,l.shape.length)),h.C0T.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=bk(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},vk={kernelName:h.p_m,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=h.ZSL.parseAxisParam(r,a.shape);const o=h.C0T.getAxesPermutation(i,a.shape.length);let l=a;const u=[];null!=o&&(l=qw({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=h.C0T.getInnerMostAxes(i.length,l.shape.length)),h.C0T.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=bk(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},wk=Ew({opSnippet:iw+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),kk={kernelName:h.QKF,backendName:"webgl",kernelFunc:wk},Ck=Ew({opSnippet:iw+"return log(x + sqrt(x * x + 1.0));"}),Sk={kernelName:h.epO,backendName:"webgl",kernelFunc:Ck},Ik=Ew({opSnippet:iw+"\n  return atan(x);\n"}),Tk={kernelName:h.TyE,backendName:"webgl",kernelFunc:Ik},$k=Dw({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Nk={kernelName:h.lxb,backendName:"webgl",kernelFunc:$k},Ak=Ew({opSnippet:iw+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Fk={kernelName:h.zP9,backendName:"webgl",kernelFunc:Ak};class Rk{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const y=4*Math.floor(r/4),v=r%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Ek{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let y="0.0";if(b||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const w=4*Math.floor(r/4),k=r%4,C=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${C}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${C}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${C}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const Dk={kernelName:h.ho8,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;$y(a,"avgPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.C0T.computePool2DInfo(a.shape,r,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&h.ZSL.arraysEqual(u.inShape,u.outShape))return ww({inputs:{x:a},backend:n});const c=new Rk(u,"avg",!1);return n.runWebGLProgram(c,[a],"float32")}},Lk={kernelName:h.cS,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=h.C0T.computePool3DInfo(a.shape,r,i,[1,1,1],o,l,u),d=new Ek(c,"avg",!1);return n.runWebGLProgram(d,[a],"float32")}};class zk{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ok{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const _k={kernelName:h.wwC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,d=h.C0T.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new Ok(d);return n.runWebGLProgram(p,[a],i.dtype)}},Mk={kernelName:h.VCH,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;$y([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=h.C0T.computePool2DInfo(i.shape,o,l,1,u),d=new zk(c);return n.runWebGLProgram(d,[a],i.dtype)}},Pk={kernelName:h.jAQ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;return Jw({a,b:r,transposeA:i,transposeB:o,backend:n})}};class Wk{constructor(e,t,n,s,a,r){this.outputShape=[],this.variableNames=["x","mean","variance"],h.C0T.assertAndGetBroadcastShape(e,t),h.C0T.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(h.C0T.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=a&&(h.C0T.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${r}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Bk{constructor(e,t,n,s,a,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],h.C0T.assertAndGetBroadcastShape(e,t),h.C0T.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(h.C0T.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(h.C0T.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${r}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Vk={kernelName:h.i5R,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:r,offset:i,scale:o}=e;h.ZSL.assert(a.shape.length===r.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h.ZSL.assert(null==i||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h.ZSL.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,a,r];let c=null;null!=i&&(c=i.shape,u.push(i));let d=null;null!=o&&(d=o.shape,u.push(o));const p=(0,h._K2)().getBool("WEBGL_PACK_NORMALIZATION")?new Bk(s.shape,a.shape,r.shape,c,d,l):new Wk(s.shape,a.shape,r.shape,c,d,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class Uk{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Zy(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Zk.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${Zk[t]} = start[${t}] + coords.${Zk[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const Zk=["x","y","z","w","u","v"];class Gk{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Zy(this.rank),n=Jv("coords",this.rank),s=Jv("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,i=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function Kk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:i}=s,[o,l]=h.Kro.parseSliceParams(a,r,i);if(h.Kro.assertParamsValid(a,o,l),0===h.ZSL.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=_v(e.values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),c=h.Kro.isSliceContinous(a.shape,o,l);if(u||!c){const e=(0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Gk(l):new Uk(l),t=[o];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),r=s.makeTensorInfo(n,e.dtype),i=s.texData.get(r.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=h.Kro.computeFlatOffset(t,h.ZSL.computeStrides(e.shape));a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),r}(a,o,l,n)}const Hk={kernelName:h.JiE,backendName:"webgl",kernelFunc:Kk},Qk={kernelName:h.Ik2,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:i}=s;h.ZSL.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const o=r.reduce((e,t)=>e*t),l=h.C0T.getReshaped(a.shape,r,o),u=h.C0T.getPermuted(l.length,r.length),c=h.C0T.getReshapedPermuted(a.shape,r,o),d=h.C0T.getSliceBeginCoords(i,r.length),p=h.C0T.getSliceSize(c,i,r.length),f=[],m=Ww({inputs:{x:a},backend:n,attrs:{shape:l}}),g=qw({inputs:{x:m},backend:n,attrs:{perm:u}}),x=Ww({inputs:{x:g},backend:n,attrs:{shape:c}}),b=Kk({inputs:{x},backend:n,attrs:{begin:d,size:p}});return f.push(m),f.push(g),f.push(x),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},jk={kernelName:h.N4F,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=cv(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}},qk={kernelName:h.vj7,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.readSync(s.dataId),i=n.readSync(a.dataId),o=h.C0T.assertAndGetBroadcastShape(Array.from(r),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},Xk=Dw({opSnippet:"return float(a != b);",cpuKernelImpl:Rv,dtype:"bool"}),Jk={kernelName:h.ylV,backendName:"webgl",kernelFunc:Xk};function Yk(e){const{inputs:t,backend:n}=e,{input:s}=t;return ww({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const eC={kernelName:h.LRy,backendName:"webgl",kernelFunc:Yk},tC={kernelName:h.KXH,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:r}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===r.dtype)return ww({inputs:{x:r},backend:s});const t=h.Ul9(r.shape),n=e({inputs:{x:r},backend:s,attrs:{dtype:"float32"}}),a=Cw({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===r.dtype){const t=Yk({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!h.ZSL.hasEncodingLoss(r.dtype,i)){const e=ww({inputs:{x:r},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new rw(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",h.ZSL.getTypedArrayFromDType("bool",1)),t=Xk({inputs:{a:r,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${i}`)}},nC="return ceil(x);",sC=Ew({opSnippet:nC,packedOpSnippet:nC,cpuKernelImpl:dv}),aC={kernelName:h.QDP,backendName:"webgl",kernelFunc:sC};class rC{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class iC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const oC={kernelName:h.vaV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:r,clipValueMax:i}=s;let o;o=(0,h._K2)().getBool("WEBGL_PACK_CLIP")?new iC(a.shape):new rC(a.shape);const l=[[r],[i]];return n.runWebGLProgram(o,[a],a.dtype,l)}};class lC{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function uC(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const cC={kernelName:h.$zE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new lC(s.shape),i=[uC(s,a.complexTensorInfos.real),uC(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,i,i[0].dtype)}};class hC{constructor(e){this.outputShape=[],this.outputShape=h.C0T.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class dC{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=h.C0T.computeOutShape(e,t);const n=this.outputShape,s=n.length,a=Zy(s),r=Jv("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>`T${t}`);const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let d=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];d+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${pC(i,l,t)}),\n            vec2(${pC(u,l,t)}));\n        }`}const p=o.length,f=o[o.length-1];d+=`\n        return getChannel(\n          getT${p}(${pC(i,l,f)}),\n          vec2(${pC(u,l,f)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${d}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${r}), 0., 0., 0.);\n\n        ${r[s-1]} = ${r[s-1]} + 1;\n        if (${r[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${r});\n        }\n\n        ${r[s-2]} = ${r[s-2]} + 1;\n        if (${r[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${r});\n        }\n\n        ${r[s-1]} = ${r[s-1]} - 1;\n        if (${r[s-2]} < ${n[s-2]} &&\n            ${r[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${r});\n        }\n        setOutput(result);\n      }\n    `}}function pC(e,t,n){const s=e.indexOf(t);return e.map((e,t)=>t===s?`${e} - ${n}`:e).join()}function fC(e){const{inputs:t,backend:n}=e,{input:s}=t;return ww({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const mC={kernelName:h.dv8,backendName:"webgl",kernelFunc:fC};function gC(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map(e=>Yk({inputs:{input:e},backend:n})),a=e.map(e=>fC({inputs:{input:e},backend:n})),r=gC(s,t,n),i=gC(a,t,n),o=Cw({inputs:{real:r,imag:i},backend:n});return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),a.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),o}let a=n.shouldExecuteOnCPU(e);if("string"===s&&(a=!0),a){const a=e.map(e=>{const s=h.ZSL.sizeFromShape(e.shape.slice(t));return Ww({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})}),r=a.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),i=h.C0T.computeOutShape(a.map(e=>e.shape),1),o=1===a[0].shape[0],l=pv(r,i,s,o),u=h.C0T.computeOutShape(e.map(e=>e.shape),t),c=n.makeTensorInfo(u,s,l);return a.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}if(e.length>(0,h._K2)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),a=gC(e.slice(0,s),t,n),r=gC(e.slice(s),t,n),i=gC([a,r],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}if((0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new dC(e.map(e=>e.shape),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:r,outShape:i}=function(e,t,n){const s=h.C0T.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>Ww({inputs:{x:e},attrs:{shape:[-1,h.ZSL.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:s}}(e,t,n),o=new hC(r.map(e=>e.shape)),l=n.runWebGLProgram(o,r,s);r.forEach(e=>n.disposeIntermediateTensorInfo(e));const u=Ww({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function xC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=h.ZSL.parseAxisParam(a,t[0].shape)[0],i=h.C0T.computeOutShape(t.map(e=>e.shape),r);if(0===h.ZSL.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>h.ZSL.sizeFromShape(e.shape)>0);if(1===o.length)return ww({inputs:{x:o[0]},backend:n});const l=o.map(e=>e.shape);return h.C0T.assertParamsConsistent(l,r),gC(o,r,n)}const bC={kernelName:h.$dB,backendName:"webgl",kernelFunc:xC};class yC{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,b=m?3:1;let y="",v="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class vC{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=jy(this.outputShape.length);const{dataFormat:n}=t,s=Ay(),a="channelsLast"===n,r=a?0:1,i=a?1:2,o=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${r}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function kC({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,d=l[0]*l[1]*l[2],p=n.outChannels,f="channelsLast"===n.dataFormat,m=!1,g=!1;let x;const b=[];if((1!==d&&1!==p||!(c>1e3))&&u.isPacked&&f&&null!=u.texture&&l[2]%2!=0&&h.ZSL.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),d={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,h.ZSL.assert(wy(u.shape,d.shape),()=>`packed reshape ${u.shape} to ${d.shape} isn't free`);const f=Ww({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});b.push(f);const y=Jw({a:d,b:f,backend:s,transposeA:m,transposeB:g,bias:a,activation:o,preluActivationWeights:r,leakyreluAlpha:i}),v=s.texData.get(y.dataId);h.ZSL.assert(v.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=p,v.shape=n.outShape,x=ww({inputs:{x:y},backend:s}),x.shape=n.outShape,b.push(y)}else{const u=Ww({inputs:{x:e},backend:s,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=Ww({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=Jw({a:u,b:c,transposeA:m,transposeB:g,backend:s,bias:a,activation:o,preluActivationWeights:r,leakyreluAlpha:i});x=Ww({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),b.push(u),b.push(c),b.push(h)}for(const e of b)s.disposeIntermediateTensorInfo(e);return x}function CC({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:d,outHeight:p,dataFormat:f}=n,m="channelsLast"===f,g=l*u*c,x=p*d,b=[g,x],y=[],v=Ww({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=Ww({inputs:{x:t},backend:s,attrs:{shape:[1,g,h.ZSL.sizeFromShape(t.shape)/g]}});y.push(v),y.push(w);const k=new wC(b,n),C=[v.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],S=s.runWebGLProgram(k,[v],"float32",C),I=Ww({inputs:{x:S},backend:s,attrs:{shape:[1,b[0],b[1]]}});y.push(S),y.push(I);const T=null!=a,$=null!=r,N="leakyrelu"===o,A=o?Lw(o,!0):null,F=new zw(I.shape,w.shape,[1,x,n.outChannels],!0,!1,T,A,$,N),R=[I,w];if(a&&R.push(a),$&&R.push(r),N){const e=s.makeTensorInfo([],"float32",h.ZSL.createScalarValue(i,"float32"));R.push(e),y.push(e)}const E=s.runWebGLProgram(F,R,"float32"),D=Ww({inputs:{x:E},backend:s,attrs:{shape:m?[1,p,d,n.outChannels]:[1,n.outChannels,p,d]}});y.push(E);for(const e of y)s.disposeIntermediateTensorInfo(e);return D}const SC={kernelName:h.p2J,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,d=h.C0T.convertConv2DDataFormat(l),p=h.C0T.computeConv2DInfo(a.shape,r.shape,i,u,o,c,!1,d);let f;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if((0,h._K2)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])f=CC({x:a,filter:r,convInfo:p,backend:n});else{const e=new yC(p);f=n.runWebGLProgram(e,[a,r],"float32")}else f=kC({x:a,filter:r,convInfo:p,backend:n});const m=Ww({inputs:{x:f},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class IC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $C{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const AC={kernelName:h.rFm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,d=h.C0T.convertConv2DDataFormat(l),p=h.C0T.computeConv2DInfo(a.shape,c,i,1,o,u,!1,d),f=new IC(p);return n.runWebGLProgram(f,[a,r],"float32")}},FC={kernelName:h.jfg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,d=h.C0T.convertConv2DDataFormat(u),p=h.C0T.computeConv2DInfo(i,r.shape,o,1,l,c,!1,d),f=new TC(p);return n.runWebGLProgram(f,[a,r],"float32")}},RC={kernelName:h.A1h,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=h.C0T.computeConv3DInfo(a.shape,r.shape,i,l,o),c=new vC(u);return n.runWebGLProgram(c,[a,r],"float32")}},EC={kernelName:h.iGz,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s,u=h.C0T.computeConv3DInfo(a.shape,l,i,1,o),c=new $C(u);return n.runWebGLProgram(c,[a,r],"float32")}},DC={kernelName:h.gC7,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s,u=h.C0T.computeConv3DInfo(l,r.shape,o,1,i),c=new NC(u);return n.runWebGLProgram(c,[a,r],"float32")}},LC=Ew({opSnippet:Rw+"\n  return cos(x);\n"}),zC={kernelName:h.Mn0,backendName:"webgl",kernelFunc:LC},OC=Ew({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),_C={kernelName:h.MnK,backendName:"webgl",kernelFunc:OC};class MC{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[i-1+".0",o-1+".0"],[m,g,x]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,y,v]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const PC={kernelName:h.MRQ,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new MC(a.shape,r.shape,o,l,u);return n.runWebGLProgram(c,[a,r,i],"float32")}};class WC{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const s=e.length,a=t?"0.0":`getX(${BC(s,"coords")})`,r=e[e.length-1];let i="",o="";t?(i=n?"end != "+(r-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${r}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Zy(s)} coords = getOutputCoords();\n        int end = ${VC(s,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${VC(s,"coords")} = idx;\n          val += getX(${BC(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function BC(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function VC(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const UC={kernelName:h.nY8,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s,l=a.shape.length,u=h.C0T.getAxesPermutation([r],l);let c=a;null!=u&&(c=qw({inputs:{x:a},backend:n,attrs:{perm:u}}));const d=h.C0T.getInnerMostAxes(1,l)[0];if(d!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=${r}`);const p=c.shape[d];let f=ww({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new WC(c.shape,!1,o),s=[[e]],a=f;f=n.runWebGLProgram(t,[f],f.dtype,s),n.disposeIntermediateTensorInfo(a)}if(i){const e=new WC(c.shape,i,o),t=f;f=n.runWebGLProgram(e,[f],f.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=qw({inputs:{x:f},backend:n,attrs:{perm:h.C0T.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(c),e}return f}},ZC={kernelName:h.wNW,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=cv(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=hv(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class GC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const KC={kernelName:h.TMz,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:i}=s,o=a.shape[0],l=("NHWC"===i?a.shape[1]:a.shape[2])*r,u=("NHWC"===i?a.shape[2]:a.shape[3])*r,c=("NHWC"===i?a.shape[3]:a.shape[1])/(r*r),h=new GC("NHWC"===i?[o,l,u,c]:[o,c,l,u],r,i);return n.runWebGLProgram(h,[a],a.dtype)}};class HC{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=jy(this.outputShape.length);const r=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${r}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class QC{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=jy(this.outputShape.length);const r=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,d=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(d+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?h.ZSL.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(p+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${r};\n        int q = d2 - d1 * ${r};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const jC={kernelName:h.tGH,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const d=h.C0T.computeConv2DInfo(a.shape,r.shape,i,c,o,u,!0);let p;p=(0,h._K2)().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels===1?new QC(d):new HC(d);const f=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(p,[a,r],"float32",f)}};class qC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const JC={kernelName:h.X$8,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,d=h.C0T.computeConv2DInfo(a.shape,c,i,o,l,u,!0),p=new qC(d);return n.runWebGLProgram(p,[a,r],"float32")}},YC={kernelName:h.nVu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,d=h.C0T.computeConv2DInfo(c,r.shape,i,o,l,u,!0),p=new XC(d);return n.runWebGLProgram(p,[a,r],"float32")}};class eS{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const tS={kernelName:h.ORI,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],r=h.ZSL.sizeFromShape(s.shape),i=Ww({inputs:{x:s},backend:n,attrs:{shape:[r]}}),o=new eS(r),l=n.runWebGLProgram(o,[i],i.dtype),u=Ww({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class nS{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const sS={kernelName:h.jxD,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=h.C0T.computeDilation2DInfo(a.shape,r.shape,i,o,"NHWC",l);let c;const d=new nS(u);c=n.runWebGLProgram(d,[a,r],"float32");const p=Ww({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},aS={kernelName:h.Qgm,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:i,summedDims:o,idDims:l}=h.C0T.decodeEinsumEquation(a,r.length);h.C0T.checkEinsumDimSizes(i.length,l,r);const{path:u,steps:c}=h.C0T.getEinsumComputePath(o,l),d=c.length;let p=null,f=i.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=h.C0T.getEinsumPermutation(f,l[t]);let a;h.C0T.isIdentityPermutation(e)?a=r[t]:(a=qw({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),m.push(a));const i=a.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);h.ZSL.arraysEqual(a.shape,i)||(a=Ww({inputs:{x:a},backend:n,attrs:{shape:i}}),m.push(a)),null===p?p=a:(p=Mw({inputs:{a,b:p},backend:n}),m.push(p))}e<d-1&&(u[e]>=0&&(p=Qw({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},rS=Ew({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),iS={kernelName:h.Pah,backendName:"webgl",kernelFunc:rS},oS={kernelName:h.rsH,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,r=(0,h._K2)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new vw("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new bw("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}},lS=Dw({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:fv}),uS={kernelName:h.BRl,backendName:"webgl",kernelFunc:lS},cS=Ew({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${h.C0T.ERF_P};\n  float a1 = ${h.C0T.ERF_A1};\n  float a2 = ${h.C0T.ERF_A2};\n  float a3 = ${h.C0T.ERF_A3};\n  float a4 = ${h.C0T.ERF_A4};\n  float a5 = ${h.C0T.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),hS={kernelName:h._s9,backendName:"webgl",kernelFunc:cS},dS="return exp(x);",pS=Ew({opSnippet:dS,packedOpSnippet:dS,cpuKernelImpl:mv,dtype:"float32"}),fS={kernelName:h.ox3,backendName:"webgl",kernelFunc:pS};function mS(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:r}=t,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(h.ZSL.assert(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+a+1),o.splice(l,0,1),Ww({inputs:{x:r},backend:s,attrs:{shape:o}})}const gS={kernelName:h.ybN,backendName:"webgl",kernelFunc:mS},xS="return exp(x) - 1.0;",bS=Ew({opSnippet:xS,packedOpSnippet:xS,cpuKernelImpl:gv}),yS={kernelName:h.ybj,backendName:"webgl",kernelFunc:bS};class vS{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function wS(e,t,n){const s=n.texData.get(e.dataId),a=h.ZSL.sizeFromShape(e.shape),r=e.shape[e.shape.length-1],i=Ww({inputs:{x:e},backend:n,attrs:{shape:[a/r,r]}}),o=i.shape,l=new vS("real",o,t),u=new vS("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],d=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),f=Cw({inputs:{real:d,imag:p},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p);const m=Ww({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const kS={kernelName:h.rGP,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return wS(s,!1,n)}};class CS{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function SS(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:r}=n;if(r=r||h.ZSL.inferDtype(a),"string"===r){const e=h.ZSL.getArrayFromDType(r,h.ZSL.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,r,e)}{const e=new CS(s,a),n=[[a]];return t.runWebGLProgram(e,[],r,n)}}const IS={kernelName:h.SQl,backendName:"webgl",kernelFunc:SS};class TS{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const $S={kernelName:h.BxF,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new TS(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},NS="return floor(x);",AS=Ew({opSnippet:NS,packedOpSnippet:NS,cpuKernelImpl:xv}),FS={kernelName:h.ZgB,backendName:"webgl",kernelFunc:AS},RS=Dw({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ES={kernelName:h.ElG,backendName:"webgl",kernelFunc:RS};class DS{constructor(e){this.variableNames=["A"];const t=Ay(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class LS{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Ay(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const zS={kernelName:h.awo,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:r}=s,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,u]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[u,l],d=[u,l,r];(o||i)&&(null==OS&&(OS=document.createElement("canvas").getContext("2d")),OS.canvas.width=l,OS.canvas.height=u,OS.drawImage(a,0,0,l,u),a=OS.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=ey.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),a);const f=(0,h._K2)().getBool("WEBGL_PACK")?new LS(d):new DS(d),m=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),m}};let OS;const _S={kernelName:h.aAr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:d,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,g=h.C0T.convertConv2DDataFormat(c),x=h.C0T.computeConv2DInfo(a.shape,r.shape,l,d,u,p,!1,g);let b;const y=[];if(1!==x.filterHeight||1!==x.filterWidth||1!==x.dilationHeight||1!==x.dilationWidth||1!==x.strideHeight||1!==x.strideWidth||"SAME"!==x.padInfo.type&&"VALID"!==x.padInfo.type)if((0,h._K2)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])b=CC({x:a,filter:r,convInfo:x,backend:n,bias:i,activation:f,preluActivationWeights:o,leakyreluAlpha:m});else{const e=null!=i,t=null!=o,s="leakyrelu"===f,l=f?Lw(f,!1):null,u=new yC(x,e,l,t,s),c=[a,r];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",h.ZSL.createScalarValue(m,"float32"));c.push(e),y.push(e)}b=n.runWebGLProgram(u,c,"float32")}else b=kC({x:a,filter:r,convInfo:x,backend:n,bias:i,activation:f,preluActivationWeights:o,leakyreluAlpha:m});const v=Ww({inputs:{x:b},backend:n,attrs:{shape:x.outShape}});return y.push(b),y.forEach(e=>n.disposeIntermediateTensorInfo(e)),v}},MS={kernelName:h.T7M,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=[];let g=c;null==g&&(g=[1,1]),h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const x=h.C0T.computeConv2DInfo(a.shape,r.shape,l,g,u,d,!0),b=(0,h._K2)().getBool("WEBGL_PACK_DEPTHWISECONV")&&x.strideWidth<=2&&x.outChannels/x.inChannels===1,y=p?Lw(p,b):null,v=[a,r],w=null!=i,k=null!=o,C="leakyrelu"===p;if(w&&v.push(i),k&&v.push(o),C){const e=n.makeTensorInfo([],"float32",h.ZSL.createScalarValue(f,"float32"));v.push(e),m.push(e)}let S;S=b?new QC(x,w,y,k,C):new HC(x,w,y,k,C);const I=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]],T=n.runWebGLProgram(S,v,"float32",I);return m.forEach(e=>n.disposeIntermediateTensorInfo(e)),T}};class PS{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=Zy(t.length),a=Zy(n.length),r=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${r};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const WS={kernelName:h.O4G,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=a.shape,i=r[r.length-1],o=h.ZSL.sizeFromShape(s.shape),[l,u,c,d]=h.C0T.prepareAndValidate(s,a),p=Ww({inputs:{x:a},backend:n,attrs:{shape:[u,i]}}),f=Ww({inputs:{x:s},backend:n,attrs:{shape:[h.ZSL.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=bv(e,t,s.dtype,u,i,c,d,s.shape,o);return n.makeTensorInfo(l,s.dtype,r.values)}const m=new PS(i,d,[u,c]),g=n.runWebGLProgram(m,[f,p],f.dtype),x=Ww({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),x}};class BS{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Zy(this.rank),s=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let s=0;s<e.length;s++)2===s?n.push("int(getIndices(resRC.x, resRC.z))"):n.push(`${t[s]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function VS(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s,l=h.ZSL.parseAxisParam(i,a.shape)[0],u=n.readSync(r.dataId),c=a.shape[l];for(let e=0;e<u.length;++e){const t=u[e];h.ZSL.assert(t<=c-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`)}const d=h.C0T.segment_util.collectGatherOpShapeInfo(a,r,l,o),p=h.ZSL.sizeFromShape(r.shape),f=[],m=Ww({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),g=Ww({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}});f.push(m),f.push(g);const x=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize];if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.bufferSync(g),t=n.bufferSync(m),s=yv(t,e,x);return f.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(d.outputShape,s.dtype,s.values)}const b=new BS(m.shape,x),y=n.runWebGLProgram(b,[m,g],m.dtype);f.push(y);const v=Ww({inputs:{x:y},backend:n,attrs:{shape:d.outputShape}});return f.forEach(e=>n.disposeIntermediateTensorInfo(e)),v}const US={kernelName:h.mxL,backendName:"webgl",kernelFunc:VS},ZS=Dw({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:vv,dtype:"bool"}),GS={kernelName:h.XhZ,backendName:"webgl",kernelFunc:ZS},KS=Dw({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:wv}),HS={kernelName:h.lLS,backendName:"webgl",kernelFunc:KS},QS={kernelName:h.OAQ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return wS(s,!0,n)}},jS=Ew({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),qS={kernelName:h.gIW,backendName:"webgl",kernelFunc:jS},XS=Ew({opSnippet:"return float(isinf(x));",dtype:"bool"}),JS={kernelName:h.E3$,backendName:"webgl",kernelFunc:XS},YS=Ew({opSnippet:"return float(isnan(x));",dtype:"bool"}),eI={kernelName:h.iPs,backendName:"webgl",kernelFunc:YS},tI=Dw({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:kv,dtype:"bool"}),nI={kernelName:h.mIA,backendName:"webgl",kernelFunc:tI},sI=Dw({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Cv,dtype:"bool"}),aI={kernelName:h.CwD,backendName:"webgl",kernelFunc:sI},rI={kernelName:h.mnI,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=Sv(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},iI=Ew({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Iv}),oI={kernelName:h.tG8,backendName:"webgl",kernelFunc:iI},lI=Ew({opSnippet:"return log(1.0 + x);"}),uI={kernelName:h.Cg$,backendName:"webgl",kernelFunc:lI},cI=Dw({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),hI={kernelName:h.RUm,backendName:"webgl",kernelFunc:cI},dI=Ew({opSnippet:"return float(!(x >= 1.0));"}),pI={kernelName:h.nZd,backendName:"webgl",kernelFunc:dI},fI=Dw({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),mI={kernelName:h.LXA,backendName:"webgl",kernelFunc:fI};class gI{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class xI{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const bI={kernelName:h.jM4,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s,u=(0,h._K2)().getBool("WEBGL_PACK_NORMALIZATION")?new xI(a.shape,r,i,o,l):new gI(a.shape,r,i,o,l);return n.runWebGLProgram(u,[a],a.dtype)}};class yI{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const vI={kernelName:h.ToN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new yI(a.shape,o,l,u,c);return n.runWebGLProgram(h,[a,r,i],a.dtype)}};function wI(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=a.shape.length,l=h.ZSL.parseAxisParam(r,a.shape);let u=l;const c=h.C0T.getAxesPermutation(u,o),d=null!=c,p=n.shouldExecuteOnCPU([a]);let f=a;if(d){if(p){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const s=jv(e,a.shape,a.dtype,c,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=s}else f=Hw(a,c,n);u=h.C0T.getInnerMostAxes(u.length,o)}h.C0T.assertAxesAreInnerMostDims("max",u,o);const[m,g]=h.C0T.computeOutAndReduceShapes(f.shape,u);let x,b=m;if(i&&(b=h.C0T.expandShapeToKeepDim(m,l)),p){const e=n.texData.get(f.dataId).values,t=Tv(e,h.ZSL.sizeFromShape(g),b,a.dtype);x=n.makeTensorInfo(b,a.dtype),n.texData.get(x.dataId).values=t}else x=function(e,t,n,s){const a=h.ZSL.sizeFromShape(t),r=Ww({inputs:{x:e},attrs:{shape:[h.ZSL.sizeFromShape(e.shape)/a,a]},backend:s}),i=Zw(r,e.dtype,"max",s),o=Ww({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(f,g,b,n);return d&&n.disposeIntermediateTensorInfo(f),x}const kI={kernelName:h.VAI,backendName:"webgl",kernelFunc:wI},CI=Dw({opSnippet:xw+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+yw+"\n  return result;\n",cpuKernelImpl:$v}),SI={kernelName:h.LDN,backendName:"webgl",kernelFunc:CI},II={kernelName:h.t3d,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;$y(a,"maxPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=h.C0T.computePool2DInfo(a.shape,r,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&h.ZSL.arraysEqual(u.inShape,u.outShape))return ww({inputs:{x:a},backend:n});const c=new Rk(u,"max",!1);return n.runWebGLProgram(c,[a],a.dtype)}},TI={kernelName:h.ySp,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=h.C0T.computePool3DInfo(a.shape,r,i,[1,1,1],o,u,l),d=new Ek(c,"max",!1);return n.runWebGLProgram(d,[a],a.dtype)}};class $I{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NI{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const AI={kernelName:h.cHb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,d=h.C0T.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new Ek(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new NI(d),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},FI={kernelName:h.RXX,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;$y([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=h.C0T.computePool2DInfo(o.shape,l,u,1,c,d),f=new Rk(p,"max",!0),m=n.runWebGLProgram(f,[o],o.dtype),g=new $I(p),x=n.runWebGLProgram(g,[a,m],o.dtype);return n.disposeIntermediateTensorInfo(m),x}},RI={kernelName:h.TL8,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:i,includeBatchInIndex:o}=t,l=n;h.ZSL.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];h.ZSL.assert(h.C0T.eitherStridesOrDilationsAreOne(r,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${u}'`);const c=h.C0T.computePool2DInfo(s.shape,a,r,u,i),[d,p]=function(e,t,n,s){let a=new Rk(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new Rk(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,o,c,l);return[d,p]}},EI={kernelName:h.g5A,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:r}=t,i=n,o=s.shape.length,l=h.ZSL.parseAxisParam(r,s.shape);let u=l;const c=h.C0T.getAxesPermutation(u,o),d=null!=c,p=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(d){if(p){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=jv(e,s.shape,s.dtype,c,t);m=i.makeTensorInfo(t,s.dtype),i.texData.get(m.dataId).values=n}else m=Hw(s,c,i);f.push(m),u=h.C0T.getInnerMostAxes(u.length,o)}h.C0T.assertAxesAreInnerMostDims("sum",u,o);const[g,x]=h.C0T.computeOutAndReduceShapes(m.shape,u);let b=g;a&&(b=h.C0T.expandShapeToKeepDim(g,l));const y=function(e,t,n,s){const a=h.ZSL.sizeFromShape(t),r=Ww({inputs:{x:e},attrs:{shape:[h.ZSL.sizeFromShape(e.shape)/a,a]},backend:s}),i=Zw(r,"float32","mean",s),o=Ww({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(m,x,b,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return y}},DI={kernelName:h.lNG,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=h.ZSL.parseAxisParam(r,a.shape);let u=l;const c=h.C0T.getAxesPermutation(u,o);let d=a;null!=c&&(d=qw({inputs:{x:a},backend:n,attrs:{perm:c}}),u=h.C0T.getInnerMostAxes(u.length,a.shape.length)),h.C0T.assertAxesAreInnerMostDims("min",u,o);const[p,f]=h.C0T.computeOutAndReduceShapes(d.shape,u),m=Ww({inputs:{x:d},backend:n,attrs:{shape:[-1,h.ZSL.sizeFromShape(f)]}}),g=Zw(m,m.dtype,"min",n);let x;return x=Ww(i?{inputs:{x:g},backend:n,attrs:{shape:h.C0T.expandShapeToKeepDim(p,l)}}:{inputs:{x:g},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(d),x}},LI=Dw({opSnippet:xw+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+yw+"\n  return result;\n",cpuKernelImpl:Nv}),zI={kernelName:h.LG0,backendName:"webgl",kernelFunc:LI};class OI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,a=Zy(s),r=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class _I{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,a=Zy(s),r=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Jv("rc",s),l=Jv("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const MI={kernelName:h.x7F,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:r}=n,i=(0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _I(s.shape,a,r):new OI(s.shape,a,r);return t.runWebGLProgram(i,[s],s.dtype)}},PI=Dw({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  "+yw+"\n  return result;\n"}),WI={kernelName:h.BLA,backendName:"webgl",kernelFunc:PI};class BI{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const VI=Dw({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),UI={kernelName:h.sDr,backendName:"webgl",kernelFunc:VI},ZI="return a - b;",GI=Dw({opSnippet:ZI,packedOpSnippet:ZI,supportsComplex:!0,cpuKernelImpl:Kv}),KI={kernelName:h.PbM,backendName:"webgl",kernelFunc:GI};function HI(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=h.ZSL.parseAxisParam([r],a.shape),o=wI({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=h.C0T.expandShapeToKeepDim(o.shape,i),u=Ww({inputs:{x:o},backend:n,attrs:{shape:l}}),c=GI({inputs:{a,b:u},backend:n}),d=pS({inputs:{x:c},backend:n}),p=Qw({inputs:{x:d},backend:n,attrs:{axis:i,keepDims:!1}}),f=Ww({inputs:{x:p},backend:n,attrs:{shape:l}}),m=VI({inputs:{a:d,b:f},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}const QI={kernelName:h.rFG,backendName:"webgl",kernelFunc:HI},jI={kernelName:h.WT3,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s,l=o?a:HI({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new BI(u,c,r),d=[[i]],p=n.runWebGLProgram(h,[l],"int32",d);return o||n.disposeIntermediateTensorInfo(l),p}},qI="return -x;",XI={kernelName:h.l0G,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=Fv(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=(0,h._K2)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new hw(s.shape,qI):new rw(s.shape,qI),n.runWebGLProgram(a,[s],s.dtype)}},JI=h.kpo.nonMaxSuppressionV3Impl,YI={kernelName:h.SDM,backendName:"webgl",kernelFunc:function(e){h.C0T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),{selectedIndices:d}=JI(u,c,i,o,l);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},eT=h.kpo.nonMaxSuppressionV4Impl,tT={kernelName:h.Zl4,backendName:"webgl",kernelFunc:function(e){h.C0T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(a.dataId),d=n.readSync(r.dataId),{selectedIndices:p,validOutputs:f}=eT(c,d,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},nT=h.kpo.nonMaxSuppressionV5Impl,sT={kernelName:h.e0f,backendName:"webgl",kernelFunc:function(e){h.C0T.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(a.dataId),d=n.readSync(r.dataId),p=i,f=o,m=l,g=u,{selectedIndices:x,selectedScores:b}=nT(c,d,p,f,m,g);return[n.makeTensorInfo([x.length],"int32",new Int32Array(x)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class aT{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const rT={kernelName:h.urI,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s,l=h.ZSL.sizeFromShape(a.shape),u=new aT(l,r,i,o),c=Ww({inputs:{x:a},backend:n,attrs:{shape:[l]}}),d=n.runWebGLProgram(u,[c],a.dtype);n.disposeIntermediateTensorInfo(c);const p=Ww({inputs:{x:d},backend:n,attrs:{shape:[...a.shape,r]}});return n.disposeIntermediateTensorInfo(d),p}};function iT(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=Yk({inputs:{input:s},backend:n}),t=iT({inputs:{x:e},backend:n}),a=fC({inputs:{input:s},backend:n}),r=iT({inputs:{x:a},backend:n}),i=Cw({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return SS({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const oT={kernelName:h.xJ3,backendName:"webgl",kernelFunc:iT},lT={kernelName:h.LWX,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=Yk({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=fC({inputs:{input:a},backend:s}),i=iT({inputs:{x:r},backend:s}),o=Cw({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return SS({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}},uT={kernelName:h.mM$,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return mS({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,i=t[0].dtype;t.forEach(e=>{h.ZSL.assertShapesMatch(r,e.shape,"All tensors passed to stack must have matching shapes"),h.ZSL.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=xC({inputs:t.map(e=>{const t=mS({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}};class cT{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,a=Zy(s),r=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class hT{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,a=Zy(s),r=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Jv("rc",s),l=Jv("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const dT=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s;if(0===h.ZSL.sizeFromShape(a.shape)){const e=r.map((e,t)=>e[0]+a.shape[t]+e[1]);return SS({backend:n,attrs:{shape:e,value:i,dtype:a.dtype}})}const o=(0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hT(a.shape,r,i):new cT(a.shape,r,i),l=[[i]];return n.runWebGLProgram(o,[a],a.dtype,l)},pT={kernelName:h.ODT,backendName:"webgl",kernelFunc:dT},fT=Dw({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  "+yw+"\n  return result;\n"}),mT={kernelName:h.pyJ,backendName:"webgl",kernelFunc:fT},gT={kernelName:h.kdj,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=[],u=h.ZSL.parseAxisParam(r,a.shape);let c=u;const d=h.C0T.getAxesPermutation(c,o);let p,f=a;if(null!=d&&(f=qw({inputs:{x:a},backend:n,attrs:{perm:d}}),c=h.C0T.getInnerMostAxes(c.length,o),l.push(f)),h.C0T.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:a}=Ev(f.shape,f.dtype,e,c);p=n.makeTensorInfo(s,a,t)}else{const[e,t]=h.C0T.computeOutAndReduceShapes(f.shape,c),s=h.ZSL.sizeFromShape(t),r=Ww({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=Zw(r,(0,h.chL)(a.dtype),"prod",n);p=Ww({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(r),l.push(i)}if(i){l.push(p);const e=h.C0T.expandShapeToKeepDim(p.shape,u);p=Ww({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},xT=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:i}=n,o=Dv(s,a,r,i);return t.makeTensorInfo([o.length],i,o)},bT={kernelName:h.Q6t,backendName:"webgl",kernelFunc:xT},yT=Ew({opSnippet:"return 1.0 / x;"}),vT={kernelName:h.huO,backendName:"webgl",kernelFunc:yT},wT=Ew({opSnippet:iw+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),kT={kernelName:h.fUj,backendName:"webgl",kernelFunc:wT},CT=Ew({opSnippet:iw+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ST={kernelName:h.P_L,backendName:"webgl",kernelFunc:CT};class IT{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class TT{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const $T={kernelName:h.hgw,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=(0,h._K2)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new TT(a.shape,l,u,r,i):new IT(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],"float32")}};class NT{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const AT={kernelName:h.FCQ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new NT(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class FT{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class RT{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const ET={kernelName:h.jOE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=(0,h._K2)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new RT(a.shape,l,u,r,i):new FT(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],a.dtype)}};class DT{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const LT={kernelName:h.XQy,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new DT(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class zT{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),a=Zy(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class OT{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=Jv("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Zy(n);function o(n){const s=e.map((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const _T={kernelName:h.D7i,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s,i=a.shape.length,o=h.ZSL.parseAxisParam(r,a.shape);if(0===i)return ww({inputs:{x:a},backend:n});const l=(0,h._K2)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OT(a.shape,o):new zT(a.shape,o);return n.runWebGLProgram(l,[a],a.dtype)}};class MT{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const PT={kernelName:h.BK4,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=new MT(s.shape,r),[u,c]=h.C0T.getImageCenter(i,s.shape[1],s.shape[2]),d=[[u,c,Math.sin(a),Math.cos(a)]];return o.runWebGLProgram(l,[s],s.dtype,d)}},WT=Ew({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),BT={kernelName:h.hVg,backendName:"webgl",kernelFunc:WT},VT=Ew({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Lv}),UT={kernelName:h.TOR,backendName:"webgl",kernelFunc:VT};class ZT{constructor(e,t,n,s,a,r,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const o=Zy(a.length),l=Zy(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const GT={kernelName:h.pJc,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=h.C0T.calculateShapes(r,a,i),p=[d/u,u];if(0===d)return n.makeTensorInfo(i,a.dtype);const f=Ww({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),m=Ww({inputs:{x:r},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),x=new ZT(l,o,f.shape.length,m.shape.length,c,p),b=n.runWebGLProgram(x,[m,f,g],m.dtype),y=Ww({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),y}};class KT{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=i.join()}const r=Zy(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const HT={kernelName:h.l6P,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t,i=new KT(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[s,a,r],(0,h.TuY)(a.dtype,r.dtype))}},QT=Ew({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${h.C0T.SELU_SCALEALPHA};\n  float scale = ${h.C0T.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),jT={kernelName:h.u$b,backendName:"webgl",kernelFunc:QT},qT="return 1.0 / (1.0 + exp(-1.0 * x));",XT=Ew({opSnippet:qT,packedOpSnippet:qT,cpuKernelImpl:zv}),JT={kernelName:h.vI1,backendName:"webgl",kernelFunc:XT},YT=Ew({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),e$={kernelName:h.YVe,backendName:"webgl",kernelFunc:YT},t$=Ew({opSnippet:Rw+"\n  return sin(x);\n"}),n$={kernelName:h.hql,backendName:"webgl",kernelFunc:t$},s$=Ew({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),a$={kernelName:h.J3C,backendName:"webgl",kernelFunc:s$},r$=Ew({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),i$={kernelName:h.Fin,backendName:"webgl",kernelFunc:r$},o$={kernelName:h.A8B,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:i}=s;h.ZSL.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const o=r.reduce((e,t)=>e*t),l=[[0,0]];l.push(...i);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=[],c=dT({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),d=h.C0T.getReshaped(c.shape,r,o,!1),p=h.C0T.getPermuted(d.length,r.length,!1),f=h.C0T.getReshapedPermuted(c.shape,r,o,!1),m=Ww({inputs:{x:c},backend:n,attrs:{shape:d}}),g=qw({inputs:{x:m},backend:n,attrs:{perm:p}}),x=Ww({inputs:{x:g},backend:n,attrs:{shape:f}});return u.push(c),u.push(m),u.push(g),u.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},l$={kernelName:h.C8s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(a.dataId),u=n.readSync(r.dataId),c=n.readSync(i.dataId)[0],[h,d,p,f,m]=Mv(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],a.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},u$={kernelName:h.BoJ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.readSync(a.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(r.dataId)),[u,c,h]=Pv(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}},c$={kernelName:h.L6G,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=Wv(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},h$={kernelName:h.DvZ,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=Wv(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},d$={kernelName:h.jgd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:d}=h.C0T.calculateShapes(r,a,o),p=new ZT(u,l,a.shape.length,r.shape.length,c,[d,1],!1),f=n.runWebGLProgram(p,[r,a,i],r.dtype),m=Ww({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},p$={kernelName:h.Blb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=h.ZSL.parseAxisParam(i,a.shape)[0],l=h.C0T.prepareSplitSize(a,r,o),u=a.shape.length,c=new Array(u).fill(0),d=a.shape.slice();return l.map(e=>{const t=[...d];t[o]=e;const s=Kk({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s})}},f$="return sqrt(x);",m$=Ew({opSnippet:f$,packedOpSnippet:f$,cpuKernelImpl:Bv}),g$={kernelName:h.dFH,backendName:"webgl",kernelFunc:m$},x$=Ew({opSnippet:"return x * x;"}),b$={kernelName:h.M6A,backendName:"webgl",kernelFunc:x$},y$="return (a - b) * (a - b);",v$=Dw({opSnippet:y$,packedOpSnippet:y$}),w$={kernelName:h.Ddj,backendName:"webgl",kernelFunc:v$},k$={kernelName:h.pnw,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=iw+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new rw(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class C${constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=Zy(n.length),r=Zy(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const S$={kernelName:h.UcO,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:b,begin:y,end:v,strides:w}=h.Kro.sliceInfo(a.shape,r,i,o,l,u,c,d,p);let k;if(g)k=Ww({inputs:{x:a},backend:n,attrs:{shape:m}});else if(x||b){h.ZSL.assert(a.shape.length>=1,()=>`Input must have rank at least 1, got: ${a.shape.length}`);const e=h.Kro.computeOutShape(y,v,w),t=Kk({inputs:{x:a},backend:n,attrs:{begin:y,size:e}});k=Ww({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=(0,h.ra8)(a.shape,a.dtype,e),s=Vv(f,t,w,y);k=n.makeTensorInfo(m,a.dtype,s.values)}else{const e=new C$(y,w,f);k=n.runWebGLProgram(e,[a],a.dtype)}const C=Ww({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),C}},I$={kernelName:h.YAb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=Uv(d,p,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},T$={kernelName:h.iW0,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(r.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=Zv(o,l,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},$$={kernelName:h.$jE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(r.dataId),o=Gv(i,a);return n.makeTensorInfo(r.shape,"int32",o)}},N$=Ew({opSnippet:"return tan(x);"}),A$={kernelName:h.oFs,backendName:"webgl",kernelFunc:N$},F$=Ew({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),R$={kernelName:h.iuW,backendName:"webgl",kernelFunc:F$};class E${constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=Zy(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function D$(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map(e=>h.ZSL.decodeString(e)):e,s=(0,h.ra8)(a.shape,a.dtype,t),i=Hv(s,r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new E$(a.shape,r);return n.runWebGLProgram(i,[a],a.dtype)}const L$={kernelName:h.FAs,backendName:"webgl",kernelFunc:D$};class z${constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class O${constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function _$(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function M$(e){let t=1;for(;t<e;)t*=2;return t}const P$={kernelName:h.TBb,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s,o=(0,h._K2)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,h._K2)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([a])||c<o||r>l){const e=n.readSync(a.dataId),[t,s]=Qv(e,u,a.dtype,r,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===r)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[a,SS({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const d=n.texData.get(a.dataId),p=null!==d&&d.isPacked,f=p?n.unpackTensor(a):a,m=h.ZSL.sizeFromShape(u)/c,g=Ww({inputs:{x:f},attrs:{shape:[m,c]},backend:n});p&&_$(n,f);const x=M$(r),b=M$(c);let y=null;const v=()=>null===y?[g,g]:[g,y],w=(e,t,s)=>{const a=v(),r=new z$(s),i=[[c],[null===y?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=y;y=n.runWebGLProgram(r,a,"int32",i),_$(n,o)};for(let e=1;e<x;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[m,b])}for(let e=b;e>x;e/=2){const t=v(),s=new O$([m,e/2]),a=[[c],[null===y?1:0],[x]],r=y;y=n.runWebGLProgram(s,t,"int32",a),_$(n,r);const i=x/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,y.shape)}let k=y;y=Kk({inputs:{x:y},backend:n,attrs:{begin:0,size:[m,r]}}),_$(n,k);let C=VS({inputs:{x:g,indices:y},backend:n,attrs:{axis:1,batchDims:1}});_$(n,g);const S=u.slice(0,-1);S.push(r),k=y,y=Ww({inputs:{x:y},attrs:{shape:S},backend:n}),_$(n,k);const I=C;return C=Ww({inputs:{x:C},attrs:{shape:S},backend:n}),_$(n,I),[C,y]}};class W${constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const B$={kernelName:h.dLy,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,d,p]=a.shape,[f,m]=null!=u?u:[h,d],g=new W$(h,d,i,o,l,[c,f,m,p]);return n.runWebGLProgram(g,[a,r],"float32")}},V$={kernelName:h.EwU,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;$y(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(r.dataId),{outputValues:o,outputShape:l,indices:u}=qv(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},U$={kernelName:h.dXR,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a,o=i.shape.length,l=a.shape[r],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==r&&(u[c++]=i.shape[e]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[r]=e;const t=Kk({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),s=Ww({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class Z${constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,i=r*Math.ceil(a/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const G$=[bI,vI,Yw,tk,sk,rk,lk,hk,dk,pk,yk,vk,kk,Sk,Nk,Tk,Fk,Lk,Dk,_k,Mk,Pk,Vk,Qk,jk,qk,tC,aC,oC,cC,Sw,bC,AC,FC,SC,EC,DC,RC,zC,_C,PC,UC,ZC,KC,JC,YC,jC,tS,sS,aS,iS,oS,uS,hS,fS,gS,yS,kS,IS,$S,FS,ES,zS,_S,MS,WS,US,GS,HS,kw,QS,mC,qS,JS,eI,$w,nI,aI,rI,uI,oI,hI,pI,mI,kI,TI,II,AI,FI,RI,SI,EI,DI,zI,MI,WI,jI,Pw,XI,YI,tT,sT,Jk,rT,lT,uT,pT,mT,Fw,gT,bT,eC,UI,vT,ST,kT,Bw,$T,AT,ET,LT,_T,PT,BT,UT,GT,HT,jT,JT,e$,n$,a$,Hk,QI,i$,o$,l$,u$,c$,h$,d$,p$,g$,b$,w$,k$,S$,I$,T$,$$,KI,jw,A$,R$,L$,P$,B$,Xw,V$,U$,{kernelName:h.pPe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s,o=a.shape.length,l=[];let u=0;const c=h.C0T.getAxesPermutation([u],o);let d=a;null!=c&&(d=qw({inputs:{x:a},backend:n,attrs:{perm:c}}),l.push(d),u=h.C0T.getInnerMostAxes(1,o)[0]);const p=h.C0T.segment_util.computeOutShape(d.shape,u,i),f=h.ZSL.sizeFromShape([d.shape[u]]),m=Ww({inputs:{x:d},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=(0,h.chL)(a.dtype),x=(e,t,s,a,r)=>{const i=e.shape[0],o=e.shape[1],u=h.C0T.segment_util.segOpComputeOptimalWindowSize(o,r),c=new Z$({windowSize:u,inSize:o,batchSize:i,numSegments:r},t),d=n.compileAndRun(c,[e,s],a);if(l.push(d),d.shape[1]===r)return d;const p=xT({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),f=D$({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(f),x(d,t,f,a,r)},b=Ww({inputs:{x:x(m,"unsortedSegmentSum",r,g,i)},backend:n,attrs:{shape:p}});let y=b;if(null!=c){l.push(b);const e=h.C0T.getUndoAxesPermutation(c);y=qw({inputs:{x:y},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},oT];for(const e of G$)(0,h.tAK)(e);const K$={"tfjs-core":h.bgA,"tfjs-backend-cpu":"3.11.0","tfjs-backend-webgl":"3.11.0","tfjs-data":Bd,"tfjs-layers":co,"tfjs-converter":Lh.uW,tfjs:"3.11.0"}},2123:function(e,t,n){var s;!function(e,a){function r(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new r(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.alea=o}(0,e=n.nmd(e),n.amdD)},2802:(e,t,n)=>{var s;!function(a,r){var i,o=this,l=256,u="random",c=r.pow(l,6),h=r.pow(2,52),d=2*h,p=255;function f(e,t,n){var s=[],p=b(x((t=1==t?{entropy:!0}:t||{}).entropy?[e,y(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),y(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,y(a)]}}():e,3),s),f=new m(s),v=function(){for(var e=f.g(6),t=c,n=0;e<h;)e=(e+n)*l,t*=l,n=f.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|f.g(4)},v.quick=function(){return f.g(4)/4294967296},v.double=v,b(y(f.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&g(s,f),e.state=function(){return g(f,{})}),n?(r[u]=e,t):e})(v,p,"global"in t?t.global:this==r,t.state)}function m(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[r=p&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=p&a+1],n=n*l+i[p&(i[a]=i[r=p&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(l)}function g(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function x(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(x(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function b(e,t){for(var n,s=e+"",a=0;a<s.length;)t[p&a]=p&(n^=19*t[p&a])+s.charCodeAt(a++);return y(t)}function y(e){return String.fromCharCode.apply(0,e)}if(r["seed"+u]=f,b(r.random(),a),e.exports){e.exports=f;try{i=n(1351)}catch(e){}}else void 0===(s=function(){return f}.call(t,n,t,e))||(e.exports=s)}([],Math)},3004:function(e,t,n){var s;!function(e,a){function r(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},3031:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},3181:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xor128=o}(0,e=n.nmd(e),n.amdD)},3717:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.tychei=o}(0,e=n.nmd(e),n.amdD)},4686:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xor128=o}(0,e=n.nmd(e),n.amdD)},4801:(e,t,n)=>{var s;!function(a,r){var i,o=(0,eval)("this"),l=256,u="random",c=r.pow(l,6),h=r.pow(2,52),d=2*h,p=255;function f(e,t,n){var s=[],p=b(x((t=1==t?{entropy:!0}:t||{}).entropy?[e,y(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),y(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,y(a)]}}():e,3),s),f=new m(s),v=function(){for(var e=f.g(6),t=c,n=0;e<h;)e=(e+n)*l,t*=l,n=f.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|f.g(4)},v.quick=function(){return f.g(4)/4294967296},v.double=v,b(y(f.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&g(s,f),e.state=function(){return g(f,{})}),n?(r[u]=e,t):e})(v,p,"global"in t?t.global:this==r,t.state)}function m(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[r=p&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=p&a+1],n=n*l+i[p&(i[a]=i[r=p&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(l)}function g(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function x(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(x(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function b(e,t){for(var n,s=e+"",a=0;a<s.length;)t[p&a]=p&(n^=19*t[p&a])+s.charCodeAt(a++);return y(t)}function y(e){return String.fromCharCode.apply(0,e)}if(r["seed"+u]=f,b(r.random(),a),e.exports){e.exports=f;try{i=n(1234)}catch(e){}}else void 0===(s=function(){return f}.call(t,n,t,e))||(e.exports=s)}([],Math)},4806:function(e,t,n){var s;!function(e,a){function r(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)},5316:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xorwow=o}(0,e=n.nmd(e),n.amdD)},5802:function(e,t,n){var s;!function(e,a){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function o(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.tychei=o}(0,e=n.nmd(e),n.amdD)},6833:function(e,t,n){var s;!function(e,a){function r(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function o(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xor4096=o}(0,e=n.nmd(e),n.amdD)},7180:function(e,t,n){var s;!function(e,a){function r(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function o(e,t){var n=new r(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.alea=o}(0,e=n.nmd(e),n.amdD)},7391:(e,t,n)=>{var s=n(7180),a=n(3181),r=n(3031),i=n(9067),o=n(6833),l=n(3717),u=n(4801);u.alea=s,u.xor128=a,u.xorwow=r,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},7546:(e,t,n)=>{var s=n(2123),a=n(4686),r=n(5316),i=n(4806),o=n(3004),l=n(5802),u=n(2802);u.alea=s,u.xor128=a,u.xorwow=r,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},9067:function(e,t,n){var s;!function(e,a){function r(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function o(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&i(s,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=o:n.amdD&&n.amdO?void 0===(s=function(){return o}.call(t,n,t,a))||(a.exports=s):this.xorshift7=o}(0,e=n.nmd(e),n.amdD)}}]);